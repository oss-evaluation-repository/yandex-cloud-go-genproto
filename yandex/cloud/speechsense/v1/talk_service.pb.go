// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/speechsense/v1/talk_service.proto

package speechsense

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// streaming request to create audio dialog
type StreamTalkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*StreamTalkRequest_Metadata
	//	*StreamTalkRequest_Audio
	Event isStreamTalkRequest_Event `protobuf_oneof:"Event"`
}

func (x *StreamTalkRequest) Reset() {
	*x = StreamTalkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTalkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTalkRequest) ProtoMessage() {}

func (x *StreamTalkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTalkRequest.ProtoReflect.Descriptor instead.
func (*StreamTalkRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescGZIP(), []int{0}
}

func (m *StreamTalkRequest) GetEvent() isStreamTalkRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *StreamTalkRequest) GetMetadata() *TalkMetadata {
	if x, ok := x.GetEvent().(*StreamTalkRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *StreamTalkRequest) GetAudio() *AudioStreamingRequest {
	if x, ok := x.GetEvent().(*StreamTalkRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isStreamTalkRequest_Event interface {
	isStreamTalkRequest_Event()
}

type StreamTalkRequest_Metadata struct {
	// talk document metadata containing channel id and channel field values
	Metadata *TalkMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type StreamTalkRequest_Audio struct {
	// audio metadata or chunk
	Audio *AudioStreamingRequest `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*StreamTalkRequest_Metadata) isStreamTalkRequest_Event() {}

func (*StreamTalkRequest_Audio) isStreamTalkRequest_Event() {}

// request to create audio dialog
type UploadTalkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *TalkMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// audio payload
	Audio *AudioRequest `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (x *UploadTalkRequest) Reset() {
	*x = UploadTalkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadTalkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTalkRequest) ProtoMessage() {}

func (x *UploadTalkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTalkRequest.ProtoReflect.Descriptor instead.
func (*UploadTalkRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescGZIP(), []int{1}
}

func (x *UploadTalkRequest) GetMetadata() *TalkMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UploadTalkRequest) GetAudio() *AudioRequest {
	if x != nil {
		return x.Audio
	}
	return nil
}

type UploadTalkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of created talk document
	TalkId string `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
}

func (x *UploadTalkResponse) Reset() {
	*x = UploadTalkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadTalkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTalkResponse) ProtoMessage() {}

func (x *UploadTalkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTalkResponse.ProtoReflect.Descriptor instead.
func (*UploadTalkResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescGZIP(), []int{2}
}

func (x *UploadTalkResponse) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

// request to create text based dialog
type UploadTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata    *TalkMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	TextContent *TextContent  `protobuf:"bytes,2,opt,name=text_content,json=textContent,proto3" json:"text_content,omitempty"`
}

func (x *UploadTextRequest) Reset() {
	*x = UploadTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTextRequest) ProtoMessage() {}

func (x *UploadTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTextRequest.ProtoReflect.Descriptor instead.
func (*UploadTextRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescGZIP(), []int{3}
}

func (x *UploadTextRequest) GetMetadata() *TalkMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UploadTextRequest) GetTextContent() *TextContent {
	if x != nil {
		return x.TextContent
	}
	return nil
}

type UploadTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of created talk document
	TalkId string `protobuf:"bytes,1,opt,name=talk_id,json=talkId,proto3" json:"talk_id,omitempty"`
}

func (x *UploadTextResponse) Reset() {
	*x = UploadTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTextResponse) ProtoMessage() {}

func (x *UploadTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTextResponse.ProtoReflect.Descriptor instead.
func (*UploadTextResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescGZIP(), []int{4}
}

func (x *UploadTextResponse) GetTalkId() string {
	if x != nil {
		return x.TalkId
	}
	return ""
}

type TalkMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of connection this talk belongs too
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// channel defined fields
	Fields map[string]string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TalkMetadata) Reset() {
	*x = TalkMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkMetadata) ProtoMessage() {}

func (x *TalkMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkMetadata.ProtoReflect.Descriptor instead.
func (*TalkMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescGZIP(), []int{5}
}

func (x *TalkMetadata) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *TalkMetadata) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_yandex_cloud_speechsense_v1_talk_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_speechsense_v1_talk_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61,
	0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x27, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1,
	0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x6c,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x22, 0x2d, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x22,
	0xa7, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0c,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x6c,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xdc, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x61, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x61, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x69, 0x0a,
	0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x6c, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x6c, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x0a, 0x1f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x54, 0x61, 0x6c, 0x6b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65,
	0x6e, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescData = file_yandex_cloud_speechsense_v1_talk_service_proto_rawDesc
)

func file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescData)
	})
	return file_yandex_cloud_speechsense_v1_talk_service_proto_rawDescData
}

var file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_yandex_cloud_speechsense_v1_talk_service_proto_goTypes = []interface{}{
	(*StreamTalkRequest)(nil),     // 0: yandex.cloud.speechsense.v1.StreamTalkRequest
	(*UploadTalkRequest)(nil),     // 1: yandex.cloud.speechsense.v1.UploadTalkRequest
	(*UploadTalkResponse)(nil),    // 2: yandex.cloud.speechsense.v1.UploadTalkResponse
	(*UploadTextRequest)(nil),     // 3: yandex.cloud.speechsense.v1.UploadTextRequest
	(*UploadTextResponse)(nil),    // 4: yandex.cloud.speechsense.v1.UploadTextResponse
	(*TalkMetadata)(nil),          // 5: yandex.cloud.speechsense.v1.TalkMetadata
	nil,                           // 6: yandex.cloud.speechsense.v1.TalkMetadata.FieldsEntry
	(*AudioStreamingRequest)(nil), // 7: yandex.cloud.speechsense.v1.AudioStreamingRequest
	(*AudioRequest)(nil),          // 8: yandex.cloud.speechsense.v1.AudioRequest
	(*TextContent)(nil),           // 9: yandex.cloud.speechsense.v1.TextContent
}
var file_yandex_cloud_speechsense_v1_talk_service_proto_depIdxs = []int32{
	5,  // 0: yandex.cloud.speechsense.v1.StreamTalkRequest.metadata:type_name -> yandex.cloud.speechsense.v1.TalkMetadata
	7,  // 1: yandex.cloud.speechsense.v1.StreamTalkRequest.audio:type_name -> yandex.cloud.speechsense.v1.AudioStreamingRequest
	5,  // 2: yandex.cloud.speechsense.v1.UploadTalkRequest.metadata:type_name -> yandex.cloud.speechsense.v1.TalkMetadata
	8,  // 3: yandex.cloud.speechsense.v1.UploadTalkRequest.audio:type_name -> yandex.cloud.speechsense.v1.AudioRequest
	5,  // 4: yandex.cloud.speechsense.v1.UploadTextRequest.metadata:type_name -> yandex.cloud.speechsense.v1.TalkMetadata
	9,  // 5: yandex.cloud.speechsense.v1.UploadTextRequest.text_content:type_name -> yandex.cloud.speechsense.v1.TextContent
	6,  // 6: yandex.cloud.speechsense.v1.TalkMetadata.fields:type_name -> yandex.cloud.speechsense.v1.TalkMetadata.FieldsEntry
	0,  // 7: yandex.cloud.speechsense.v1.TalkService.UploadAsStream:input_type -> yandex.cloud.speechsense.v1.StreamTalkRequest
	1,  // 8: yandex.cloud.speechsense.v1.TalkService.Upload:input_type -> yandex.cloud.speechsense.v1.UploadTalkRequest
	3,  // 9: yandex.cloud.speechsense.v1.TalkService.UploadText:input_type -> yandex.cloud.speechsense.v1.UploadTextRequest
	2,  // 10: yandex.cloud.speechsense.v1.TalkService.UploadAsStream:output_type -> yandex.cloud.speechsense.v1.UploadTalkResponse
	2,  // 11: yandex.cloud.speechsense.v1.TalkService.Upload:output_type -> yandex.cloud.speechsense.v1.UploadTalkResponse
	4,  // 12: yandex.cloud.speechsense.v1.TalkService.UploadText:output_type -> yandex.cloud.speechsense.v1.UploadTextResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_yandex_cloud_speechsense_v1_talk_service_proto_init() }
func file_yandex_cloud_speechsense_v1_talk_service_proto_init() {
	if File_yandex_cloud_speechsense_v1_talk_service_proto != nil {
		return
	}
	file_yandex_cloud_speechsense_v1_audio_proto_init()
	file_yandex_cloud_speechsense_v1_text_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTalkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadTalkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadTalkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StreamTalkRequest_Metadata)(nil),
		(*StreamTalkRequest_Audio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_speechsense_v1_talk_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_speechsense_v1_talk_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_speechsense_v1_talk_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_speechsense_v1_talk_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_speechsense_v1_talk_service_proto = out.File
	file_yandex_cloud_speechsense_v1_talk_service_proto_rawDesc = nil
	file_yandex_cloud_speechsense_v1_talk_service_proto_goTypes = nil
	file_yandex_cloud_speechsense_v1_talk_service_proto_depIdxs = nil
}
