// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: yandex/cloud/speechsense/v1/talk_service.proto

package speechsense

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TalkService_UploadAsStream_FullMethodName = "/yandex.cloud.speechsense.v1.TalkService/UploadAsStream"
	TalkService_Upload_FullMethodName         = "/yandex.cloud.speechsense.v1.TalkService/Upload"
)

// TalkServiceClient is the client API for TalkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalkServiceClient interface {
	// rpc for streaming talk documents. First message should contain Talk related metadata,
	// second - audio metadata, others should contain audio bytes in chunks
	UploadAsStream(ctx context.Context, opts ...grpc.CallOption) (TalkService_UploadAsStreamClient, error)
	// rpc for uploading talk document as single message
	Upload(ctx context.Context, in *UploadTalkRequest, opts ...grpc.CallOption) (*UploadTalkResponse, error)
}

type talkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkServiceClient(cc grpc.ClientConnInterface) TalkServiceClient {
	return &talkServiceClient{cc}
}

func (c *talkServiceClient) UploadAsStream(ctx context.Context, opts ...grpc.CallOption) (TalkService_UploadAsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TalkService_ServiceDesc.Streams[0], TalkService_UploadAsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &talkServiceUploadAsStreamClient{stream}
	return x, nil
}

type TalkService_UploadAsStreamClient interface {
	Send(*StreamTalkRequest) error
	CloseAndRecv() (*UploadTalkResponse, error)
	grpc.ClientStream
}

type talkServiceUploadAsStreamClient struct {
	grpc.ClientStream
}

func (x *talkServiceUploadAsStreamClient) Send(m *StreamTalkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *talkServiceUploadAsStreamClient) CloseAndRecv() (*UploadTalkResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadTalkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *talkServiceClient) Upload(ctx context.Context, in *UploadTalkRequest, opts ...grpc.CallOption) (*UploadTalkResponse, error) {
	out := new(UploadTalkResponse)
	err := c.cc.Invoke(ctx, TalkService_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkServiceServer is the server API for TalkService service.
// All implementations should embed UnimplementedTalkServiceServer
// for forward compatibility
type TalkServiceServer interface {
	// rpc for streaming talk documents. First message should contain Talk related metadata,
	// second - audio metadata, others should contain audio bytes in chunks
	UploadAsStream(TalkService_UploadAsStreamServer) error
	// rpc for uploading talk document as single message
	Upload(context.Context, *UploadTalkRequest) (*UploadTalkResponse, error)
}

// UnimplementedTalkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTalkServiceServer struct {
}

func (UnimplementedTalkServiceServer) UploadAsStream(TalkService_UploadAsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAsStream not implemented")
}
func (UnimplementedTalkServiceServer) Upload(context.Context, *UploadTalkRequest) (*UploadTalkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}

// UnsafeTalkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalkServiceServer will
// result in compilation errors.
type UnsafeTalkServiceServer interface {
	mustEmbedUnimplementedTalkServiceServer()
}

func RegisterTalkServiceServer(s grpc.ServiceRegistrar, srv TalkServiceServer) {
	s.RegisterService(&TalkService_ServiceDesc, srv)
}

func _TalkService_UploadAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TalkServiceServer).UploadAsStream(&talkServiceUploadAsStreamServer{stream})
}

type TalkService_UploadAsStreamServer interface {
	SendAndClose(*UploadTalkResponse) error
	Recv() (*StreamTalkRequest, error)
	grpc.ServerStream
}

type talkServiceUploadAsStreamServer struct {
	grpc.ServerStream
}

func (x *talkServiceUploadAsStreamServer) SendAndClose(m *UploadTalkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *talkServiceUploadAsStreamServer) Recv() (*StreamTalkRequest, error) {
	m := new(StreamTalkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TalkService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTalkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalkService_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServiceServer).Upload(ctx, req.(*UploadTalkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TalkService_ServiceDesc is the grpc.ServiceDesc for TalkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TalkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.speechsense.v1.TalkService",
	HandlerType: (*TalkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _TalkService_Upload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAsStream",
			Handler:       _TalkService_UploadAsStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "yandex/cloud/speechsense/v1/talk_service.proto",
}
