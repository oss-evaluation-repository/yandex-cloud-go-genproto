// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: yandex/cloud/datasphere/v1/project_data_service.proto

package datasphere

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectDataService_UploadFile_FullMethodName   = "/yandex.cloud.datasphere.v1.ProjectDataService/UploadFile"
	ProjectDataService_DownloadFile_FullMethodName = "/yandex.cloud.datasphere.v1.ProjectDataService/DownloadFile"
)

// ProjectDataServiceClient is the client API for ProjectDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectDataServiceClient interface {
	// Uploads a file to the specified project.
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (ProjectDataService_UploadFileClient, error)
	// Downloads the specified file from the specified project.
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (ProjectDataService_DownloadFileClient, error)
}

type projectDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectDataServiceClient(cc grpc.ClientConnInterface) ProjectDataServiceClient {
	return &projectDataServiceClient{cc}
}

func (c *projectDataServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (ProjectDataService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectDataService_ServiceDesc.Streams[0], ProjectDataService_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectDataServiceUploadFileClient{stream}
	return x, nil
}

type ProjectDataService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type projectDataServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *projectDataServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *projectDataServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectDataServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (ProjectDataService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectDataService_ServiceDesc.Streams[1], ProjectDataService_DownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectDataServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectDataService_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type projectDataServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *projectDataServiceDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectDataServiceServer is the server API for ProjectDataService service.
// All implementations should embed UnimplementedProjectDataServiceServer
// for forward compatibility
type ProjectDataServiceServer interface {
	// Uploads a file to the specified project.
	UploadFile(ProjectDataService_UploadFileServer) error
	// Downloads the specified file from the specified project.
	DownloadFile(*DownloadFileRequest, ProjectDataService_DownloadFileServer) error
}

// UnimplementedProjectDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectDataServiceServer struct {
}

func (UnimplementedProjectDataServiceServer) UploadFile(ProjectDataService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedProjectDataServiceServer) DownloadFile(*DownloadFileRequest, ProjectDataService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}

// UnsafeProjectDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectDataServiceServer will
// result in compilation errors.
type UnsafeProjectDataServiceServer interface {
	mustEmbedUnimplementedProjectDataServiceServer()
}

func RegisterProjectDataServiceServer(s grpc.ServiceRegistrar, srv ProjectDataServiceServer) {
	s.RegisterService(&ProjectDataService_ServiceDesc, srv)
}

func _ProjectDataService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectDataServiceServer).UploadFile(&projectDataServiceUploadFileServer{stream})
}

type ProjectDataService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type projectDataServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *projectDataServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *projectDataServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProjectDataService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectDataServiceServer).DownloadFile(m, &projectDataServiceDownloadFileServer{stream})
}

type ProjectDataService_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type projectDataServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *projectDataServiceDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProjectDataService_ServiceDesc is the grpc.ServiceDesc for ProjectDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.datasphere.v1.ProjectDataService",
	HandlerType: (*ProjectDataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _ProjectDataService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _ProjectDataService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yandex/cloud/datasphere/v1/project_data_service.proto",
}
