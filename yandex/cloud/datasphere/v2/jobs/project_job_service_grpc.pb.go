// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: yandex/cloud/datasphere/v2/jobs/project_job_service.proto

package datasphere

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectJobService_Create_FullMethodName          = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Create"
	ProjectJobService_Execute_FullMethodName         = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Execute"
	ProjectJobService_Cancel_FullMethodName          = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Cancel"
	ProjectJobService_Finalize_FullMethodName        = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Finalize"
	ProjectJobService_ReadStdLogs_FullMethodName     = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/ReadStdLogs"
	ProjectJobService_DownloadStdLogs_FullMethodName = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/DownloadStdLogs"
	ProjectJobService_List_FullMethodName            = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/List"
	ProjectJobService_Get_FullMethodName             = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Get"
	ProjectJobService_Delete_FullMethodName          = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Delete"
)

// ProjectJobServiceClient is the client API for ProjectJobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectJobServiceClient interface {
	// Creates job.
	Create(ctx context.Context, in *CreateProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Runs job execution.
	Execute(ctx context.Context, in *ExecuteProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Cancels running job.
	Cancel(ctx context.Context, in *CancelProjectJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Triggers cleanup after downloading job results.
	Finalize(ctx context.Context, in *FinalizeProjectJobRequest, opts ...grpc.CallOption) (*FinalizeProjectJobResponse, error)
	// Returns stream of job logs.
	ReadStdLogs(ctx context.Context, in *ReadProjectJobStdLogsRequest, opts ...grpc.CallOption) (ProjectJobService_ReadStdLogsClient, error)
	// Returns URL for downloading job logs.
	DownloadStdLogs(ctx context.Context, in *DownloadProjectJobStdLogsRequest, opts ...grpc.CallOption) (*DownloadProjectJobStdLogsResponse, error)
	// Lists jobs.
	List(ctx context.Context, in *ListProjectJobRequest, opts ...grpc.CallOption) (*ListProjectJobResponse, error)
	// Returns job by id.
	Get(ctx context.Context, in *GetProjectJobRequest, opts ...grpc.CallOption) (*Job, error)
	// Deletes specified job.
	Delete(ctx context.Context, in *DeleteProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type projectJobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectJobServiceClient(cc grpc.ClientConnInterface) ProjectJobServiceClient {
	return &projectJobServiceClient{cc}
}

func (c *projectJobServiceClient) Create(ctx context.Context, in *CreateProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProjectJobService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Execute(ctx context.Context, in *ExecuteProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProjectJobService_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Cancel(ctx context.Context, in *CancelProjectJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectJobService_Cancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Finalize(ctx context.Context, in *FinalizeProjectJobRequest, opts ...grpc.CallOption) (*FinalizeProjectJobResponse, error) {
	out := new(FinalizeProjectJobResponse)
	err := c.cc.Invoke(ctx, ProjectJobService_Finalize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) ReadStdLogs(ctx context.Context, in *ReadProjectJobStdLogsRequest, opts ...grpc.CallOption) (ProjectJobService_ReadStdLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectJobService_ServiceDesc.Streams[0], ProjectJobService_ReadStdLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectJobServiceReadStdLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProjectJobService_ReadStdLogsClient interface {
	Recv() (*ReadProjectJobStdLogsResponse, error)
	grpc.ClientStream
}

type projectJobServiceReadStdLogsClient struct {
	grpc.ClientStream
}

func (x *projectJobServiceReadStdLogsClient) Recv() (*ReadProjectJobStdLogsResponse, error) {
	m := new(ReadProjectJobStdLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectJobServiceClient) DownloadStdLogs(ctx context.Context, in *DownloadProjectJobStdLogsRequest, opts ...grpc.CallOption) (*DownloadProjectJobStdLogsResponse, error) {
	out := new(DownloadProjectJobStdLogsResponse)
	err := c.cc.Invoke(ctx, ProjectJobService_DownloadStdLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) List(ctx context.Context, in *ListProjectJobRequest, opts ...grpc.CallOption) (*ListProjectJobResponse, error) {
	out := new(ListProjectJobResponse)
	err := c.cc.Invoke(ctx, ProjectJobService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Get(ctx context.Context, in *GetProjectJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, ProjectJobService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Delete(ctx context.Context, in *DeleteProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProjectJobService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectJobServiceServer is the server API for ProjectJobService service.
// All implementations should embed UnimplementedProjectJobServiceServer
// for forward compatibility
type ProjectJobServiceServer interface {
	// Creates job.
	Create(context.Context, *CreateProjectJobRequest) (*operation.Operation, error)
	// Runs job execution.
	Execute(context.Context, *ExecuteProjectJobRequest) (*operation.Operation, error)
	// Cancels running job.
	Cancel(context.Context, *CancelProjectJobRequest) (*emptypb.Empty, error)
	// Triggers cleanup after downloading job results.
	Finalize(context.Context, *FinalizeProjectJobRequest) (*FinalizeProjectJobResponse, error)
	// Returns stream of job logs.
	ReadStdLogs(*ReadProjectJobStdLogsRequest, ProjectJobService_ReadStdLogsServer) error
	// Returns URL for downloading job logs.
	DownloadStdLogs(context.Context, *DownloadProjectJobStdLogsRequest) (*DownloadProjectJobStdLogsResponse, error)
	// Lists jobs.
	List(context.Context, *ListProjectJobRequest) (*ListProjectJobResponse, error)
	// Returns job by id.
	Get(context.Context, *GetProjectJobRequest) (*Job, error)
	// Deletes specified job.
	Delete(context.Context, *DeleteProjectJobRequest) (*operation.Operation, error)
}

// UnimplementedProjectJobServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectJobServiceServer struct {
}

func (UnimplementedProjectJobServiceServer) Create(context.Context, *CreateProjectJobRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProjectJobServiceServer) Execute(context.Context, *ExecuteProjectJobRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedProjectJobServiceServer) Cancel(context.Context, *CancelProjectJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedProjectJobServiceServer) Finalize(context.Context, *FinalizeProjectJobRequest) (*FinalizeProjectJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalize not implemented")
}
func (UnimplementedProjectJobServiceServer) ReadStdLogs(*ReadProjectJobStdLogsRequest, ProjectJobService_ReadStdLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadStdLogs not implemented")
}
func (UnimplementedProjectJobServiceServer) DownloadStdLogs(context.Context, *DownloadProjectJobStdLogsRequest) (*DownloadProjectJobStdLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadStdLogs not implemented")
}
func (UnimplementedProjectJobServiceServer) List(context.Context, *ListProjectJobRequest) (*ListProjectJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProjectJobServiceServer) Get(context.Context, *GetProjectJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProjectJobServiceServer) Delete(context.Context, *DeleteProjectJobRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeProjectJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectJobServiceServer will
// result in compilation errors.
type UnsafeProjectJobServiceServer interface {
	mustEmbedUnimplementedProjectJobServiceServer()
}

func RegisterProjectJobServiceServer(s grpc.ServiceRegistrar, srv ProjectJobServiceServer) {
	s.RegisterService(&ProjectJobService_ServiceDesc, srv)
}

func _ProjectJobService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Create(ctx, req.(*CreateProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Execute(ctx, req.(*ExecuteProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Cancel(ctx, req.(*CancelProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Finalize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Finalize(ctx, req.(*FinalizeProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_ReadStdLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadProjectJobStdLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectJobServiceServer).ReadStdLogs(m, &projectJobServiceReadStdLogsServer{stream})
}

type ProjectJobService_ReadStdLogsServer interface {
	Send(*ReadProjectJobStdLogsResponse) error
	grpc.ServerStream
}

type projectJobServiceReadStdLogsServer struct {
	grpc.ServerStream
}

func (x *projectJobServiceReadStdLogsServer) Send(m *ReadProjectJobStdLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProjectJobService_DownloadStdLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadProjectJobStdLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).DownloadStdLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_DownloadStdLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).DownloadStdLogs(ctx, req.(*DownloadProjectJobStdLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).List(ctx, req.(*ListProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Get(ctx, req.(*GetProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Delete(ctx, req.(*DeleteProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectJobService_ServiceDesc is the grpc.ServiceDesc for ProjectJobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectJobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.datasphere.v2.jobs.ProjectJobService",
	HandlerType: (*ProjectJobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProjectJobService_Create_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _ProjectJobService_Execute_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ProjectJobService_Cancel_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _ProjectJobService_Finalize_Handler,
		},
		{
			MethodName: "DownloadStdLogs",
			Handler:    _ProjectJobService_DownloadStdLogs_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProjectJobService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProjectJobService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProjectJobService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadStdLogs",
			Handler:       _ProjectJobService_ReadStdLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yandex/cloud/datasphere/v2/jobs/project_job_service.proto",
}
