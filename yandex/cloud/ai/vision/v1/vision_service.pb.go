// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/ai/vision/v1/vision_service.proto

package vision

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/validation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Feature_Type int32

const (
	Feature_TYPE_UNSPECIFIED Feature_Type = 0
	// Text detection (OCR) feature.
	Feature_TEXT_DETECTION Feature_Type = 1
	// Classification feature.
	Feature_CLASSIFICATION Feature_Type = 2
	// Face detection feature.
	Feature_FACE_DETECTION Feature_Type = 3
)

var Feature_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TEXT_DETECTION",
	2: "CLASSIFICATION",
	3: "FACE_DETECTION",
}

var Feature_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TEXT_DETECTION":   1,
	"CLASSIFICATION":   2,
	"FACE_DETECTION":   3,
}

func (x Feature_Type) String() string {
	return proto.EnumName(Feature_Type_name, int32(x))
}

func (Feature_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d06b6b52fd28cc5, []int{2, 0}
}

type BatchAnalyzeRequest struct {
	// A list of specifications. Each specification contains the file to analyze and features to use for analysis.
	//
	// Restrictions:
	// * Supported file formats: JPEG, PNG.
	// * Maximum file size: 1 MB.
	// * Image size should not exceed 20M pixels (length x width).
	AnalyzeSpecs []*AnalyzeSpec `protobuf:"bytes,1,rep,name=analyze_specs,json=analyzeSpecs,proto3" json:"analyze_specs,omitempty"`
	// ID of the folder to which you have access.
	// Required for authorization with a user account (see [yandex.cloud.iam.v1.UserAccount] resource).
	// Don't specify this field if you make the request on behalf of a service account.
	FolderId             string   `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchAnalyzeRequest) Reset()         { *m = BatchAnalyzeRequest{} }
func (m *BatchAnalyzeRequest) String() string { return proto.CompactTextString(m) }
func (*BatchAnalyzeRequest) ProtoMessage()    {}
func (*BatchAnalyzeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b6b52fd28cc5, []int{0}
}

func (m *BatchAnalyzeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchAnalyzeRequest.Unmarshal(m, b)
}
func (m *BatchAnalyzeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchAnalyzeRequest.Marshal(b, m, deterministic)
}
func (m *BatchAnalyzeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchAnalyzeRequest.Merge(m, src)
}
func (m *BatchAnalyzeRequest) XXX_Size() int {
	return xxx_messageInfo_BatchAnalyzeRequest.Size(m)
}
func (m *BatchAnalyzeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchAnalyzeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchAnalyzeRequest proto.InternalMessageInfo

func (m *BatchAnalyzeRequest) GetAnalyzeSpecs() []*AnalyzeSpec {
	if m != nil {
		return m.AnalyzeSpecs
	}
	return nil
}

func (m *BatchAnalyzeRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

type AnalyzeSpec struct {
	// Types that are valid to be assigned to Source:
	//	*AnalyzeSpec_Content
	Source isAnalyzeSpec_Source `protobuf_oneof:"source"`
	// Requested features to use for analysis.
	//
	// Max count of requested features for one file is 8.
	Features []*Feature `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	// [MIME type](https://en.wikipedia.org/wiki/Media_type) of content (for example, `` application/pdf ``).
	MimeType             string   `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyzeSpec) Reset()         { *m = AnalyzeSpec{} }
func (m *AnalyzeSpec) String() string { return proto.CompactTextString(m) }
func (*AnalyzeSpec) ProtoMessage()    {}
func (*AnalyzeSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b6b52fd28cc5, []int{1}
}

func (m *AnalyzeSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeSpec.Unmarshal(m, b)
}
func (m *AnalyzeSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeSpec.Marshal(b, m, deterministic)
}
func (m *AnalyzeSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeSpec.Merge(m, src)
}
func (m *AnalyzeSpec) XXX_Size() int {
	return xxx_messageInfo_AnalyzeSpec.Size(m)
}
func (m *AnalyzeSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeSpec proto.InternalMessageInfo

type isAnalyzeSpec_Source interface {
	isAnalyzeSpec_Source()
}

type AnalyzeSpec_Content struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3,oneof"`
}

func (*AnalyzeSpec_Content) isAnalyzeSpec_Source() {}

func (m *AnalyzeSpec) GetSource() isAnalyzeSpec_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *AnalyzeSpec) GetContent() []byte {
	if x, ok := m.GetSource().(*AnalyzeSpec_Content); ok {
		return x.Content
	}
	return nil
}

func (m *AnalyzeSpec) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *AnalyzeSpec) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AnalyzeSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AnalyzeSpec_Content)(nil),
	}
}

type Feature struct {
	// Type of requested feature.
	Type Feature_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.ai.vision.v1.Feature_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*Feature_ClassificationConfig
	//	*Feature_TextDetectionConfig
	Config               isFeature_Config `protobuf_oneof:"config"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b6b52fd28cc5, []int{2}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetType() Feature_Type {
	if m != nil {
		return m.Type
	}
	return Feature_TYPE_UNSPECIFIED
}

type isFeature_Config interface {
	isFeature_Config()
}

type Feature_ClassificationConfig struct {
	ClassificationConfig *FeatureClassificationConfig `protobuf:"bytes,2,opt,name=classification_config,json=classificationConfig,proto3,oneof"`
}

type Feature_TextDetectionConfig struct {
	TextDetectionConfig *FeatureTextDetectionConfig `protobuf:"bytes,3,opt,name=text_detection_config,json=textDetectionConfig,proto3,oneof"`
}

func (*Feature_ClassificationConfig) isFeature_Config() {}

func (*Feature_TextDetectionConfig) isFeature_Config() {}

func (m *Feature) GetConfig() isFeature_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Feature) GetClassificationConfig() *FeatureClassificationConfig {
	if x, ok := m.GetConfig().(*Feature_ClassificationConfig); ok {
		return x.ClassificationConfig
	}
	return nil
}

func (m *Feature) GetTextDetectionConfig() *FeatureTextDetectionConfig {
	if x, ok := m.GetConfig().(*Feature_TextDetectionConfig); ok {
		return x.TextDetectionConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Feature) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Feature_ClassificationConfig)(nil),
		(*Feature_TextDetectionConfig)(nil),
	}
}

type FeatureClassificationConfig struct {
	// The model to use for the image analysis.
	Model                string   `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureClassificationConfig) Reset()         { *m = FeatureClassificationConfig{} }
func (m *FeatureClassificationConfig) String() string { return proto.CompactTextString(m) }
func (*FeatureClassificationConfig) ProtoMessage()    {}
func (*FeatureClassificationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b6b52fd28cc5, []int{3}
}

func (m *FeatureClassificationConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureClassificationConfig.Unmarshal(m, b)
}
func (m *FeatureClassificationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureClassificationConfig.Marshal(b, m, deterministic)
}
func (m *FeatureClassificationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureClassificationConfig.Merge(m, src)
}
func (m *FeatureClassificationConfig) XXX_Size() int {
	return xxx_messageInfo_FeatureClassificationConfig.Size(m)
}
func (m *FeatureClassificationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureClassificationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureClassificationConfig proto.InternalMessageInfo

func (m *FeatureClassificationConfig) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

type FeatureTextDetectionConfig struct {
	// List of the languages to recognize text.
	// Specified in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format (for example, `` ru ``).
	LanguageCodes []string `protobuf:"bytes,1,rep,name=language_codes,json=languageCodes,proto3" json:"language_codes,omitempty"`
	// Do not specify this field, custom models are not supported yet.
	Model                string   `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureTextDetectionConfig) Reset()         { *m = FeatureTextDetectionConfig{} }
func (m *FeatureTextDetectionConfig) String() string { return proto.CompactTextString(m) }
func (*FeatureTextDetectionConfig) ProtoMessage()    {}
func (*FeatureTextDetectionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b6b52fd28cc5, []int{4}
}

func (m *FeatureTextDetectionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureTextDetectionConfig.Unmarshal(m, b)
}
func (m *FeatureTextDetectionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureTextDetectionConfig.Marshal(b, m, deterministic)
}
func (m *FeatureTextDetectionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureTextDetectionConfig.Merge(m, src)
}
func (m *FeatureTextDetectionConfig) XXX_Size() int {
	return xxx_messageInfo_FeatureTextDetectionConfig.Size(m)
}
func (m *FeatureTextDetectionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureTextDetectionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureTextDetectionConfig proto.InternalMessageInfo

func (m *FeatureTextDetectionConfig) GetLanguageCodes() []string {
	if m != nil {
		return m.LanguageCodes
	}
	return nil
}

func (m *FeatureTextDetectionConfig) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

type BatchAnalyzeResponse struct {
	// Request results.
	// Results have the same order as specifications in the request.
	Results              []*AnalyzeResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BatchAnalyzeResponse) Reset()         { *m = BatchAnalyzeResponse{} }
func (m *BatchAnalyzeResponse) String() string { return proto.CompactTextString(m) }
func (*BatchAnalyzeResponse) ProtoMessage()    {}
func (*BatchAnalyzeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b6b52fd28cc5, []int{5}
}

func (m *BatchAnalyzeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchAnalyzeResponse.Unmarshal(m, b)
}
func (m *BatchAnalyzeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchAnalyzeResponse.Marshal(b, m, deterministic)
}
func (m *BatchAnalyzeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchAnalyzeResponse.Merge(m, src)
}
func (m *BatchAnalyzeResponse) XXX_Size() int {
	return xxx_messageInfo_BatchAnalyzeResponse.Size(m)
}
func (m *BatchAnalyzeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchAnalyzeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchAnalyzeResponse proto.InternalMessageInfo

func (m *BatchAnalyzeResponse) GetResults() []*AnalyzeResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type AnalyzeResult struct {
	// Results for each requested feature.
	// Feature results have the same order as in the request.
	Results []*FeatureResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// Return error in case of error with file processing.
	Error                *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AnalyzeResult) Reset()         { *m = AnalyzeResult{} }
func (m *AnalyzeResult) String() string { return proto.CompactTextString(m) }
func (*AnalyzeResult) ProtoMessage()    {}
func (*AnalyzeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b6b52fd28cc5, []int{6}
}

func (m *AnalyzeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeResult.Unmarshal(m, b)
}
func (m *AnalyzeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeResult.Marshal(b, m, deterministic)
}
func (m *AnalyzeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeResult.Merge(m, src)
}
func (m *AnalyzeResult) XXX_Size() int {
	return xxx_messageInfo_AnalyzeResult.Size(m)
}
func (m *AnalyzeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeResult.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeResult proto.InternalMessageInfo

func (m *AnalyzeResult) GetResults() []*FeatureResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *AnalyzeResult) GetError() *status.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

type FeatureResult struct {
	// Types that are valid to be assigned to Feature:
	//	*FeatureResult_TextDetection
	//	*FeatureResult_Classification
	//	*FeatureResult_FaceDetection
	Feature isFeatureResult_Feature `protobuf_oneof:"feature"`
	// Return error in case of error during the specified feature processing.
	Error                *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FeatureResult) Reset()         { *m = FeatureResult{} }
func (m *FeatureResult) String() string { return proto.CompactTextString(m) }
func (*FeatureResult) ProtoMessage()    {}
func (*FeatureResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b6b52fd28cc5, []int{7}
}

func (m *FeatureResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureResult.Unmarshal(m, b)
}
func (m *FeatureResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureResult.Marshal(b, m, deterministic)
}
func (m *FeatureResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureResult.Merge(m, src)
}
func (m *FeatureResult) XXX_Size() int {
	return xxx_messageInfo_FeatureResult.Size(m)
}
func (m *FeatureResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureResult.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureResult proto.InternalMessageInfo

type isFeatureResult_Feature interface {
	isFeatureResult_Feature()
}

type FeatureResult_TextDetection struct {
	TextDetection *TextAnnotation `protobuf:"bytes,2,opt,name=text_detection,json=textDetection,proto3,oneof"`
}

type FeatureResult_Classification struct {
	Classification *ClassAnnotation `protobuf:"bytes,3,opt,name=classification,proto3,oneof"`
}

type FeatureResult_FaceDetection struct {
	FaceDetection *FaceAnnotation `protobuf:"bytes,4,opt,name=face_detection,json=faceDetection,proto3,oneof"`
}

func (*FeatureResult_TextDetection) isFeatureResult_Feature() {}

func (*FeatureResult_Classification) isFeatureResult_Feature() {}

func (*FeatureResult_FaceDetection) isFeatureResult_Feature() {}

func (m *FeatureResult) GetFeature() isFeatureResult_Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

func (m *FeatureResult) GetTextDetection() *TextAnnotation {
	if x, ok := m.GetFeature().(*FeatureResult_TextDetection); ok {
		return x.TextDetection
	}
	return nil
}

func (m *FeatureResult) GetClassification() *ClassAnnotation {
	if x, ok := m.GetFeature().(*FeatureResult_Classification); ok {
		return x.Classification
	}
	return nil
}

func (m *FeatureResult) GetFaceDetection() *FaceAnnotation {
	if x, ok := m.GetFeature().(*FeatureResult_FaceDetection); ok {
		return x.FaceDetection
	}
	return nil
}

func (m *FeatureResult) GetError() *status.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FeatureResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FeatureResult_TextDetection)(nil),
		(*FeatureResult_Classification)(nil),
		(*FeatureResult_FaceDetection)(nil),
	}
}

func init() {
	proto.RegisterEnum("yandex.cloud.ai.vision.v1.Feature_Type", Feature_Type_name, Feature_Type_value)
	proto.RegisterType((*BatchAnalyzeRequest)(nil), "yandex.cloud.ai.vision.v1.BatchAnalyzeRequest")
	proto.RegisterType((*AnalyzeSpec)(nil), "yandex.cloud.ai.vision.v1.AnalyzeSpec")
	proto.RegisterType((*Feature)(nil), "yandex.cloud.ai.vision.v1.Feature")
	proto.RegisterType((*FeatureClassificationConfig)(nil), "yandex.cloud.ai.vision.v1.FeatureClassificationConfig")
	proto.RegisterType((*FeatureTextDetectionConfig)(nil), "yandex.cloud.ai.vision.v1.FeatureTextDetectionConfig")
	proto.RegisterType((*BatchAnalyzeResponse)(nil), "yandex.cloud.ai.vision.v1.BatchAnalyzeResponse")
	proto.RegisterType((*AnalyzeResult)(nil), "yandex.cloud.ai.vision.v1.AnalyzeResult")
	proto.RegisterType((*FeatureResult)(nil), "yandex.cloud.ai.vision.v1.FeatureResult")
}

func init() {
	proto.RegisterFile("yandex/cloud/ai/vision/v1/vision_service.proto", fileDescriptor_6d06b6b52fd28cc5)
}

var fileDescriptor_6d06b6b52fd28cc5 = []byte{
	// 843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x35, 0x25, 0xd9, 0x92, 0xd6, 0x96, 0x60, 0x6c, 0x1c, 0x44, 0x75, 0xd3, 0xd6, 0x20, 0xd0,
	0x54, 0x09, 0x60, 0x32, 0x54, 0x2a, 0x37, 0x68, 0xec, 0x02, 0x22, 0x2d, 0xd5, 0x02, 0x8a, 0x34,
	0xa0, 0xd8, 0x22, 0xcd, 0x85, 0x58, 0x2f, 0x57, 0x0c, 0x51, 0x8a, 0xcb, 0x72, 0x97, 0x82, 0x5d,
	0xa0, 0x97, 0x1c, 0x7a, 0xf0, 0xb1, 0xf9, 0x86, 0x7e, 0x44, 0x6f, 0x6d, 0x4f, 0xba, 0xf7, 0x17,
	0xfa, 0x21, 0x01, 0x97, 0x94, 0x4d, 0x3a, 0x31, 0xe5, 0x1b, 0x31, 0xf3, 0xe6, 0xcd, 0xe3, 0xec,
	0xdb, 0x59, 0xa0, 0x9c, 0xa3, 0xc0, 0x21, 0x67, 0x2a, 0xf6, 0x69, 0xec, 0xa8, 0xc8, 0x53, 0xe7,
	0x1e, 0xf3, 0x68, 0xa0, 0xce, 0xb5, 0xec, 0xcb, 0x66, 0x24, 0x9a, 0x7b, 0x98, 0x28, 0x61, 0x44,
	0x39, 0x85, 0x1f, 0xa5, 0x78, 0x45, 0xe0, 0x15, 0xe4, 0x29, 0x29, 0x4a, 0x99, 0x6b, 0xbb, 0x25,
	0x54, 0x9c, 0x9c, 0x71, 0xdb, 0x21, 0x9c, 0x60, 0x9e, 0x80, 0x05, 0x55, 0x19, 0x1e, 0xfb, 0x88,
	0x31, 0x6f, 0xea, 0x61, 0x74, 0x3b, 0xfc, 0x14, 0x61, 0xf2, 0x1e, 0xff, 0x27, 0x05, 0xfc, 0x1c,
	0xf9, 0x9e, 0x93, 0xa7, 0xbb, 0xef, 0x52, 0xea, 0xfa, 0x44, 0x45, 0xa1, 0xa7, 0xa2, 0x20, 0xa0,
	0x5c, 0x24, 0x59, 0x96, 0xbd, 0x97, 0x65, 0xa3, 0x10, 0xab, 0x8c, 0x23, 0x1e, 0x67, 0x09, 0xf9,
	0x0f, 0x09, 0xdc, 0xd1, 0x11, 0xc7, 0xaf, 0x07, 0x01, 0xf2, 0xcf, 0x7f, 0x25, 0x26, 0xf9, 0x25,
	0x26, 0x8c, 0x43, 0x0b, 0xb4, 0x50, 0x1a, 0xb1, 0x59, 0x48, 0x30, 0xeb, 0x48, 0x7b, 0xd5, 0xee,
	0x66, 0xef, 0x81, 0x72, 0xe3, 0xc0, 0x94, 0x8c, 0x61, 0x12, 0x12, 0xac, 0xd7, 0xdf, 0x2c, 0xb4,
	0xaa, 0xb6, 0xff, 0xd4, 0xdc, 0x42, 0x57, 0x51, 0x06, 0x3f, 0x07, 0xcd, 0x29, 0xf5, 0x1d, 0x12,
	0xd9, 0x9e, 0xd3, 0xa9, 0xec, 0x49, 0xdd, 0xa6, 0xde, 0xb8, 0x58, 0x68, 0xb5, 0xc3, 0xa3, 0xfe,
	0x63, 0xb3, 0x91, 0xa6, 0xc6, 0x8e, 0xfc, 0x97, 0x04, 0x36, 0x73, 0x6c, 0xf0, 0x21, 0xa8, 0x63,
	0x1a, 0x70, 0x12, 0xf0, 0x8e, 0xb4, 0x27, 0x75, 0xb7, 0xf4, 0xd6, 0xc5, 0x42, 0x6b, 0x1e, 0x1e,
	0x69, 0x8f, 0xbf, 0x7c, 0xda, 0xff, 0xea, 0xe0, 0x64, 0xcd, 0x5c, 0xe6, 0xe1, 0xb7, 0xa0, 0x31,
	0x25, 0x88, 0xc7, 0x11, 0x61, 0x9d, 0xaa, 0x90, 0x2c, 0x97, 0x48, 0x1e, 0xa5, 0xd0, 0x2b, 0xb9,
	0x97, 0xc5, 0xf0, 0x01, 0x68, 0xce, 0xbc, 0x19, 0xb1, 0xf9, 0x79, 0x48, 0x3a, 0x35, 0x21, 0xb5,
	0x79, 0xb1, 0xd0, 0xd6, 0x0f, 0x8f, 0x7a, 0xfd, 0xbe, 0xd9, 0x48, 0x72, 0xd6, 0x79, 0x48, 0xf4,
	0x36, 0xd8, 0x60, 0x34, 0x8e, 0x30, 0x81, 0xb5, 0xbf, 0xff, 0xd1, 0x24, 0xf9, 0xf7, 0x2a, 0xa8,
	0x67, 0xb4, 0xf0, 0x19, 0xa8, 0x89, 0xf2, 0x44, 0x74, 0xbb, 0xf7, 0xc5, 0x6a, 0x21, 0x4a, 0x42,
	0x69, 0x8a, 0x22, 0x38, 0x03, 0x77, 0x8b, 0xbe, 0xb1, 0x31, 0x0d, 0xa6, 0x9e, 0x2b, 0xe6, 0xb6,
	0xd9, 0x3b, 0x58, 0xcd, 0x66, 0x14, 0xca, 0x0d, 0x51, 0x7d, 0xb2, 0x66, 0xee, 0xe0, 0x0f, 0xc4,
	0xe1, 0xcf, 0xe0, 0x6e, 0xd1, 0xd6, 0xcb, 0x76, 0x55, 0xd1, 0xae, 0xbf, 0xba, 0x9d, 0x45, 0xce,
	0xf8, 0xf1, 0xb2, 0xfa, 0xb2, 0xdb, 0x1d, 0xfe, 0x7e, 0x58, 0x7e, 0x09, 0x6a, 0xc9, 0x9f, 0xc2,
	0x1d, 0xb0, 0x6d, 0xfd, 0xf4, 0x62, 0x68, 0xff, 0xf0, 0x7c, 0xf2, 0x62, 0x68, 0x8c, 0x47, 0xe3,
	0xe1, 0xf1, 0xf6, 0x1a, 0x84, 0xa0, 0x6d, 0x0d, 0x5f, 0x5a, 0xf6, 0xf1, 0xd0, 0x1a, 0x1a, 0xd6,
	0xf8, 0xfb, 0xe7, 0xdb, 0x52, 0x12, 0x33, 0xbe, 0x1b, 0x4c, 0x26, 0xe3, 0xd1, 0xd8, 0x18, 0x88,
	0x58, 0x25, 0x89, 0x8d, 0x06, 0xc6, 0x30, 0x87, 0xab, 0xea, 0x0d, 0xb0, 0x91, 0xea, 0x96, 0xbf,
	0x01, 0x1f, 0x97, 0xcc, 0x01, 0x7e, 0x06, 0xd6, 0x67, 0xd4, 0x21, 0xbe, 0x38, 0x9c, 0xdc, 0xd9,
	0x1e, 0x98, 0x69, 0x5c, 0x66, 0x60, 0xf7, 0xe6, 0x1f, 0x83, 0x7d, 0xd0, 0xf6, 0x51, 0xe0, 0xc6,
	0xc8, 0x25, 0x36, 0xa6, 0x0e, 0x49, 0x2f, 0x48, 0x53, 0x6f, 0x67, 0x4e, 0xba, 0x58, 0x68, 0xd5,
	0xc3, 0xa3, 0x27, 0x66, 0x6b, 0x89, 0x32, 0x12, 0x10, 0xfc, 0x74, 0xd9, 0xf5, 0xba, 0xf9, 0xb3,
	0xa6, 0xaf, 0xc0, 0x4e, 0xf1, 0x36, 0xb2, 0x90, 0x06, 0x8c, 0x40, 0x1d, 0xd4, 0x23, 0xc2, 0x62,
	0x9f, 0x2f, 0x2f, 0x62, 0x77, 0xf5, 0x45, 0x34, 0x45, 0x81, 0xb9, 0x2c, 0x94, 0x7f, 0x03, 0xad,
	0x42, 0x26, 0x4f, 0x5a, 0x59, 0x49, 0x9a, 0xcd, 0xe2, 0x1a, 0x29, 0xec, 0x82, 0x75, 0x12, 0x45,
	0x34, 0x12, 0x63, 0xdc, 0xec, 0x41, 0x25, 0x5d, 0x34, 0x4a, 0x14, 0x62, 0x65, 0x22, 0x16, 0x8d,
	0x99, 0x02, 0xe4, 0x7f, 0x2b, 0xa0, 0x55, 0x20, 0x81, 0x26, 0x68, 0x17, 0x2d, 0x97, 0x59, 0xfb,
	0x61, 0x89, 0x8c, 0xe4, 0x2c, 0x06, 0x97, 0xeb, 0xed, 0x64, 0xcd, 0x6c, 0x15, 0xfc, 0x05, 0x2d,
	0xd0, 0x2e, 0xda, 0x3b, 0xf3, 0xef, 0xa3, 0x12, 0x4e, 0xe1, 0x8f, 0x02, 0xe9, 0x35, 0x8e, 0x44,
	0x69, 0x71, 0x27, 0x8b, 0x8d, 0x50, 0xae, 0x74, 0x84, 0x30, 0x29, 0x2a, 0x4d, 0x28, 0xae, 0x94,
	0xde, 0x7a, 0x72, 0x7a, 0x13, 0xd4, 0xb3, 0xb5, 0xd4, 0xfb, 0x53, 0x02, 0xad, 0x1f, 0x45, 0x8b,
	0x49, 0xfa, 0x8e, 0xc1, 0xb7, 0x12, 0xd8, 0xca, 0x5b, 0x06, 0x2a, 0x25, 0x9a, 0x3e, 0xb0, 0xe9,
	0x77, 0xd5, 0x5b, 0xe3, 0x53, 0x2f, 0xca, 0xf2, 0x9b, 0xff, 0xfe, 0x7f, 0x5b, 0xb9, 0x2f, 0xdf,
	0xcb, 0xbd, 0x58, 0xa7, 0x39, 0xe0, 0xd7, 0xd2, 0x23, 0x7d, 0xf4, 0xea, 0xd8, 0xf5, 0xf8, 0xeb,
	0xf8, 0x54, 0xc1, 0x74, 0xa6, 0xa6, 0x0d, 0xf6, 0xd3, 0x97, 0xcb, 0xa5, 0xfb, 0x2e, 0x09, 0xc4,
	0xeb, 0xa3, 0xde, 0xf8, 0x04, 0x3e, 0x4b, 0xbf, 0x4e, 0x37, 0x04, 0xee, 0xc9, 0xbb, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x0c, 0xd3, 0x8d, 0x20, 0xd8, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VisionServiceClient is the client API for VisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VisionServiceClient interface {
	// Analyzes a batch of images and returns results with annotations.
	BatchAnalyze(ctx context.Context, in *BatchAnalyzeRequest, opts ...grpc.CallOption) (*BatchAnalyzeResponse, error)
}

type visionServiceClient struct {
	cc *grpc.ClientConn
}

func NewVisionServiceClient(cc *grpc.ClientConn) VisionServiceClient {
	return &visionServiceClient{cc}
}

func (c *visionServiceClient) BatchAnalyze(ctx context.Context, in *BatchAnalyzeRequest, opts ...grpc.CallOption) (*BatchAnalyzeResponse, error) {
	out := new(BatchAnalyzeResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.ai.vision.v1.VisionService/BatchAnalyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisionServiceServer is the server API for VisionService service.
type VisionServiceServer interface {
	// Analyzes a batch of images and returns results with annotations.
	BatchAnalyze(context.Context, *BatchAnalyzeRequest) (*BatchAnalyzeResponse, error)
}

// UnimplementedVisionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVisionServiceServer struct {
}

func (*UnimplementedVisionServiceServer) BatchAnalyze(ctx context.Context, req *BatchAnalyzeRequest) (*BatchAnalyzeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BatchAnalyze not implemented")
}

func RegisterVisionServiceServer(s *grpc.Server, srv VisionServiceServer) {
	s.RegisterService(&_VisionService_serviceDesc, srv)
}

func _VisionService_BatchAnalyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServiceServer).BatchAnalyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.ai.vision.v1.VisionService/BatchAnalyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServiceServer).BatchAnalyze(ctx, req.(*BatchAnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VisionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.ai.vision.v1.VisionService",
	HandlerType: (*VisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchAnalyze",
			Handler:    _VisionService_BatchAnalyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/ai/vision/v1/vision_service.proto",
}
