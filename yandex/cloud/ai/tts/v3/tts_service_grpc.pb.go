// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yandex/cloud/ai/tts/v3/tts_service.proto

package tts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SynthesizerClient is the client API for Synthesizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SynthesizerClient interface {
	// Synthesizing text into speech.
	UtteranceSynthesis(ctx context.Context, in *UtteranceSynthesisRequest, opts ...grpc.CallOption) (Synthesizer_UtteranceSynthesisClient, error)
}

type synthesizerClient struct {
	cc grpc.ClientConnInterface
}

func NewSynthesizerClient(cc grpc.ClientConnInterface) SynthesizerClient {
	return &synthesizerClient{cc}
}

func (c *synthesizerClient) UtteranceSynthesis(ctx context.Context, in *UtteranceSynthesisRequest, opts ...grpc.CallOption) (Synthesizer_UtteranceSynthesisClient, error) {
	stream, err := c.cc.NewStream(ctx, &Synthesizer_ServiceDesc.Streams[0], "/speechkit.tts.v3.Synthesizer/UtteranceSynthesis", opts...)
	if err != nil {
		return nil, err
	}
	x := &synthesizerUtteranceSynthesisClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Synthesizer_UtteranceSynthesisClient interface {
	Recv() (*UtteranceSynthesisResponse, error)
	grpc.ClientStream
}

type synthesizerUtteranceSynthesisClient struct {
	grpc.ClientStream
}

func (x *synthesizerUtteranceSynthesisClient) Recv() (*UtteranceSynthesisResponse, error) {
	m := new(UtteranceSynthesisResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SynthesizerServer is the server API for Synthesizer service.
// All implementations should embed UnimplementedSynthesizerServer
// for forward compatibility
type SynthesizerServer interface {
	// Synthesizing text into speech.
	UtteranceSynthesis(*UtteranceSynthesisRequest, Synthesizer_UtteranceSynthesisServer) error
}

// UnimplementedSynthesizerServer should be embedded to have forward compatible implementations.
type UnimplementedSynthesizerServer struct {
}

func (UnimplementedSynthesizerServer) UtteranceSynthesis(*UtteranceSynthesisRequest, Synthesizer_UtteranceSynthesisServer) error {
	return status.Errorf(codes.Unimplemented, "method UtteranceSynthesis not implemented")
}

// UnsafeSynthesizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynthesizerServer will
// result in compilation errors.
type UnsafeSynthesizerServer interface {
	mustEmbedUnimplementedSynthesizerServer()
}

func RegisterSynthesizerServer(s grpc.ServiceRegistrar, srv SynthesizerServer) {
	s.RegisterService(&Synthesizer_ServiceDesc, srv)
}

func _Synthesizer_UtteranceSynthesis_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UtteranceSynthesisRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynthesizerServer).UtteranceSynthesis(m, &synthesizerUtteranceSynthesisServer{stream})
}

type Synthesizer_UtteranceSynthesisServer interface {
	Send(*UtteranceSynthesisResponse) error
	grpc.ServerStream
}

type synthesizerUtteranceSynthesisServer struct {
	grpc.ServerStream
}

func (x *synthesizerUtteranceSynthesisServer) Send(m *UtteranceSynthesisResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Synthesizer_ServiceDesc is the grpc.ServiceDesc for Synthesizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Synthesizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speechkit.tts.v3.Synthesizer",
	HandlerType: (*SynthesizerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UtteranceSynthesis",
			Handler:       _Synthesizer_UtteranceSynthesis_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yandex/cloud/ai/tts/v3/tts_service.proto",
}
