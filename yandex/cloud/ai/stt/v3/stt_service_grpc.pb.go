// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecognizerClient is the client API for Recognizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecognizerClient interface {
	// Expects audio in real-time
	RecognizeStreaming(ctx context.Context, opts ...grpc.CallOption) (Recognizer_RecognizeStreamingClient, error)
}

type recognizerClient struct {
	cc grpc.ClientConnInterface
}

func NewRecognizerClient(cc grpc.ClientConnInterface) RecognizerClient {
	return &recognizerClient{cc}
}

func (c *recognizerClient) RecognizeStreaming(ctx context.Context, opts ...grpc.CallOption) (Recognizer_RecognizeStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Recognizer_ServiceDesc.Streams[0], "/speechkit.stt.v3.Recognizer/RecognizeStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &recognizerRecognizeStreamingClient{stream}
	return x, nil
}

type Recognizer_RecognizeStreamingClient interface {
	Send(*StreamingRequest) error
	Recv() (*StreamingResponse, error)
	grpc.ClientStream
}

type recognizerRecognizeStreamingClient struct {
	grpc.ClientStream
}

func (x *recognizerRecognizeStreamingClient) Send(m *StreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *recognizerRecognizeStreamingClient) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecognizerServer is the server API for Recognizer service.
// All implementations should embed UnimplementedRecognizerServer
// for forward compatibility
type RecognizerServer interface {
	// Expects audio in real-time
	RecognizeStreaming(Recognizer_RecognizeStreamingServer) error
}

// UnimplementedRecognizerServer should be embedded to have forward compatible implementations.
type UnimplementedRecognizerServer struct {
}

func (UnimplementedRecognizerServer) RecognizeStreaming(Recognizer_RecognizeStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method RecognizeStreaming not implemented")
}

// UnsafeRecognizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecognizerServer will
// result in compilation errors.
type UnsafeRecognizerServer interface {
	mustEmbedUnimplementedRecognizerServer()
}

func RegisterRecognizerServer(s grpc.ServiceRegistrar, srv RecognizerServer) {
	s.RegisterService(&Recognizer_ServiceDesc, srv)
}

func _Recognizer_RecognizeStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecognizerServer).RecognizeStreaming(&recognizerRecognizeStreamingServer{stream})
}

type Recognizer_RecognizeStreamingServer interface {
	Send(*StreamingResponse) error
	Recv() (*StreamingRequest, error)
	grpc.ServerStream
}

type recognizerRecognizeStreamingServer struct {
	grpc.ServerStream
}

func (x *recognizerRecognizeStreamingServer) Send(m *StreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *recognizerRecognizeStreamingServer) Recv() (*StreamingRequest, error) {
	m := new(StreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Recognizer_ServiceDesc is the grpc.ServiceDesc for Recognizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recognizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speechkit.stt.v3.Recognizer",
	HandlerType: (*RecognizerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecognizeStreaming",
			Handler:       _Recognizer_RecognizeStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "yandex/cloud/ai/stt/v3/stt_service.proto",
}
