// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: yandex/cloud/ai/llm/v1alpha/llm_service.proto

package llm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextGenerationService_Instruct_FullMethodName = "/yandex.cloud.ai.llm.v1alpha.TextGenerationService/Instruct"
	TextGenerationService_Chat_FullMethodName     = "/yandex.cloud.ai.llm.v1alpha.TextGenerationService/Chat"
)

// TextGenerationServiceClient is the client API for TextGenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextGenerationServiceClient interface {
	Instruct(ctx context.Context, in *InstructRequest, opts ...grpc.CallOption) (TextGenerationService_InstructClient, error)
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (TextGenerationService_ChatClient, error)
}

type textGenerationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextGenerationServiceClient(cc grpc.ClientConnInterface) TextGenerationServiceClient {
	return &textGenerationServiceClient{cc}
}

func (c *textGenerationServiceClient) Instruct(ctx context.Context, in *InstructRequest, opts ...grpc.CallOption) (TextGenerationService_InstructClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextGenerationService_ServiceDesc.Streams[0], TextGenerationService_Instruct_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &textGenerationServiceInstructClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextGenerationService_InstructClient interface {
	Recv() (*InstructResponse, error)
	grpc.ClientStream
}

type textGenerationServiceInstructClient struct {
	grpc.ClientStream
}

func (x *textGenerationServiceInstructClient) Recv() (*InstructResponse, error) {
	m := new(InstructResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textGenerationServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (TextGenerationService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextGenerationService_ServiceDesc.Streams[1], TextGenerationService_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &textGenerationServiceChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextGenerationService_ChatClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type textGenerationServiceChatClient struct {
	grpc.ClientStream
}

func (x *textGenerationServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextGenerationServiceServer is the server API for TextGenerationService service.
// All implementations should embed UnimplementedTextGenerationServiceServer
// for forward compatibility
type TextGenerationServiceServer interface {
	Instruct(*InstructRequest, TextGenerationService_InstructServer) error
	Chat(*ChatRequest, TextGenerationService_ChatServer) error
}

// UnimplementedTextGenerationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTextGenerationServiceServer struct {
}

func (UnimplementedTextGenerationServiceServer) Instruct(*InstructRequest, TextGenerationService_InstructServer) error {
	return status.Errorf(codes.Unimplemented, "method Instruct not implemented")
}
func (UnimplementedTextGenerationServiceServer) Chat(*ChatRequest, TextGenerationService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

// UnsafeTextGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextGenerationServiceServer will
// result in compilation errors.
type UnsafeTextGenerationServiceServer interface {
	mustEmbedUnimplementedTextGenerationServiceServer()
}

func RegisterTextGenerationServiceServer(s grpc.ServiceRegistrar, srv TextGenerationServiceServer) {
	s.RegisterService(&TextGenerationService_ServiceDesc, srv)
}

func _TextGenerationService_Instruct_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstructRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextGenerationServiceServer).Instruct(m, &textGenerationServiceInstructServer{stream})
}

type TextGenerationService_InstructServer interface {
	Send(*InstructResponse) error
	grpc.ServerStream
}

type textGenerationServiceInstructServer struct {
	grpc.ServerStream
}

func (x *textGenerationServiceInstructServer) Send(m *InstructResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TextGenerationService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextGenerationServiceServer).Chat(m, &textGenerationServiceChatServer{stream})
}

type TextGenerationService_ChatServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type textGenerationServiceChatServer struct {
	grpc.ServerStream
}

func (x *textGenerationServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TextGenerationService_ServiceDesc is the grpc.ServiceDesc for TextGenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextGenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.ai.llm.v1alpha.TextGenerationService",
	HandlerType: (*TextGenerationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Instruct",
			Handler:       _TextGenerationService_Instruct_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _TextGenerationService_Chat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yandex/cloud/ai/llm/v1alpha/llm_service.proto",
}

const (
	TokenizerService_Tokenize_FullMethodName = "/yandex.cloud.ai.llm.v1alpha.TokenizerService/Tokenize"
)

// TokenizerServiceClient is the client API for TokenizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenizerServiceClient interface {
	Tokenize(ctx context.Context, in *TokenizeRequest, opts ...grpc.CallOption) (*TokenizeResponse, error)
}

type tokenizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenizerServiceClient(cc grpc.ClientConnInterface) TokenizerServiceClient {
	return &tokenizerServiceClient{cc}
}

func (c *tokenizerServiceClient) Tokenize(ctx context.Context, in *TokenizeRequest, opts ...grpc.CallOption) (*TokenizeResponse, error) {
	out := new(TokenizeResponse)
	err := c.cc.Invoke(ctx, TokenizerService_Tokenize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenizerServiceServer is the server API for TokenizerService service.
// All implementations should embed UnimplementedTokenizerServiceServer
// for forward compatibility
type TokenizerServiceServer interface {
	Tokenize(context.Context, *TokenizeRequest) (*TokenizeResponse, error)
}

// UnimplementedTokenizerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTokenizerServiceServer struct {
}

func (UnimplementedTokenizerServiceServer) Tokenize(context.Context, *TokenizeRequest) (*TokenizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokenize not implemented")
}

// UnsafeTokenizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenizerServiceServer will
// result in compilation errors.
type UnsafeTokenizerServiceServer interface {
	mustEmbedUnimplementedTokenizerServiceServer()
}

func RegisterTokenizerServiceServer(s grpc.ServiceRegistrar, srv TokenizerServiceServer) {
	s.RegisterService(&TokenizerService_ServiceDesc, srv)
}

func _TokenizerService_Tokenize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenizerServiceServer).Tokenize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenizerService_Tokenize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenizerServiceServer).Tokenize(ctx, req.(*TokenizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenizerService_ServiceDesc is the grpc.ServiceDesc for TokenizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.ai.llm.v1alpha.TokenizerService",
	HandlerType: (*TokenizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tokenize",
			Handler:    _TokenizerService_Tokenize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/ai/llm/v1alpha/llm_service.proto",
}

const (
	EmbeddingsService_Embedding_FullMethodName = "/yandex.cloud.ai.llm.v1alpha.EmbeddingsService/Embedding"
)

// EmbeddingsServiceClient is the client API for EmbeddingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbeddingsServiceClient interface {
	Embedding(ctx context.Context, in *EmbeddingRequest, opts ...grpc.CallOption) (*EmbeddingResponse, error)
}

type embeddingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbeddingsServiceClient(cc grpc.ClientConnInterface) EmbeddingsServiceClient {
	return &embeddingsServiceClient{cc}
}

func (c *embeddingsServiceClient) Embedding(ctx context.Context, in *EmbeddingRequest, opts ...grpc.CallOption) (*EmbeddingResponse, error) {
	out := new(EmbeddingResponse)
	err := c.cc.Invoke(ctx, EmbeddingsService_Embedding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbeddingsServiceServer is the server API for EmbeddingsService service.
// All implementations should embed UnimplementedEmbeddingsServiceServer
// for forward compatibility
type EmbeddingsServiceServer interface {
	Embedding(context.Context, *EmbeddingRequest) (*EmbeddingResponse, error)
}

// UnimplementedEmbeddingsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEmbeddingsServiceServer struct {
}

func (UnimplementedEmbeddingsServiceServer) Embedding(context.Context, *EmbeddingRequest) (*EmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Embedding not implemented")
}

// UnsafeEmbeddingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbeddingsServiceServer will
// result in compilation errors.
type UnsafeEmbeddingsServiceServer interface {
	mustEmbedUnimplementedEmbeddingsServiceServer()
}

func RegisterEmbeddingsServiceServer(s grpc.ServiceRegistrar, srv EmbeddingsServiceServer) {
	s.RegisterService(&EmbeddingsService_ServiceDesc, srv)
}

func _EmbeddingsService_Embedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingsServiceServer).Embedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbeddingsService_Embedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingsServiceServer).Embedding(ctx, req.(*EmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmbeddingsService_ServiceDesc is the grpc.ServiceDesc for EmbeddingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbeddingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.ai.llm.v1alpha.EmbeddingsService",
	HandlerType: (*EmbeddingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Embedding",
			Handler:    _EmbeddingsService_Embedding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/ai/llm/v1alpha/llm_service.proto",
}
