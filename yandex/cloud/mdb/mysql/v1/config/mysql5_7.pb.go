// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: yandex/cloud/mdb/mysql/v1/config/mysql5_7.proto

package mysql

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MysqlConfig5_7_SQLMode int32

const (
	MysqlConfig5_7_SQLMODE_UNSPECIFIED        MysqlConfig5_7_SQLMode = 0
	MysqlConfig5_7_ALLOW_INVALID_DATES        MysqlConfig5_7_SQLMode = 1
	MysqlConfig5_7_ANSI_QUOTES                MysqlConfig5_7_SQLMode = 2
	MysqlConfig5_7_ERROR_FOR_DIVISION_BY_ZERO MysqlConfig5_7_SQLMode = 3
	MysqlConfig5_7_HIGH_NOT_PRECEDENCE        MysqlConfig5_7_SQLMode = 4
	MysqlConfig5_7_IGNORE_SPACE               MysqlConfig5_7_SQLMode = 5
	MysqlConfig5_7_NO_AUTO_VALUE_ON_ZERO      MysqlConfig5_7_SQLMode = 6
	MysqlConfig5_7_NO_BACKSLASH_ESCAPES       MysqlConfig5_7_SQLMode = 7
	MysqlConfig5_7_NO_ENGINE_SUBSTITUTION     MysqlConfig5_7_SQLMode = 8
	MysqlConfig5_7_NO_UNSIGNED_SUBTRACTION    MysqlConfig5_7_SQLMode = 9
	MysqlConfig5_7_NO_ZERO_DATE               MysqlConfig5_7_SQLMode = 10
	MysqlConfig5_7_NO_ZERO_IN_DATE            MysqlConfig5_7_SQLMode = 11
	MysqlConfig5_7_NO_FIELD_OPTIONS           MysqlConfig5_7_SQLMode = 12
	MysqlConfig5_7_NO_KEY_OPTIONS             MysqlConfig5_7_SQLMode = 13
	MysqlConfig5_7_NO_TABLE_OPTIONS           MysqlConfig5_7_SQLMode = 14
	MysqlConfig5_7_ONLY_FULL_GROUP_BY         MysqlConfig5_7_SQLMode = 15
	MysqlConfig5_7_PAD_CHAR_TO_FULL_LENGTH    MysqlConfig5_7_SQLMode = 16
	MysqlConfig5_7_PIPES_AS_CONCAT            MysqlConfig5_7_SQLMode = 17
	MysqlConfig5_7_REAL_AS_FLOAT              MysqlConfig5_7_SQLMode = 18
	MysqlConfig5_7_STRICT_ALL_TABLES          MysqlConfig5_7_SQLMode = 19
	MysqlConfig5_7_STRICT_TRANS_TABLES        MysqlConfig5_7_SQLMode = 20
	MysqlConfig5_7_ANSI                       MysqlConfig5_7_SQLMode = 21
	MysqlConfig5_7_TRADITIONAL                MysqlConfig5_7_SQLMode = 22
	MysqlConfig5_7_DB2                        MysqlConfig5_7_SQLMode = 23
	MysqlConfig5_7_MAXDB                      MysqlConfig5_7_SQLMode = 24
	MysqlConfig5_7_MSSQL                      MysqlConfig5_7_SQLMode = 25
	MysqlConfig5_7_MYSQL323                   MysqlConfig5_7_SQLMode = 26
	MysqlConfig5_7_MYSQL40                    MysqlConfig5_7_SQLMode = 27
	MysqlConfig5_7_ORACLE                     MysqlConfig5_7_SQLMode = 28
	MysqlConfig5_7_POSTGRESQL                 MysqlConfig5_7_SQLMode = 29
)

// Enum value maps for MysqlConfig5_7_SQLMode.
var (
	MysqlConfig5_7_SQLMode_name = map[int32]string{
		0:  "SQLMODE_UNSPECIFIED",
		1:  "ALLOW_INVALID_DATES",
		2:  "ANSI_QUOTES",
		3:  "ERROR_FOR_DIVISION_BY_ZERO",
		4:  "HIGH_NOT_PRECEDENCE",
		5:  "IGNORE_SPACE",
		6:  "NO_AUTO_VALUE_ON_ZERO",
		7:  "NO_BACKSLASH_ESCAPES",
		8:  "NO_ENGINE_SUBSTITUTION",
		9:  "NO_UNSIGNED_SUBTRACTION",
		10: "NO_ZERO_DATE",
		11: "NO_ZERO_IN_DATE",
		12: "NO_FIELD_OPTIONS",
		13: "NO_KEY_OPTIONS",
		14: "NO_TABLE_OPTIONS",
		15: "ONLY_FULL_GROUP_BY",
		16: "PAD_CHAR_TO_FULL_LENGTH",
		17: "PIPES_AS_CONCAT",
		18: "REAL_AS_FLOAT",
		19: "STRICT_ALL_TABLES",
		20: "STRICT_TRANS_TABLES",
		21: "ANSI",
		22: "TRADITIONAL",
		23: "DB2",
		24: "MAXDB",
		25: "MSSQL",
		26: "MYSQL323",
		27: "MYSQL40",
		28: "ORACLE",
		29: "POSTGRESQL",
	}
	MysqlConfig5_7_SQLMode_value = map[string]int32{
		"SQLMODE_UNSPECIFIED":        0,
		"ALLOW_INVALID_DATES":        1,
		"ANSI_QUOTES":                2,
		"ERROR_FOR_DIVISION_BY_ZERO": 3,
		"HIGH_NOT_PRECEDENCE":        4,
		"IGNORE_SPACE":               5,
		"NO_AUTO_VALUE_ON_ZERO":      6,
		"NO_BACKSLASH_ESCAPES":       7,
		"NO_ENGINE_SUBSTITUTION":     8,
		"NO_UNSIGNED_SUBTRACTION":    9,
		"NO_ZERO_DATE":               10,
		"NO_ZERO_IN_DATE":            11,
		"NO_FIELD_OPTIONS":           12,
		"NO_KEY_OPTIONS":             13,
		"NO_TABLE_OPTIONS":           14,
		"ONLY_FULL_GROUP_BY":         15,
		"PAD_CHAR_TO_FULL_LENGTH":    16,
		"PIPES_AS_CONCAT":            17,
		"REAL_AS_FLOAT":              18,
		"STRICT_ALL_TABLES":          19,
		"STRICT_TRANS_TABLES":        20,
		"ANSI":                       21,
		"TRADITIONAL":                22,
		"DB2":                        23,
		"MAXDB":                      24,
		"MSSQL":                      25,
		"MYSQL323":                   26,
		"MYSQL40":                    27,
		"ORACLE":                     28,
		"POSTGRESQL":                 29,
	}
)

func (x MysqlConfig5_7_SQLMode) Enum() *MysqlConfig5_7_SQLMode {
	p := new(MysqlConfig5_7_SQLMode)
	*p = x
	return p
}

func (x MysqlConfig5_7_SQLMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_SQLMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[0].Descriptor()
}

func (MysqlConfig5_7_SQLMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[0]
}

func (x MysqlConfig5_7_SQLMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_SQLMode.Descriptor instead.
func (MysqlConfig5_7_SQLMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 0}
}

type MysqlConfig5_7_AuthPlugin int32

const (
	MysqlConfig5_7_AUTH_PLUGIN_UNSPECIFIED MysqlConfig5_7_AuthPlugin = 0
	// Using [Native Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/native-pluggable-authentication.html).
	MysqlConfig5_7_MYSQL_NATIVE_PASSWORD MysqlConfig5_7_AuthPlugin = 1
	// Deprecated: Do not use.
	MysqlConfig5_7_CACHING_SHA2_PASSWORD MysqlConfig5_7_AuthPlugin = 2
	// Using [SHA-256 Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/sha256-pluggable-authentication.html).
	MysqlConfig5_7_SHA256_PASSWORD MysqlConfig5_7_AuthPlugin = 3
)

// Enum value maps for MysqlConfig5_7_AuthPlugin.
var (
	MysqlConfig5_7_AuthPlugin_name = map[int32]string{
		0: "AUTH_PLUGIN_UNSPECIFIED",
		1: "MYSQL_NATIVE_PASSWORD",
		2: "CACHING_SHA2_PASSWORD",
		3: "SHA256_PASSWORD",
	}
	MysqlConfig5_7_AuthPlugin_value = map[string]int32{
		"AUTH_PLUGIN_UNSPECIFIED": 0,
		"MYSQL_NATIVE_PASSWORD":   1,
		"CACHING_SHA2_PASSWORD":   2,
		"SHA256_PASSWORD":         3,
	}
)

func (x MysqlConfig5_7_AuthPlugin) Enum() *MysqlConfig5_7_AuthPlugin {
	p := new(MysqlConfig5_7_AuthPlugin)
	*p = x
	return p
}

func (x MysqlConfig5_7_AuthPlugin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_AuthPlugin) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[1].Descriptor()
}

func (MysqlConfig5_7_AuthPlugin) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[1]
}

func (x MysqlConfig5_7_AuthPlugin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_AuthPlugin.Descriptor instead.
func (MysqlConfig5_7_AuthPlugin) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 1}
}

type MysqlConfig5_7_TransactionIsolation int32

const (
	MysqlConfig5_7_TRANSACTION_ISOLATION_UNSPECIFIED MysqlConfig5_7_TransactionIsolation = 0
	MysqlConfig5_7_READ_COMMITTED                    MysqlConfig5_7_TransactionIsolation = 1
	MysqlConfig5_7_REPEATABLE_READ                   MysqlConfig5_7_TransactionIsolation = 2
	MysqlConfig5_7_SERIALIZABLE                      MysqlConfig5_7_TransactionIsolation = 3
)

// Enum value maps for MysqlConfig5_7_TransactionIsolation.
var (
	MysqlConfig5_7_TransactionIsolation_name = map[int32]string{
		0: "TRANSACTION_ISOLATION_UNSPECIFIED",
		1: "READ_COMMITTED",
		2: "REPEATABLE_READ",
		3: "SERIALIZABLE",
	}
	MysqlConfig5_7_TransactionIsolation_value = map[string]int32{
		"TRANSACTION_ISOLATION_UNSPECIFIED": 0,
		"READ_COMMITTED":                    1,
		"REPEATABLE_READ":                   2,
		"SERIALIZABLE":                      3,
	}
)

func (x MysqlConfig5_7_TransactionIsolation) Enum() *MysqlConfig5_7_TransactionIsolation {
	p := new(MysqlConfig5_7_TransactionIsolation)
	*p = x
	return p
}

func (x MysqlConfig5_7_TransactionIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_TransactionIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[2].Descriptor()
}

func (MysqlConfig5_7_TransactionIsolation) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[2]
}

func (x MysqlConfig5_7_TransactionIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_TransactionIsolation.Descriptor instead.
func (MysqlConfig5_7_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 2}
}

// Options and structure of `MysqlConfig5_7` reflects MySQL 5.7 configuration file
type MysqlConfig5_7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the InnoDB buffer pool used for caching table and index data.
	//
	// For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
	InnodbBufferPoolSize *wrappers.Int64Value `protobuf:"bytes,1,opt,name=innodb_buffer_pool_size,json=innodbBufferPoolSize,proto3" json:"innodb_buffer_pool_size,omitempty"`
	// The maximum permitted number of simultaneous client connections.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
	MaxConnections *wrappers.Int64Value `protobuf:"bytes,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Time that it takes to process a query before it is considered slow.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
	LongQueryTime *wrappers.DoubleValue `protobuf:"bytes,3,opt,name=long_query_time,json=longQueryTime,proto3" json:"long_query_time,omitempty"`
	// Enable writing of general query log of MySQL.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
	GeneralLog *wrappers.BoolValue `protobuf:"bytes,4,opt,name=general_log,json=generalLog,proto3" json:"general_log,omitempty"`
	// Enable writing of audit log of MySQL.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
	AuditLog *wrappers.BoolValue `protobuf:"bytes,5,opt,name=audit_log,json=auditLog,proto3" json:"audit_log,omitempty"`
	// Server SQL mode of MySQL.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
	SqlMode []MysqlConfig5_7_SQLMode `protobuf:"varint,6,rep,packed,name=sql_mode,json=sqlMode,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_SQLMode" json:"sql_mode,omitempty"`
	// The maximum size in bytes of one packet.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
	MaxAllowedPacket *wrappers.Int64Value `protobuf:"bytes,7,opt,name=max_allowed_packet,json=maxAllowedPacket,proto3" json:"max_allowed_packet,omitempty"`
	// Authentication plugin used in the managed MySQL cluster.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin)
	DefaultAuthenticationPlugin MysqlConfig5_7_AuthPlugin `protobuf:"varint,8,opt,name=default_authentication_plugin,json=defaultAuthenticationPlugin,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_AuthPlugin" json:"default_authentication_plugin,omitempty"`
	// Transaction log flush behaviour.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
	InnodbFlushLogAtTrxCommit *wrappers.Int64Value `protobuf:"bytes,9,opt,name=innodb_flush_log_at_trx_commit,json=innodbFlushLogAtTrxCommit,proto3" json:"innodb_flush_log_at_trx_commit,omitempty"`
	// Max time in seconds for a transaction to wait for a row lock
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
	InnodbLockWaitTimeout *wrappers.Int64Value `protobuf:"bytes,10,opt,name=innodb_lock_wait_timeout,json=innodbLockWaitTimeout,proto3" json:"innodb_lock_wait_timeout,omitempty"`
	// Default transaction isolation level.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation)
	TransactionIsolation MysqlConfig5_7_TransactionIsolation `protobuf:"varint,11,opt,name=transaction_isolation,json=transactionIsolation,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_TransactionIsolation" json:"transaction_isolation,omitempty"`
	// Print information about deadlocks in error log
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
	InnodbPrintAllDeadlocks *wrappers.BoolValue `protobuf:"bytes,12,opt,name=innodb_print_all_deadlocks,json=innodbPrintAllDeadlocks,proto3" json:"innodb_print_all_deadlocks,omitempty"`
	// The number of seconds to wait for more data from a connection before aborting the read.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout)
	NetReadTimeout *wrappers.Int64Value `protobuf:"bytes,13,opt,name=net_read_timeout,json=netReadTimeout,proto3" json:"net_read_timeout,omitempty"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout)
	NetWriteTimeout *wrappers.Int64Value `protobuf:"bytes,14,opt,name=net_write_timeout,json=netWriteTimeout,proto3" json:"net_write_timeout,omitempty"`
	// The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len)
	GroupConcatMaxLen *wrappers.Int64Value `protobuf:"bytes,15,opt,name=group_concat_max_len,json=groupConcatMaxLen,proto3" json:"group_concat_max_len,omitempty"`
	// The maximum size of internal in-memory temporary tables.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size)
	TmpTableSize *wrappers.Int64Value `protobuf:"bytes,16,opt,name=tmp_table_size,json=tmpTableSize,proto3" json:"tmp_table_size,omitempty"`
	// This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size)
	MaxHeapTableSize *wrappers.Int64Value `protobuf:"bytes,17,opt,name=max_heap_table_size,json=maxHeapTableSize,proto3" json:"max_heap_table_size,omitempty"`
	// The servers default time zone.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone)
	DefaultTimeZone string `protobuf:"bytes,18,opt,name=default_time_zone,json=defaultTimeZone,proto3" json:"default_time_zone,omitempty"`
	// The servers default character set.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server)
	CharacterSetServer string `protobuf:"bytes,19,opt,name=character_set_server,json=characterSetServer,proto3" json:"character_set_server,omitempty"`
	// The server default collation.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server)
	CollationServer string `protobuf:"bytes,20,opt,name=collation_server,json=collationServer,proto3" json:"collation_server,omitempty"`
}

func (x *MysqlConfig5_7) Reset() {
	*x = MysqlConfig5_7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlConfig5_7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConfig5_7) ProtoMessage() {}

func (x *MysqlConfig5_7) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConfig5_7.ProtoReflect.Descriptor instead.
func (*MysqlConfig5_7) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0}
}

func (x *MysqlConfig5_7) GetInnodbBufferPoolSize() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbBufferPoolSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetMaxConnections() *wrappers.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *MysqlConfig5_7) GetLongQueryTime() *wrappers.DoubleValue {
	if x != nil {
		return x.LongQueryTime
	}
	return nil
}

func (x *MysqlConfig5_7) GetGeneralLog() *wrappers.BoolValue {
	if x != nil {
		return x.GeneralLog
	}
	return nil
}

func (x *MysqlConfig5_7) GetAuditLog() *wrappers.BoolValue {
	if x != nil {
		return x.AuditLog
	}
	return nil
}

func (x *MysqlConfig5_7) GetSqlMode() []MysqlConfig5_7_SQLMode {
	if x != nil {
		return x.SqlMode
	}
	return nil
}

func (x *MysqlConfig5_7) GetMaxAllowedPacket() *wrappers.Int64Value {
	if x != nil {
		return x.MaxAllowedPacket
	}
	return nil
}

func (x *MysqlConfig5_7) GetDefaultAuthenticationPlugin() MysqlConfig5_7_AuthPlugin {
	if x != nil {
		return x.DefaultAuthenticationPlugin
	}
	return MysqlConfig5_7_AUTH_PLUGIN_UNSPECIFIED
}

func (x *MysqlConfig5_7) GetInnodbFlushLogAtTrxCommit() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbFlushLogAtTrxCommit
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbLockWaitTimeout() *wrappers.Int64Value {
	if x != nil {
		return x.InnodbLockWaitTimeout
	}
	return nil
}

func (x *MysqlConfig5_7) GetTransactionIsolation() MysqlConfig5_7_TransactionIsolation {
	if x != nil {
		return x.TransactionIsolation
	}
	return MysqlConfig5_7_TRANSACTION_ISOLATION_UNSPECIFIED
}

func (x *MysqlConfig5_7) GetInnodbPrintAllDeadlocks() *wrappers.BoolValue {
	if x != nil {
		return x.InnodbPrintAllDeadlocks
	}
	return nil
}

func (x *MysqlConfig5_7) GetNetReadTimeout() *wrappers.Int64Value {
	if x != nil {
		return x.NetReadTimeout
	}
	return nil
}

func (x *MysqlConfig5_7) GetNetWriteTimeout() *wrappers.Int64Value {
	if x != nil {
		return x.NetWriteTimeout
	}
	return nil
}

func (x *MysqlConfig5_7) GetGroupConcatMaxLen() *wrappers.Int64Value {
	if x != nil {
		return x.GroupConcatMaxLen
	}
	return nil
}

func (x *MysqlConfig5_7) GetTmpTableSize() *wrappers.Int64Value {
	if x != nil {
		return x.TmpTableSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetMaxHeapTableSize() *wrappers.Int64Value {
	if x != nil {
		return x.MaxHeapTableSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetDefaultTimeZone() string {
	if x != nil {
		return x.DefaultTimeZone
	}
	return ""
}

func (x *MysqlConfig5_7) GetCharacterSetServer() string {
	if x != nil {
		return x.CharacterSetServer
	}
	return ""
}

func (x *MysqlConfig5_7) GetCollationServer() string {
	if x != nil {
		return x.CollationServer
	}
	return ""
}

type MysqlConfigSet5_7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a MySQL 5.7 cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *MysqlConfig5_7 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a MySQL 5.7 cluster.
	UserConfig *MysqlConfig5_7 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a MySQL 5.7 cluster.
	DefaultConfig *MysqlConfig5_7 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *MysqlConfigSet5_7) Reset() {
	*x = MysqlConfigSet5_7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlConfigSet5_7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConfigSet5_7) ProtoMessage() {}

func (x *MysqlConfigSet5_7) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConfigSet5_7.ProtoReflect.Descriptor instead.
func (*MysqlConfigSet5_7) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{1}
}

func (x *MysqlConfigSet5_7) GetEffectiveConfig() *MysqlConfig5_7 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *MysqlConfigSet5_7) GetUserConfig() *MysqlConfig5_7 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *MysqlConfigSet5_7) GetDefaultConfig() *MysqlConfig5_7 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x35, 0x5f, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x80, 0x14, 0x0a, 0x0e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x35, 0x5f, 0x37, 0x12, 0x61, 0x0a, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0xc7, 0x31, 0x09, 0x3e, 0x3d, 0x35, 0x32, 0x34, 0x32, 0x38,
	0x38, 0x30, 0x52, 0x14, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c,
	0xfa, 0xc7, 0x31, 0x08, 0x31, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x12,
	0x37, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x2e, 0x53, 0x51, 0x4c,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0xfa, 0xc7, 0x31, 0x0e, 0x31, 0x30, 0x32, 0x34,
	0x2d, 0x31, 0x33, 0x34, 0x32, 0x31, 0x37, 0x37, 0x32, 0x38, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x7f, 0x0a, 0x1d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x35, 0x5f, 0x37, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x67, 0x0a,
	0x1e, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x31, 0x2d, 0x32, 0x52, 0x19, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x41, 0x74, 0x54, 0x72, 0x78,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x61, 0x0a, 0x18, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d, 0x32, 0x38, 0x38,
	0x30, 0x30, 0x52, 0x15, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x7a, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x1a, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x51,
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x32, 0x30,
	0x30, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x53, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31,
	0x2d, 0x31, 0x32, 0x30, 0x30, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x34, 0x2d, 0x33, 0x33, 0x35, 0x35, 0x34, 0x34, 0x33,
	0x32, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4d, 0x61,
	0x78, 0x4c, 0x65, 0x6e, 0x12, 0x55, 0x0a, 0x0e, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0xfa, 0xc7, 0x31, 0x0e, 0x31,
	0x30, 0x32, 0x34, 0x2d, 0x31, 0x33, 0x34, 0x32, 0x31, 0x37, 0x37, 0x32, 0x38, 0x52, 0x0c, 0x74,
	0x6d, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0xfa, 0xc7, 0x31, 0x0e, 0x31, 0x30, 0x32, 0x34, 0x2d,
	0x31, 0x33, 0x34, 0x32, 0x31, 0x37, 0x37, 0x32, 0x38, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x48, 0x65,
	0x61, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x22, 0xea, 0x04, 0x0a, 0x07, 0x53, 0x51, 0x4c, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x51, 0x4c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x53, 0x49, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45,
	0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x5a, 0x45, 0x52,
	0x4f, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x45,
	0x53, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12,
	0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x53,
	0x55, 0x42, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0d, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x41, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x49, 0x50, 0x45,
	0x53, 0x5f, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x10, 0x11, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x12,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x14,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x4e, 0x53, 0x49, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52,
	0x41, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x42, 0x32, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x58, 0x44, 0x42, 0x10, 0x18, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x53, 0x53, 0x51, 0x4c, 0x10, 0x19, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x59,
	0x53, 0x51, 0x4c, 0x33, 0x32, 0x33, 0x10, 0x1a, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x59, 0x53, 0x51,
	0x4c, 0x34, 0x30, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10,
	0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x51, 0x4c, 0x10,
	0x1d, 0x22, 0x78, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x15, 0x43, 0x41, 0x43, 0x48, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x22, 0x78, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x9c, 0x02, 0x0a, 0x11, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x35, 0x5f, 0x37, 0x12, 0x5b, 0x0a, 0x10, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x35, 0x5f, 0x37, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x72, 0x0a, 0x24, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x4a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x3b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescData = file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDesc
)

func file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescData
}

var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_goTypes = []interface{}{
	(MysqlConfig5_7_SQLMode)(0),              // 0: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode
	(MysqlConfig5_7_AuthPlugin)(0),           // 1: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin
	(MysqlConfig5_7_TransactionIsolation)(0), // 2: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation
	(*MysqlConfig5_7)(nil),                   // 3: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7
	(*MysqlConfigSet5_7)(nil),                // 4: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7
	(*wrappers.Int64Value)(nil),              // 5: google.protobuf.Int64Value
	(*wrappers.DoubleValue)(nil),             // 6: google.protobuf.DoubleValue
	(*wrappers.BoolValue)(nil),               // 7: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_depIdxs = []int32{
	5,  // 0: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_buffer_pool_size:type_name -> google.protobuf.Int64Value
	5,  // 1: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.max_connections:type_name -> google.protobuf.Int64Value
	6,  // 2: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.long_query_time:type_name -> google.protobuf.DoubleValue
	7,  // 3: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.general_log:type_name -> google.protobuf.BoolValue
	7,  // 4: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.audit_log:type_name -> google.protobuf.BoolValue
	0,  // 5: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.sql_mode:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode
	5,  // 6: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.max_allowed_packet:type_name -> google.protobuf.Int64Value
	1,  // 7: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.default_authentication_plugin:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin
	5,  // 8: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_flush_log_at_trx_commit:type_name -> google.protobuf.Int64Value
	5,  // 9: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_lock_wait_timeout:type_name -> google.protobuf.Int64Value
	2,  // 10: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.transaction_isolation:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation
	7,  // 11: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_print_all_deadlocks:type_name -> google.protobuf.BoolValue
	5,  // 12: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.net_read_timeout:type_name -> google.protobuf.Int64Value
	5,  // 13: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.net_write_timeout:type_name -> google.protobuf.Int64Value
	5,  // 14: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.group_concat_max_len:type_name -> google.protobuf.Int64Value
	5,  // 15: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.tmp_table_size:type_name -> google.protobuf.Int64Value
	5,  // 16: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.max_heap_table_size:type_name -> google.protobuf.Int64Value
	3,  // 17: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7.effective_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7
	3,  // 18: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7.user_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7
	3,  // 19: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7.default_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_init() }
func file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_init() {
	if File_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlConfig5_7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlConfigSet5_7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto = out.File
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDesc = nil
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_goTypes = nil
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_depIdxs = nil
}
