// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/mdb/clickhouse/v1/user.proto

package clickhouse

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserSettings_OverflowMode int32

const (
	UserSettings_OVERFLOW_MODE_UNSPECIFIED UserSettings_OverflowMode = 0
	UserSettings_OVERFLOW_MODE_THROW       UserSettings_OverflowMode = 1
	UserSettings_OVERFLOW_MODE_BREAK       UserSettings_OverflowMode = 2
)

var UserSettings_OverflowMode_name = map[int32]string{
	0: "OVERFLOW_MODE_UNSPECIFIED",
	1: "OVERFLOW_MODE_THROW",
	2: "OVERFLOW_MODE_BREAK",
}

var UserSettings_OverflowMode_value = map[string]int32{
	"OVERFLOW_MODE_UNSPECIFIED": 0,
	"OVERFLOW_MODE_THROW":       1,
	"OVERFLOW_MODE_BREAK":       2,
}

func (x UserSettings_OverflowMode) String() string {
	return proto.EnumName(UserSettings_OverflowMode_name, int32(x))
}

func (UserSettings_OverflowMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{3, 0}
}

type UserSettings_GroupByOverflowMode int32

const (
	UserSettings_GROUP_BY_OVERFLOW_MODE_UNSPECIFIED UserSettings_GroupByOverflowMode = 0
	UserSettings_GROUP_BY_OVERFLOW_MODE_THROW       UserSettings_GroupByOverflowMode = 1
	UserSettings_GROUP_BY_OVERFLOW_MODE_BREAK       UserSettings_GroupByOverflowMode = 2
	UserSettings_GROUP_BY_OVERFLOW_MODE_ANY         UserSettings_GroupByOverflowMode = 3
)

var UserSettings_GroupByOverflowMode_name = map[int32]string{
	0: "GROUP_BY_OVERFLOW_MODE_UNSPECIFIED",
	1: "GROUP_BY_OVERFLOW_MODE_THROW",
	2: "GROUP_BY_OVERFLOW_MODE_BREAK",
	3: "GROUP_BY_OVERFLOW_MODE_ANY",
}

var UserSettings_GroupByOverflowMode_value = map[string]int32{
	"GROUP_BY_OVERFLOW_MODE_UNSPECIFIED": 0,
	"GROUP_BY_OVERFLOW_MODE_THROW":       1,
	"GROUP_BY_OVERFLOW_MODE_BREAK":       2,
	"GROUP_BY_OVERFLOW_MODE_ANY":         3,
}

func (x UserSettings_GroupByOverflowMode) String() string {
	return proto.EnumName(UserSettings_GroupByOverflowMode_name, int32(x))
}

func (UserSettings_GroupByOverflowMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{3, 1}
}

type UserSettings_DistributedProductMode int32

const (
	UserSettings_DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED UserSettings_DistributedProductMode = 0
	UserSettings_DISTRIBUTED_PRODUCT_MODE_DENY        UserSettings_DistributedProductMode = 1
	UserSettings_DISTRIBUTED_PRODUCT_MODE_LOCAL       UserSettings_DistributedProductMode = 2
	UserSettings_DISTRIBUTED_PRODUCT_MODE_GLOBAL      UserSettings_DistributedProductMode = 3
	UserSettings_DISTRIBUTED_PRODUCT_MODE_ALLOW       UserSettings_DistributedProductMode = 4
)

var UserSettings_DistributedProductMode_name = map[int32]string{
	0: "DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED",
	1: "DISTRIBUTED_PRODUCT_MODE_DENY",
	2: "DISTRIBUTED_PRODUCT_MODE_LOCAL",
	3: "DISTRIBUTED_PRODUCT_MODE_GLOBAL",
	4: "DISTRIBUTED_PRODUCT_MODE_ALLOW",
}

var UserSettings_DistributedProductMode_value = map[string]int32{
	"DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED": 0,
	"DISTRIBUTED_PRODUCT_MODE_DENY":        1,
	"DISTRIBUTED_PRODUCT_MODE_LOCAL":       2,
	"DISTRIBUTED_PRODUCT_MODE_GLOBAL":      3,
	"DISTRIBUTED_PRODUCT_MODE_ALLOW":       4,
}

func (x UserSettings_DistributedProductMode) String() string {
	return proto.EnumName(UserSettings_DistributedProductMode_name, int32(x))
}

func (UserSettings_DistributedProductMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{3, 2}
}

// A ClickHouse User resource. For more information, see
// the [Developer's guide](/docs/managed-clickhouse/concepts).
type User struct {
	// Name of the ClickHouse user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the ClickHouse cluster the user belongs to.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Set of permissions granted to the user.
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Settings    *UserSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	// Set of quotas assigned to the user.
	Quotas               []*UserQuota `protobuf:"bytes,5,rep,name=quotas,proto3" json:"quotas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *User) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *User) GetSettings() *UserSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *User) GetQuotas() []*UserQuota {
	if m != nil {
		return m.Quotas
	}
	return nil
}

type Permission struct {
	// Name of the database that the permission grants access to.
	DatabaseName         string                   `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DataFilters          []*Permission_DataFilter `protobuf:"bytes,2,rep,name=data_filters,json=dataFilters,proto3" json:"data_filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Permission) Reset()         { *m = Permission{} }
func (m *Permission) String() string { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()    {}
func (*Permission) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{1}
}

func (m *Permission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permission.Unmarshal(m, b)
}
func (m *Permission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permission.Marshal(b, m, deterministic)
}
func (m *Permission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission.Merge(m, src)
}
func (m *Permission) XXX_Size() int {
	return xxx_messageInfo_Permission.Size(m)
}
func (m *Permission) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission.DiscardUnknown(m)
}

var xxx_messageInfo_Permission proto.InternalMessageInfo

func (m *Permission) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func (m *Permission) GetDataFilters() []*Permission_DataFilter {
	if m != nil {
		return m.DataFilters
	}
	return nil
}

type Permission_DataFilter struct {
	TableName            string   `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Filter               string   `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Permission_DataFilter) Reset()         { *m = Permission_DataFilter{} }
func (m *Permission_DataFilter) String() string { return proto.CompactTextString(m) }
func (*Permission_DataFilter) ProtoMessage()    {}
func (*Permission_DataFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{1, 0}
}

func (m *Permission_DataFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permission_DataFilter.Unmarshal(m, b)
}
func (m *Permission_DataFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permission_DataFilter.Marshal(b, m, deterministic)
}
func (m *Permission_DataFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission_DataFilter.Merge(m, src)
}
func (m *Permission_DataFilter) XXX_Size() int {
	return xxx_messageInfo_Permission_DataFilter.Size(m)
}
func (m *Permission_DataFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission_DataFilter.DiscardUnknown(m)
}

var xxx_messageInfo_Permission_DataFilter proto.InternalMessageInfo

func (m *Permission_DataFilter) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *Permission_DataFilter) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type UserSpec struct {
	// Name of the ClickHouse user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Password of the ClickHouse user.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Set of permissions to grant to the user.
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Settings    *UserSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	// Set of quotas assigned to the user.
	Quotas               []*UserQuota `protobuf:"bytes,5,rep,name=quotas,proto3" json:"quotas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UserSpec) Reset()         { *m = UserSpec{} }
func (m *UserSpec) String() string { return proto.CompactTextString(m) }
func (*UserSpec) ProtoMessage()    {}
func (*UserSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{2}
}

func (m *UserSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSpec.Unmarshal(m, b)
}
func (m *UserSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSpec.Marshal(b, m, deterministic)
}
func (m *UserSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSpec.Merge(m, src)
}
func (m *UserSpec) XXX_Size() int {
	return xxx_messageInfo_UserSpec.Size(m)
}
func (m *UserSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UserSpec proto.InternalMessageInfo

func (m *UserSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserSpec) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserSpec) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *UserSpec) GetSettings() *UserSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *UserSpec) GetQuotas() []*UserQuota {
	if m != nil {
		return m.Quotas
	}
	return nil
}

// ClickHouse user settings. Supported settings are a limited subset of all settings
// described in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/).
type UserSettings struct {
	// Restricts permissions for non-DDL queries.
	// Possible values:
	// * 0 (default) —  no restrictions.
	// * 1 — only read data queries are allowed.
	// * 2 — read data and change settings queries are allowed.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/permissions_for_queries/#settings_readonly).
	Readonly *wrappers.Int64Value `protobuf:"bytes,1,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// Whether DDL queries are allowed. Default value: `false`.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/permissions_for_queries/#settings_allow_ddl).
	AllowDdl *wrappers.BoolValue `protobuf:"bytes,2,opt,name=allow_ddl,json=allowDdl,proto3" json:"allow_ddl,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-insert_quorum).
	InsertQuorum *wrappers.Int64Value `protobuf:"bytes,3,opt,name=insert_quorum,json=insertQuorum,proto3" json:"insert_quorum,omitempty"`
	// Connection timeout in milliseconds.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#connect-timeout-receive-timeout-send-timeout).
	ConnectTimeout *wrappers.Int64Value `protobuf:"bytes,39,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Receive timeout in milliseconds.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#connect-timeout-receive-timeout-send-timeout).
	ReceiveTimeout *wrappers.Int64Value `protobuf:"bytes,40,opt,name=receive_timeout,json=receiveTimeout,proto3" json:"receive_timeout,omitempty"`
	// Send timeout in milliseconds.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#connect-timeout-receive-timeout-send-timeout).
	SendTimeout *wrappers.Int64Value `protobuf:"bytes,41,opt,name=send_timeout,json=sendTimeout,proto3" json:"send_timeout,omitempty"`
	// Quorum write timeout in milliseconds. Default value: 60000.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-insert_quorum_timeout).
	InsertQuorumTimeout *wrappers.Int64Value `protobuf:"bytes,4,opt,name=insert_quorum_timeout,json=insertQuorumTimeout,proto3" json:"insert_quorum_timeout,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-select_sequential_consistency).
	SelectSequentialConsistency *wrappers.BoolValue `protobuf:"bytes,5,opt,name=select_sequential_consistency,json=selectSequentialConsistency,proto3" json:"select_sequential_consistency,omitempty"`
	// Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used. Default value: 300000.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
	MaxReplicaDelayForDistributedQueries *wrappers.Int64Value `protobuf:"bytes,6,opt,name=max_replica_delay_for_distributed_queries,json=maxReplicaDelayForDistributedQueries,proto3" json:"max_replica_delay_for_distributed_queries,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
	FallbackToStaleReplicasForDistributedQueries *wrappers.BoolValue `protobuf:"bytes,7,opt,name=fallback_to_stale_replicas_for_distributed_queries,json=fallbackToStaleReplicasForDistributedQueries,proto3" json:"fallback_to_stale_replicas_for_distributed_queries,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/alter/#synchronicity-of-alter-queries).
	ReplicationAlterPartitionsSync *wrappers.Int64Value `protobuf:"bytes,42,opt,name=replication_alter_partitions_sync,json=replicationAlterPartitionsSync,proto3" json:"replication_alter_partitions_sync,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#distributed-product-mode).
	DistributedProductMode UserSettings_DistributedProductMode `protobuf:"varint,43,opt,name=distributed_product_mode,json=distributedProductMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_DistributedProductMode" json:"distributed_product_mode,omitempty"`
	// Whether the memory-saving mode of distributed aggregation is enabled.
	DistributedAggregationMemoryEfficient *wrappers.BoolValue `protobuf:"bytes,72,opt,name=distributed_aggregation_memory_efficient,json=distributedAggregationMemoryEfficient,proto3" json:"distributed_aggregation_memory_efficient,omitempty"`
	// Timeout for DDL queries, in milliseconds.
	DistributedDdlTaskTimeout *wrappers.Int64Value `protobuf:"bytes,73,opt,name=distributed_ddl_task_timeout,json=distributedDdlTaskTimeout,proto3" json:"distributed_ddl_task_timeout,omitempty"`
	// Whether query compilation is enabled.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#compile).
	Compile *wrappers.BoolValue `protobuf:"bytes,44,opt,name=compile,proto3" json:"compile,omitempty"`
	// The number of structurally identical queries before they are compiled.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#min-count-to-compile).
	MinCountToCompile *wrappers.Int64Value `protobuf:"bytes,45,opt,name=min_count_to_compile,json=minCountToCompile,proto3" json:"min_count_to_compile,omitempty"`
	// Whether expression compilation is enabled.
	CompileExpressions *wrappers.BoolValue `protobuf:"bytes,46,opt,name=compile_expressions,json=compileExpressions,proto3" json:"compile_expressions,omitempty"`
	// The number of identical expressions before they are compiled.
	MinCountToCompileExpression *wrappers.Int64Value `protobuf:"bytes,47,opt,name=min_count_to_compile_expression,json=minCountToCompileExpression,proto3" json:"min_count_to_compile_expression,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#max-block-size).
	MaxBlockSize *wrappers.Int64Value `protobuf:"bytes,9,opt,name=max_block_size,json=maxBlockSize,proto3" json:"max_block_size,omitempty"`
	// Squash blocks passed to INSERT query to specified size in rows, if blocks are not big enough. If set to `0`,
	// blocks will never be squashed.
	MinInsertBlockSizeRows *wrappers.Int64Value `protobuf:"bytes,48,opt,name=min_insert_block_size_rows,json=minInsertBlockSizeRows,proto3" json:"min_insert_block_size_rows,omitempty"`
	// Squash blocks passed to INSERT query to specified size in bytes, if blocks are not big enough.  If set to `0`,
	// blocks will never be squashed.
	MinInsertBlockSizeBytes *wrappers.Int64Value `protobuf:"bytes,49,opt,name=min_insert_block_size_bytes,json=minInsertBlockSizeBytes,proto3" json:"min_insert_block_size_bytes,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-max_insert_block_size).
	MaxInsertBlockSize *wrappers.Int64Value `protobuf:"bytes,10,opt,name=max_insert_block_size,json=maxInsertBlockSize,proto3" json:"max_insert_block_size,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-min_bytes_to_use_direct_io).
	MinBytesToUseDirectIo *wrappers.Int64Value `protobuf:"bytes,50,opt,name=min_bytes_to_use_direct_io,json=minBytesToUseDirectIo,proto3" json:"min_bytes_to_use_direct_io,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
	UseUncompressedCache *wrappers.BoolValue `protobuf:"bytes,51,opt,name=use_uncompressed_cache,json=useUncompressedCache,proto3" json:"use_uncompressed_cache,omitempty"`
	// The maximum request size in rows to use the cache of uncompressed data. The cache is not used for requests larger
	// than the specified value.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#setting-merge_tree_max_rows_to_use_cache).
	MergeTreeMaxRowsToUseCache *wrappers.Int64Value `protobuf:"bytes,52,opt,name=merge_tree_max_rows_to_use_cache,json=mergeTreeMaxRowsToUseCache,proto3" json:"merge_tree_max_rows_to_use_cache,omitempty"`
	// The maximum request size in bytes to use the cache of uncompressed data. The cache is not used for requests larger
	// than the specified value.
	MergeTreeMaxBytesToUseCache *wrappers.Int64Value `protobuf:"bytes,53,opt,name=merge_tree_max_bytes_to_use_cache,json=mergeTreeMaxBytesToUseCache,proto3" json:"merge_tree_max_bytes_to_use_cache,omitempty"`
	// The minimum number of rows to be read from a file to enable concurrent read.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#setting-merge_tree_min_rows_for_concurrent_read).
	MergeTreeMinRowsForConcurrentRead *wrappers.Int64Value `protobuf:"bytes,54,opt,name=merge_tree_min_rows_for_concurrent_read,json=mergeTreeMinRowsForConcurrentRead,proto3" json:"merge_tree_min_rows_for_concurrent_read,omitempty"`
	// The minimum number of bytes to be read from a file to enable concurrent read.
	MergeTreeMinBytesForConcurrentRead *wrappers.Int64Value `protobuf:"bytes,55,opt,name=merge_tree_min_bytes_for_concurrent_read,json=mergeTreeMinBytesForConcurrentRead,proto3" json:"merge_tree_min_bytes_for_concurrent_read,omitempty"`
	MaxBytesBeforeExternalGroupBy      *wrappers.Int64Value `protobuf:"bytes,74,opt,name=max_bytes_before_external_group_by,json=maxBytesBeforeExternalGroupBy,proto3" json:"max_bytes_before_external_group_by,omitempty"`
	MaxBytesBeforeExternalSort         *wrappers.Int64Value `protobuf:"bytes,75,opt,name=max_bytes_before_external_sort,json=maxBytesBeforeExternalSort,proto3" json:"max_bytes_before_external_sort,omitempty"`
	GroupByTwoLevelThreshold           *wrappers.Int64Value `protobuf:"bytes,76,opt,name=group_by_two_level_threshold,json=groupByTwoLevelThreshold,proto3" json:"group_by_two_level_threshold,omitempty"`
	GroupByTwoLevelThresholdBytes      *wrappers.Int64Value `protobuf:"bytes,77,opt,name=group_by_two_level_threshold_bytes,json=groupByTwoLevelThresholdBytes,proto3" json:"group_by_two_level_threshold_bytes,omitempty"`
	// Priority of the query.
	Priority *wrappers.Int64Value `protobuf:"bytes,56,opt,name=priority,proto3" json:"priority,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-max_threads).
	MaxThreads *wrappers.Int64Value `protobuf:"bytes,8,opt,name=max_threads,json=maxThreads,proto3" json:"max_threads,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#settings_max_memory_usage).
	MaxMemoryUsage *wrappers.Int64Value `protobuf:"bytes,11,opt,name=max_memory_usage,json=maxMemoryUsage,proto3" json:"max_memory_usage,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-memory-usage-for-user).
	MaxMemoryUsageForUser *wrappers.Int64Value `protobuf:"bytes,12,opt,name=max_memory_usage_for_user,json=maxMemoryUsageForUser,proto3" json:"max_memory_usage_for_user,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-max_network_bandwidth).
	MaxNetworkBandwidth *wrappers.Int64Value `protobuf:"bytes,57,opt,name=max_network_bandwidth,json=maxNetworkBandwidth,proto3" json:"max_network_bandwidth,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-max_network_bandwidth_for_user).
	MaxNetworkBandwidthForUser *wrappers.Int64Value `protobuf:"bytes,58,opt,name=max_network_bandwidth_for_user,json=maxNetworkBandwidthForUser,proto3" json:"max_network_bandwidth_for_user,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-force_index_by_date).
	ForceIndexByDate *wrappers.BoolValue `protobuf:"bytes,59,opt,name=force_index_by_date,json=forceIndexByDate,proto3" json:"force_index_by_date,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#force-primary-key).
	ForcePrimaryKey *wrappers.BoolValue `protobuf:"bytes,60,opt,name=force_primary_key,json=forcePrimaryKey,proto3" json:"force_primary_key,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-rows-to-read).
	MaxRowsToRead *wrappers.Int64Value `protobuf:"bytes,13,opt,name=max_rows_to_read,json=maxRowsToRead,proto3" json:"max_rows_to_read,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-bytes-to-read).
	MaxBytesToRead *wrappers.Int64Value `protobuf:"bytes,14,opt,name=max_bytes_to_read,json=maxBytesToRead,proto3" json:"max_bytes_to_read,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#read-overflow-mode).
	ReadOverflowMode UserSettings_OverflowMode `protobuf:"varint,15,opt,name=read_overflow_mode,json=readOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"read_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-rows-to-group-by).
	MaxRowsToGroupBy *wrappers.Int64Value `protobuf:"bytes,16,opt,name=max_rows_to_group_by,json=maxRowsToGroupBy,proto3" json:"max_rows_to_group_by,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#group-by-overflow-mode).
	GroupByOverflowMode UserSettings_GroupByOverflowMode `protobuf:"varint,17,opt,name=group_by_overflow_mode,json=groupByOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_GroupByOverflowMode" json:"group_by_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-rows-to-sort).
	MaxRowsToSort *wrappers.Int64Value `protobuf:"bytes,18,opt,name=max_rows_to_sort,json=maxRowsToSort,proto3" json:"max_rows_to_sort,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-bytes-to-sort).
	MaxBytesToSort *wrappers.Int64Value `protobuf:"bytes,19,opt,name=max_bytes_to_sort,json=maxBytesToSort,proto3" json:"max_bytes_to_sort,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#sort-overflow-mode).
	SortOverflowMode UserSettings_OverflowMode `protobuf:"varint,20,opt,name=sort_overflow_mode,json=sortOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"sort_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-result-rows).
	MaxResultRows *wrappers.Int64Value `protobuf:"bytes,21,opt,name=max_result_rows,json=maxResultRows,proto3" json:"max_result_rows,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-result-bytes).
	MaxResultBytes *wrappers.Int64Value `protobuf:"bytes,22,opt,name=max_result_bytes,json=maxResultBytes,proto3" json:"max_result_bytes,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#result-overflow-mode).
	ResultOverflowMode UserSettings_OverflowMode `protobuf:"varint,23,opt,name=result_overflow_mode,json=resultOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"result_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-rows-in-distinct).
	MaxRowsInDistinct *wrappers.Int64Value `protobuf:"bytes,24,opt,name=max_rows_in_distinct,json=maxRowsInDistinct,proto3" json:"max_rows_in_distinct,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-bytes-in-distinct).
	MaxBytesInDistinct *wrappers.Int64Value `protobuf:"bytes,25,opt,name=max_bytes_in_distinct,json=maxBytesInDistinct,proto3" json:"max_bytes_in_distinct,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#distinct-overflow-mode).
	DistinctOverflowMode UserSettings_OverflowMode `protobuf:"varint,26,opt,name=distinct_overflow_mode,json=distinctOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"distinct_overflow_mode,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-rows-to-transfer).
	MaxRowsToTransfer *wrappers.Int64Value `protobuf:"bytes,27,opt,name=max_rows_to_transfer,json=maxRowsToTransfer,proto3" json:"max_rows_to_transfer,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-bytes-to-transfer).
	MaxBytesToTransfer *wrappers.Int64Value `protobuf:"bytes,28,opt,name=max_bytes_to_transfer,json=maxBytesToTransfer,proto3" json:"max_bytes_to_transfer,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#transfer-overflow-mode).
	TransferOverflowMode UserSettings_OverflowMode `protobuf:"varint,29,opt,name=transfer_overflow_mode,json=transferOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"transfer_overflow_mode,omitempty"`
	// Maximum query execution time in milliseconds.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-execution-time).
	MaxExecutionTime *wrappers.Int64Value `protobuf:"bytes,30,opt,name=max_execution_time,json=maxExecutionTime,proto3" json:"max_execution_time,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#timeout-overflow-mode).
	TimeoutOverflowMode UserSettings_OverflowMode `protobuf:"varint,31,opt,name=timeout_overflow_mode,json=timeoutOverflowMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode" json:"timeout_overflow_mode,omitempty"`
	// Maximum number of columns that can be read from a table in a single query.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-columns-to-read).
	MaxColumnsToRead *wrappers.Int64Value `protobuf:"bytes,32,opt,name=max_columns_to_read,json=maxColumnsToRead,proto3" json:"max_columns_to_read,omitempty"`
	// Maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-temporary-columns).
	MaxTemporaryColumns *wrappers.Int64Value `protobuf:"bytes,33,opt,name=max_temporary_columns,json=maxTemporaryColumns,proto3" json:"max_temporary_columns,omitempty"`
	// Maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-temporary-non-const-columns).
	MaxTemporaryNonConstColumns *wrappers.Int64Value `protobuf:"bytes,34,opt,name=max_temporary_non_const_columns,json=maxTemporaryNonConstColumns,proto3" json:"max_temporary_non_const_columns,omitempty"`
	// The maximum part of a query that can be taken to RAM for parsing with the SQL parser, in bytes. Default value: 262144.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-max_query_size).
	MaxQuerySize *wrappers.Int64Value `protobuf:"bytes,35,opt,name=max_query_size,json=maxQuerySize,proto3" json:"max_query_size,omitempty"`
	// Maximum depth of query syntax tree. Default value: 1000.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-ast-depth).
	MaxAstDepth *wrappers.Int64Value `protobuf:"bytes,36,opt,name=max_ast_depth,json=maxAstDepth,proto3" json:"max_ast_depth,omitempty"`
	// Maximum size of query syntax tree in number of nodes. Default value: 50000.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/query_complexity/#max-ast-elements).
	MaxAstElements *wrappers.Int64Value `protobuf:"bytes,37,opt,name=max_ast_elements,json=maxAstElements,proto3" json:"max_ast_elements,omitempty"`
	// Maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk. Default value: 500000.
	MaxExpandedAstElements *wrappers.Int64Value `protobuf:"bytes,38,opt,name=max_expanded_ast_elements,json=maxExpandedAstElements,proto3" json:"max_expanded_ast_elements,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
	InputFormatValuesInterpretExpressions *wrappers.BoolValue `protobuf:"bytes,61,opt,name=input_format_values_interpret_expressions,json=inputFormatValuesInterpretExpressions,proto3" json:"input_format_values_interpret_expressions,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#session_settings-input_format_defaults_for_omitted_fields).
	InputFormatDefaultsForOmittedFields *wrappers.BoolValue `protobuf:"bytes,62,opt,name=input_format_defaults_for_omitted_fields,json=inputFormatDefaultsForOmittedFields,proto3" json:"input_format_defaults_for_omitted_fields,omitempty"`
	// Whether quoting of 64-bit integers is enabled in JSON output format.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#session_settings-output_format_json_quote_64bit_integers).
	OutputFormatJsonQuote_64BitIntegers *wrappers.BoolValue `protobuf:"bytes,63,opt,name=output_format_json_quote_64bit_integers,json=outputFormatJsonQuote64bitIntegers,proto3" json:"output_format_json_quote_64bit_integers,omitempty"`
	// Whether output of special floating-point values (`+nan`, `-nan`, `+inf` and `-inf`) is enabled in JSON output format.
	OutputFormatJsonQuoteDenormals      *wrappers.BoolValue `protobuf:"bytes,64,opt,name=output_format_json_quote_denormals,json=outputFormatJsonQuoteDenormals,proto3" json:"output_format_json_quote_denormals,omitempty"`
	LowCardinalityAllowInNativeFormat   *wrappers.BoolValue `protobuf:"bytes,78,opt,name=low_cardinality_allow_in_native_format,json=lowCardinalityAllowInNativeFormat,proto3" json:"low_cardinality_allow_in_native_format,omitempty"`
	EmptyResultForAggregationByEmptySet *wrappers.BoolValue `protobuf:"bytes,79,opt,name=empty_result_for_aggregation_by_empty_set,json=emptyResultForAggregationByEmptySet,proto3" json:"empty_result_for_aggregation_by_empty_set,omitempty"`
	// HTTP connection timeout, in milliseconds.
	HttpConnectionTimeout *wrappers.Int64Value `protobuf:"bytes,65,opt,name=http_connection_timeout,json=httpConnectionTimeout,proto3" json:"http_connection_timeout,omitempty"`
	// HTTP receive timeout, in milliseconds.
	HttpReceiveTimeout *wrappers.Int64Value `protobuf:"bytes,66,opt,name=http_receive_timeout,json=httpReceiveTimeout,proto3" json:"http_receive_timeout,omitempty"`
	// HTTP send timeout, in milliseconds.
	HttpSendTimeout *wrappers.Int64Value `protobuf:"bytes,67,opt,name=http_send_timeout,json=httpSendTimeout,proto3" json:"http_send_timeout,omitempty"`
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-enable_http_compression).
	EnableHttpCompression *wrappers.BoolValue `protobuf:"bytes,68,opt,name=enable_http_compression,json=enableHttpCompression,proto3" json:"enable_http_compression,omitempty"`
	// Whether progress notifications using X-ClickHouse-Progress headers are enabled. Default value: `false`.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/settings/#settings-send_progress_in_http_headers).
	SendProgressInHttpHeaders *wrappers.BoolValue `protobuf:"bytes,69,opt,name=send_progress_in_http_headers,json=sendProgressInHttpHeaders,proto3" json:"send_progress_in_http_headers,omitempty"`
	// Minimum interval between progress notifications, in milliseconds. Default value: 100.
	HttpHeadersProgressInterval *wrappers.Int64Value `protobuf:"bytes,70,opt,name=http_headers_progress_interval,json=httpHeadersProgressInterval,proto3" json:"http_headers_progress_interval,omitempty"`
	// Whether CORS header in HTTP responses is enabled. Default value: `false`.
	AddHttpCorsHeader    *wrappers.BoolValue `protobuf:"bytes,71,opt,name=add_http_cors_header,json=addHttpCorsHeader,proto3" json:"add_http_cors_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UserSettings) Reset()         { *m = UserSettings{} }
func (m *UserSettings) String() string { return proto.CompactTextString(m) }
func (*UserSettings) ProtoMessage()    {}
func (*UserSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{3}
}

func (m *UserSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSettings.Unmarshal(m, b)
}
func (m *UserSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSettings.Marshal(b, m, deterministic)
}
func (m *UserSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSettings.Merge(m, src)
}
func (m *UserSettings) XXX_Size() int {
	return xxx_messageInfo_UserSettings.Size(m)
}
func (m *UserSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSettings.DiscardUnknown(m)
}

var xxx_messageInfo_UserSettings proto.InternalMessageInfo

func (m *UserSettings) GetReadonly() *wrappers.Int64Value {
	if m != nil {
		return m.Readonly
	}
	return nil
}

func (m *UserSettings) GetAllowDdl() *wrappers.BoolValue {
	if m != nil {
		return m.AllowDdl
	}
	return nil
}

func (m *UserSettings) GetInsertQuorum() *wrappers.Int64Value {
	if m != nil {
		return m.InsertQuorum
	}
	return nil
}

func (m *UserSettings) GetConnectTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *UserSettings) GetReceiveTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.ReceiveTimeout
	}
	return nil
}

func (m *UserSettings) GetSendTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.SendTimeout
	}
	return nil
}

func (m *UserSettings) GetInsertQuorumTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.InsertQuorumTimeout
	}
	return nil
}

func (m *UserSettings) GetSelectSequentialConsistency() *wrappers.BoolValue {
	if m != nil {
		return m.SelectSequentialConsistency
	}
	return nil
}

func (m *UserSettings) GetMaxReplicaDelayForDistributedQueries() *wrappers.Int64Value {
	if m != nil {
		return m.MaxReplicaDelayForDistributedQueries
	}
	return nil
}

func (m *UserSettings) GetFallbackToStaleReplicasForDistributedQueries() *wrappers.BoolValue {
	if m != nil {
		return m.FallbackToStaleReplicasForDistributedQueries
	}
	return nil
}

func (m *UserSettings) GetReplicationAlterPartitionsSync() *wrappers.Int64Value {
	if m != nil {
		return m.ReplicationAlterPartitionsSync
	}
	return nil
}

func (m *UserSettings) GetDistributedProductMode() UserSettings_DistributedProductMode {
	if m != nil {
		return m.DistributedProductMode
	}
	return UserSettings_DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED
}

func (m *UserSettings) GetDistributedAggregationMemoryEfficient() *wrappers.BoolValue {
	if m != nil {
		return m.DistributedAggregationMemoryEfficient
	}
	return nil
}

func (m *UserSettings) GetDistributedDdlTaskTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.DistributedDdlTaskTimeout
	}
	return nil
}

func (m *UserSettings) GetCompile() *wrappers.BoolValue {
	if m != nil {
		return m.Compile
	}
	return nil
}

func (m *UserSettings) GetMinCountToCompile() *wrappers.Int64Value {
	if m != nil {
		return m.MinCountToCompile
	}
	return nil
}

func (m *UserSettings) GetCompileExpressions() *wrappers.BoolValue {
	if m != nil {
		return m.CompileExpressions
	}
	return nil
}

func (m *UserSettings) GetMinCountToCompileExpression() *wrappers.Int64Value {
	if m != nil {
		return m.MinCountToCompileExpression
	}
	return nil
}

func (m *UserSettings) GetMaxBlockSize() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBlockSize
	}
	return nil
}

func (m *UserSettings) GetMinInsertBlockSizeRows() *wrappers.Int64Value {
	if m != nil {
		return m.MinInsertBlockSizeRows
	}
	return nil
}

func (m *UserSettings) GetMinInsertBlockSizeBytes() *wrappers.Int64Value {
	if m != nil {
		return m.MinInsertBlockSizeBytes
	}
	return nil
}

func (m *UserSettings) GetMaxInsertBlockSize() *wrappers.Int64Value {
	if m != nil {
		return m.MaxInsertBlockSize
	}
	return nil
}

func (m *UserSettings) GetMinBytesToUseDirectIo() *wrappers.Int64Value {
	if m != nil {
		return m.MinBytesToUseDirectIo
	}
	return nil
}

func (m *UserSettings) GetUseUncompressedCache() *wrappers.BoolValue {
	if m != nil {
		return m.UseUncompressedCache
	}
	return nil
}

func (m *UserSettings) GetMergeTreeMaxRowsToUseCache() *wrappers.Int64Value {
	if m != nil {
		return m.MergeTreeMaxRowsToUseCache
	}
	return nil
}

func (m *UserSettings) GetMergeTreeMaxBytesToUseCache() *wrappers.Int64Value {
	if m != nil {
		return m.MergeTreeMaxBytesToUseCache
	}
	return nil
}

func (m *UserSettings) GetMergeTreeMinRowsForConcurrentRead() *wrappers.Int64Value {
	if m != nil {
		return m.MergeTreeMinRowsForConcurrentRead
	}
	return nil
}

func (m *UserSettings) GetMergeTreeMinBytesForConcurrentRead() *wrappers.Int64Value {
	if m != nil {
		return m.MergeTreeMinBytesForConcurrentRead
	}
	return nil
}

func (m *UserSettings) GetMaxBytesBeforeExternalGroupBy() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesBeforeExternalGroupBy
	}
	return nil
}

func (m *UserSettings) GetMaxBytesBeforeExternalSort() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesBeforeExternalSort
	}
	return nil
}

func (m *UserSettings) GetGroupByTwoLevelThreshold() *wrappers.Int64Value {
	if m != nil {
		return m.GroupByTwoLevelThreshold
	}
	return nil
}

func (m *UserSettings) GetGroupByTwoLevelThresholdBytes() *wrappers.Int64Value {
	if m != nil {
		return m.GroupByTwoLevelThresholdBytes
	}
	return nil
}

func (m *UserSettings) GetPriority() *wrappers.Int64Value {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *UserSettings) GetMaxThreads() *wrappers.Int64Value {
	if m != nil {
		return m.MaxThreads
	}
	return nil
}

func (m *UserSettings) GetMaxMemoryUsage() *wrappers.Int64Value {
	if m != nil {
		return m.MaxMemoryUsage
	}
	return nil
}

func (m *UserSettings) GetMaxMemoryUsageForUser() *wrappers.Int64Value {
	if m != nil {
		return m.MaxMemoryUsageForUser
	}
	return nil
}

func (m *UserSettings) GetMaxNetworkBandwidth() *wrappers.Int64Value {
	if m != nil {
		return m.MaxNetworkBandwidth
	}
	return nil
}

func (m *UserSettings) GetMaxNetworkBandwidthForUser() *wrappers.Int64Value {
	if m != nil {
		return m.MaxNetworkBandwidthForUser
	}
	return nil
}

func (m *UserSettings) GetForceIndexByDate() *wrappers.BoolValue {
	if m != nil {
		return m.ForceIndexByDate
	}
	return nil
}

func (m *UserSettings) GetForcePrimaryKey() *wrappers.BoolValue {
	if m != nil {
		return m.ForcePrimaryKey
	}
	return nil
}

func (m *UserSettings) GetMaxRowsToRead() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsToRead
	}
	return nil
}

func (m *UserSettings) GetMaxBytesToRead() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesToRead
	}
	return nil
}

func (m *UserSettings) GetReadOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.ReadOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxRowsToGroupBy() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsToGroupBy
	}
	return nil
}

func (m *UserSettings) GetGroupByOverflowMode() UserSettings_GroupByOverflowMode {
	if m != nil {
		return m.GroupByOverflowMode
	}
	return UserSettings_GROUP_BY_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxRowsToSort() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsToSort
	}
	return nil
}

func (m *UserSettings) GetMaxBytesToSort() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesToSort
	}
	return nil
}

func (m *UserSettings) GetSortOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.SortOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxResultRows() *wrappers.Int64Value {
	if m != nil {
		return m.MaxResultRows
	}
	return nil
}

func (m *UserSettings) GetMaxResultBytes() *wrappers.Int64Value {
	if m != nil {
		return m.MaxResultBytes
	}
	return nil
}

func (m *UserSettings) GetResultOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.ResultOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxRowsInDistinct() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsInDistinct
	}
	return nil
}

func (m *UserSettings) GetMaxBytesInDistinct() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesInDistinct
	}
	return nil
}

func (m *UserSettings) GetDistinctOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.DistinctOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxRowsToTransfer() *wrappers.Int64Value {
	if m != nil {
		return m.MaxRowsToTransfer
	}
	return nil
}

func (m *UserSettings) GetMaxBytesToTransfer() *wrappers.Int64Value {
	if m != nil {
		return m.MaxBytesToTransfer
	}
	return nil
}

func (m *UserSettings) GetTransferOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.TransferOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxExecutionTime() *wrappers.Int64Value {
	if m != nil {
		return m.MaxExecutionTime
	}
	return nil
}

func (m *UserSettings) GetTimeoutOverflowMode() UserSettings_OverflowMode {
	if m != nil {
		return m.TimeoutOverflowMode
	}
	return UserSettings_OVERFLOW_MODE_UNSPECIFIED
}

func (m *UserSettings) GetMaxColumnsToRead() *wrappers.Int64Value {
	if m != nil {
		return m.MaxColumnsToRead
	}
	return nil
}

func (m *UserSettings) GetMaxTemporaryColumns() *wrappers.Int64Value {
	if m != nil {
		return m.MaxTemporaryColumns
	}
	return nil
}

func (m *UserSettings) GetMaxTemporaryNonConstColumns() *wrappers.Int64Value {
	if m != nil {
		return m.MaxTemporaryNonConstColumns
	}
	return nil
}

func (m *UserSettings) GetMaxQuerySize() *wrappers.Int64Value {
	if m != nil {
		return m.MaxQuerySize
	}
	return nil
}

func (m *UserSettings) GetMaxAstDepth() *wrappers.Int64Value {
	if m != nil {
		return m.MaxAstDepth
	}
	return nil
}

func (m *UserSettings) GetMaxAstElements() *wrappers.Int64Value {
	if m != nil {
		return m.MaxAstElements
	}
	return nil
}

func (m *UserSettings) GetMaxExpandedAstElements() *wrappers.Int64Value {
	if m != nil {
		return m.MaxExpandedAstElements
	}
	return nil
}

func (m *UserSettings) GetInputFormatValuesInterpretExpressions() *wrappers.BoolValue {
	if m != nil {
		return m.InputFormatValuesInterpretExpressions
	}
	return nil
}

func (m *UserSettings) GetInputFormatDefaultsForOmittedFields() *wrappers.BoolValue {
	if m != nil {
		return m.InputFormatDefaultsForOmittedFields
	}
	return nil
}

func (m *UserSettings) GetOutputFormatJsonQuote_64BitIntegers() *wrappers.BoolValue {
	if m != nil {
		return m.OutputFormatJsonQuote_64BitIntegers
	}
	return nil
}

func (m *UserSettings) GetOutputFormatJsonQuoteDenormals() *wrappers.BoolValue {
	if m != nil {
		return m.OutputFormatJsonQuoteDenormals
	}
	return nil
}

func (m *UserSettings) GetLowCardinalityAllowInNativeFormat() *wrappers.BoolValue {
	if m != nil {
		return m.LowCardinalityAllowInNativeFormat
	}
	return nil
}

func (m *UserSettings) GetEmptyResultForAggregationByEmptySet() *wrappers.BoolValue {
	if m != nil {
		return m.EmptyResultForAggregationByEmptySet
	}
	return nil
}

func (m *UserSettings) GetHttpConnectionTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.HttpConnectionTimeout
	}
	return nil
}

func (m *UserSettings) GetHttpReceiveTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.HttpReceiveTimeout
	}
	return nil
}

func (m *UserSettings) GetHttpSendTimeout() *wrappers.Int64Value {
	if m != nil {
		return m.HttpSendTimeout
	}
	return nil
}

func (m *UserSettings) GetEnableHttpCompression() *wrappers.BoolValue {
	if m != nil {
		return m.EnableHttpCompression
	}
	return nil
}

func (m *UserSettings) GetSendProgressInHttpHeaders() *wrappers.BoolValue {
	if m != nil {
		return m.SendProgressInHttpHeaders
	}
	return nil
}

func (m *UserSettings) GetHttpHeadersProgressInterval() *wrappers.Int64Value {
	if m != nil {
		return m.HttpHeadersProgressInterval
	}
	return nil
}

func (m *UserSettings) GetAddHttpCorsHeader() *wrappers.BoolValue {
	if m != nil {
		return m.AddHttpCorsHeader
	}
	return nil
}

// ClickHouse quota representation. Each quota associated with an user and limits it resource usage for an interval.
// See in-depth description [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/quotas/).
type UserQuota struct {
	// Duration of interval for quota in milliseconds.
	// Minimal value is 1 minute.
	IntervalDuration *wrappers.Int64Value `protobuf:"bytes,1,opt,name=interval_duration,json=intervalDuration,proto3" json:"interval_duration,omitempty"`
	// The total number of queries.
	// 0 - unlimited.
	Queries *wrappers.Int64Value `protobuf:"bytes,2,opt,name=queries,proto3" json:"queries,omitempty"`
	// The number of queries that threw exception.
	// 0 - unlimited.
	Errors *wrappers.Int64Value `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
	// The total number of rows given as the result..
	// 0 - unlimited.
	ResultRows *wrappers.Int64Value `protobuf:"bytes,4,opt,name=result_rows,json=resultRows,proto3" json:"result_rows,omitempty"`
	// The total number of source rows read from tables for running the query, on all remote servers.
	// 0 - unlimited.
	ReadRows *wrappers.Int64Value `protobuf:"bytes,5,opt,name=read_rows,json=readRows,proto3" json:"read_rows,omitempty"`
	// The total query execution time, in milliseconds (wall time).
	// 0 - unlimited.
	ExecutionTime        *wrappers.Int64Value `protobuf:"bytes,6,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserQuota) Reset()         { *m = UserQuota{} }
func (m *UserQuota) String() string { return proto.CompactTextString(m) }
func (*UserQuota) ProtoMessage()    {}
func (*UserQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_f24bb57d787c6d5e, []int{4}
}

func (m *UserQuota) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQuota.Unmarshal(m, b)
}
func (m *UserQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQuota.Marshal(b, m, deterministic)
}
func (m *UserQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQuota.Merge(m, src)
}
func (m *UserQuota) XXX_Size() int {
	return xxx_messageInfo_UserQuota.Size(m)
}
func (m *UserQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQuota.DiscardUnknown(m)
}

var xxx_messageInfo_UserQuota proto.InternalMessageInfo

func (m *UserQuota) GetIntervalDuration() *wrappers.Int64Value {
	if m != nil {
		return m.IntervalDuration
	}
	return nil
}

func (m *UserQuota) GetQueries() *wrappers.Int64Value {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *UserQuota) GetErrors() *wrappers.Int64Value {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *UserQuota) GetResultRows() *wrappers.Int64Value {
	if m != nil {
		return m.ResultRows
	}
	return nil
}

func (m *UserQuota) GetReadRows() *wrappers.Int64Value {
	if m != nil {
		return m.ReadRows
	}
	return nil
}

func (m *UserQuota) GetExecutionTime() *wrappers.Int64Value {
	if m != nil {
		return m.ExecutionTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.UserSettings_OverflowMode", UserSettings_OverflowMode_name, UserSettings_OverflowMode_value)
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.UserSettings_GroupByOverflowMode", UserSettings_GroupByOverflowMode_name, UserSettings_GroupByOverflowMode_value)
	proto.RegisterEnum("yandex.cloud.mdb.clickhouse.v1.UserSettings_DistributedProductMode", UserSettings_DistributedProductMode_name, UserSettings_DistributedProductMode_value)
	proto.RegisterType((*User)(nil), "yandex.cloud.mdb.clickhouse.v1.User")
	proto.RegisterType((*Permission)(nil), "yandex.cloud.mdb.clickhouse.v1.Permission")
	proto.RegisterType((*Permission_DataFilter)(nil), "yandex.cloud.mdb.clickhouse.v1.Permission.DataFilter")
	proto.RegisterType((*UserSpec)(nil), "yandex.cloud.mdb.clickhouse.v1.UserSpec")
	proto.RegisterType((*UserSettings)(nil), "yandex.cloud.mdb.clickhouse.v1.UserSettings")
	proto.RegisterType((*UserQuota)(nil), "yandex.cloud.mdb.clickhouse.v1.UserQuota")
}

func init() {
	proto.RegisterFile("yandex/cloud/mdb/clickhouse/v1/user.proto", fileDescriptor_f24bb57d787c6d5e)
}

var fileDescriptor_f24bb57d787c6d5e = []byte{
	// 2724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x9a, 0x5d, 0x57, 0xdc, 0x36,
	0xfe, 0xc7, 0xff, 0x10, 0x42, 0x40, 0x90, 0x64, 0x10, 0x0f, 0x71, 0x20, 0x50, 0x32, 0xe9, 0x03,
	0xf4, 0x5f, 0x06, 0x86, 0xa6, 0x69, 0xbb, 0x6d, 0xb2, 0x61, 0x1e, 0x48, 0xa6, 0x01, 0x86, 0x98,
	0xa1, 0xe9, 0xd3, 0x56, 0xd5, 0xd8, 0x62, 0x70, 0xb1, 0xad, 0x41, 0x92, 0x81, 0xe9, 0x39, 0x7b,
	0xce, 0x5e, 0xec, 0x55, 0xaf, 0x77, 0x5f, 0xc0, 0xbe, 0x8a, 0x7d, 0x01, 0x7b, 0x91, 0x5e, 0xee,
	0xd9, 0x57, 0xb1, 0xd7, 0x7b, 0x99, 0xab, 0x3d, 0x92, 0xec, 0x19, 0xcf, 0x00, 0xf1, 0x38, 0xb9,
	0xdb, 0x3b, 0xc6, 0xd6, 0xf7, 0xf3, 0xfd, 0xe9, 0x27, 0xf9, 0x67, 0x49, 0x06, 0x2c, 0xb7, 0xb0,
	0x6f, 0x93, 0xb3, 0x55, 0xcb, 0xa5, 0x81, 0xbd, 0xea, 0xd9, 0xf5, 0x55, 0xcb, 0x75, 0xac, 0xa3,
	0x43, 0x1a, 0x70, 0xb2, 0x7a, 0x92, 0x5f, 0x0d, 0x38, 0x61, 0xb9, 0x26, 0xa3, 0x82, 0xc2, 0x05,
	0xdd, 0x34, 0xa7, 0x9a, 0xe6, 0x3c, 0xbb, 0x9e, 0xeb, 0x34, 0xcd, 0x9d, 0xe4, 0x67, 0x17, 0x1a,
	0x94, 0x36, 0x5c, 0xb2, 0xaa, 0x5a, 0xd7, 0x83, 0x83, 0xd5, 0x53, 0x86, 0x9b, 0x4d, 0xc2, 0xb8,
	0xd6, 0xcf, 0xce, 0x77, 0x59, 0x9d, 0x60, 0xd7, 0xb1, 0xb1, 0x70, 0xa8, 0xaf, 0x6f, 0x67, 0xff,
	0x32, 0x08, 0x86, 0xf6, 0x39, 0x61, 0x10, 0x82, 0x21, 0x1f, 0x7b, 0xc4, 0x18, 0x58, 0x1c, 0x58,
	0x1a, 0x35, 0xd5, 0xdf, 0x70, 0x1e, 0x00, 0xcb, 0x0d, 0xb8, 0x20, 0x0c, 0x39, 0xb6, 0x31, 0xa8,
	0xee, 0x8c, 0x86, 0x57, 0x2a, 0x36, 0xdc, 0x02, 0x63, 0x4d, 0xc2, 0x3c, 0x87, 0x73, 0x87, 0xfa,
	0xdc, 0xb8, 0xb2, 0x78, 0x65, 0x69, 0x6c, 0xfd, 0xc3, 0xdc, 0xeb, 0x03, 0xce, 0xed, 0xb6, 0x25,
	0x66, 0x5c, 0x0e, 0x9f, 0x82, 0x11, 0x4e, 0x84, 0x70, 0xfc, 0x06, 0x37, 0x86, 0x16, 0x07, 0x96,
	0xc6, 0xd6, 0x3f, 0x4a, 0x42, 0xc9, 0xc0, 0xf7, 0x42, 0x8d, 0xd9, 0x56, 0xc3, 0x0d, 0x30, 0x7c,
	0x1c, 0x50, 0x81, 0xb9, 0x71, 0x55, 0x85, 0xb4, 0xdc, 0x0f, 0xe7, 0xb9, 0x54, 0x98, 0xa1, 0x30,
	0xfb, 0xcf, 0x01, 0x00, 0x3a, 0x81, 0xc2, 0x7b, 0xe0, 0xba, 0x8d, 0x05, 0xae, 0x63, 0x4e, 0x50,
	0x2c, 0x4b, 0xe3, 0xd1, 0xc5, 0x1d, 0x99, 0xad, 0x6f, 0x80, 0xfa, 0x8d, 0x0e, 0x1c, 0x57, 0x10,
	0xc6, 0x8d, 0x41, 0x65, 0xfe, 0x49, 0xff, 0xf9, 0xc8, 0x95, 0xb0, 0xc0, 0x9b, 0x4a, 0x6d, 0x8e,
	0xd9, 0xed, 0xbf, 0xf9, 0x6c, 0x11, 0x80, 0xce, 0x2d, 0x39, 0x2a, 0x02, 0xd7, 0xdd, 0xae, 0x48,
	0x46, 0xd5, 0x15, 0x15, 0xc6, 0x0c, 0x18, 0xd6, 0x11, 0x84, 0x03, 0x16, 0xfe, 0xca, 0xfe, 0x63,
	0x10, 0x8c, 0xa8, 0x84, 0x35, 0x89, 0x05, 0xf3, 0xf1, 0xd1, 0x2e, 0xcc, 0xff, 0xfb, 0x65, 0x7e,
	0xe0, 0x3f, 0x2f, 0xf3, 0xd7, 0xbf, 0xc7, 0x2b, 0xbf, 0x6c, 0xac, 0x7c, 0xb7, 0xb6, 0xf2, 0x39,
	0xfa, 0xc3, 0x87, 0xbf, 0xfe, 0x96, 0x1f, 0xfa, 0xf2, 0xe1, 0x83, 0x8f, 0xc3, 0xc9, 0xb0, 0x0c,
	0x46, 0x9a, 0x98, 0xf3, 0x53, 0xca, 0xc2, 0xa9, 0x50, 0xb8, 0x2e, 0x65, 0xbf, 0xfe, 0x96, 0xbf,
	0xfa, 0xd9, 0x4a, 0x7e, 0xfd, 0x33, 0xb3, 0x7d, 0xfb, 0x7f, 0x79, 0x62, 0xfc, 0xf5, 0x21, 0x18,
	0x8f, 0xd3, 0xe1, 0x63, 0x30, 0xc2, 0x08, 0xb6, 0xa9, 0xef, 0xb6, 0x54, 0x36, 0xc7, 0xd6, 0xe7,
	0x72, 0xfa, 0x91, 0xcc, 0x45, 0x8f, 0x64, 0xae, 0xe2, 0x8b, 0x07, 0xf7, 0xbf, 0xc6, 0x6e, 0x40,
	0x0a, 0xd7, 0x5e, 0xbd, 0xcc, 0x5f, 0x59, 0x5b, 0x59, 0x37, 0xdb, 0x2a, 0xf8, 0x29, 0x18, 0xc5,
	0xae, 0x4b, 0x4f, 0x91, 0x6d, 0xbb, 0x2a, 0xb3, 0x63, 0xeb, 0xb3, 0xe7, 0x10, 0x05, 0x4a, 0x5d,
	0x45, 0x30, 0x47, 0x54, 0xe3, 0x92, 0xed, 0xc2, 0x0a, 0xb8, 0xee, 0xf8, 0x9c, 0x30, 0x81, 0x8e,
	0x03, 0xca, 0x02, 0xcf, 0xb8, 0xd2, 0xa7, 0xff, 0xa3, 0x87, 0x6b, 0xe6, 0xb8, 0x96, 0x3e, 0x57,
	0x4a, 0xb8, 0x05, 0x6e, 0x5a, 0xd4, 0xf7, 0x89, 0x25, 0x90, 0x70, 0x3c, 0x42, 0x03, 0x61, 0x7c,
	0x90, 0x0c, 0x1b, 0x7e, 0xf5, 0x32, 0x3f, 0xf8, 0x68, 0xcd, 0xbc, 0x11, 0x6a, 0x6b, 0x5a, 0x2a,
	0x69, 0x8c, 0x58, 0xc4, 0x39, 0x21, 0x6d, 0xda, 0x52, 0x0a, 0x5a, 0xa8, 0x8d, 0x68, 0x9b, 0x60,
	0x9c, 0x13, 0xdf, 0x6e, 0xa3, 0x96, 0xfb, 0x47, 0x8d, 0x49, 0x61, 0xc4, 0xf9, 0x1e, 0x4c, 0x77,
	0xa5, 0xab, 0x0d, 0x1c, 0x4a, 0x06, 0x82, 0x57, 0x2f, 0xf3, 0xc3, 0x8f, 0x1e, 0xe6, 0xd7, 0xd6,
	0xd6, 0xcc, 0xc9, 0x78, 0xe6, 0x22, 0xf8, 0x8f, 0x60, 0x9e, 0x13, 0x57, 0xe6, 0x8f, 0x93, 0xe3,
	0x80, 0xf8, 0xc2, 0xc1, 0x2e, 0xb2, 0xa8, 0xcf, 0x1d, 0x2e, 0x88, 0x6f, 0xb5, 0x8c, 0xab, 0x89,
	0x03, 0x3b, 0xa7, 0x01, 0x7b, 0x6d, 0x7d, 0xb1, 0x23, 0x87, 0x7f, 0x1a, 0x00, 0xcb, 0x1e, 0x3e,
	0x43, 0x8c, 0x34, 0x5d, 0xc7, 0xc2, 0xc8, 0x26, 0x2e, 0x6e, 0xa1, 0x03, 0xca, 0x90, 0xed, 0x70,
	0xc1, 0x9c, 0x7a, 0x20, 0x88, 0x8d, 0x8e, 0x03, 0xc2, 0x1c, 0xc2, 0x8d, 0xe1, 0x74, 0x3d, 0x7a,
	0xd7, 0xc3, 0x67, 0xa6, 0x06, 0x97, 0x24, 0x77, 0x93, 0xb2, 0x52, 0x87, 0xfa, 0x5c, 0x43, 0xe1,
	0x9f, 0x07, 0xc0, 0xfa, 0x01, 0x76, 0xdd, 0x3a, 0xb6, 0x8e, 0x90, 0xa0, 0x88, 0x0b, 0xec, 0x92,
	0x28, 0x20, 0x7e, 0x69, 0x2c, 0xd7, 0x12, 0x3b, 0xfe, 0x51, 0x44, 0xad, 0xd1, 0x3d, 0xc9, 0x0c,
	0x43, 0xe1, 0x17, 0x87, 0x41, 0xc1, 0xdd, 0xd0, 0x53, 0xbe, 0xc6, 0x10, 0x96, 0xc5, 0x0d, 0x35,
	0x31, 0x13, 0x8e, 0xfc, 0xcd, 0x11, 0x6f, 0xf9, 0x96, 0xf1, 0x61, 0x8a, 0x27, 0x71, 0x21, 0x86,
	0xdb, 0x90, 0xb4, 0xdd, 0x36, 0x6c, 0xaf, 0xe5, 0x5b, 0xf0, 0x8f, 0xc0, 0x88, 0xf7, 0xab, 0xc9,
	0xa8, 0x1d, 0x58, 0x02, 0x79, 0xd4, 0x26, 0xc6, 0xff, 0x2f, 0x0e, 0x2c, 0xdd, 0x58, 0x2f, 0xa6,
	0xa9, 0x47, 0xb9, 0x58, 0x9f, 0x76, 0x35, 0x6b, 0x9b, 0xda, 0xc4, 0x9c, 0xb1, 0x2f, 0xbc, 0x0e,
	0x39, 0x58, 0x8a, 0xdb, 0xe3, 0x46, 0x83, 0x91, 0x86, 0xee, 0xbb, 0x47, 0x3c, 0xca, 0x5a, 0x88,
	0x1c, 0x1c, 0x38, 0x96, 0x43, 0x7c, 0x61, 0x3c, 0x4d, 0xcc, 0xf5, 0x7b, 0x31, 0xd6, 0x46, 0x07,
	0xb5, 0xad, 0x48, 0xe5, 0x08, 0x04, 0x7f, 0x00, 0x77, 0xe2, 0xa6, 0xb6, 0xed, 0x22, 0x81, 0xf9,
	0x51, 0xfb, 0x91, 0xa9, 0x24, 0xe6, 0xd7, 0xbc, 0x1d, 0x03, 0x94, 0x6c, 0xb7, 0x86, 0xf9, 0x51,
	0xf4, 0xb0, 0xdc, 0x07, 0xd7, 0x2c, 0xea, 0x35, 0x1d, 0x97, 0x18, 0x1f, 0x25, 0x46, 0x1c, 0x35,
	0x85, 0xfb, 0x60, 0xca, 0x73, 0x7c, 0x64, 0xd1, 0xc0, 0x17, 0x72, 0xfe, 0x45, 0x88, 0x95, 0x14,
	0x55, 0x6f, 0xc2, 0x73, 0xfc, 0xa2, 0x04, 0xd4, 0x68, 0x31, 0xc4, 0x3e, 0x03, 0x93, 0x21, 0x09,
	0x91, 0xb3, 0x26, 0x23, 0xe1, 0x4b, 0x2b, 0x97, 0x18, 0x18, 0x0c, 0x65, 0xe5, 0x8e, 0x0a, 0xfe,
	0x0c, 0xde, 0xb9, 0x28, 0xc6, 0x18, 0xd9, 0x58, 0x4d, 0x11, 0xee, 0xdc, 0xb9, 0x70, 0x3b, 0x66,
	0xb0, 0x02, 0x6e, 0xc8, 0x8a, 0x50, 0x77, 0xa9, 0x75, 0x84, 0xb8, 0xf3, 0x0b, 0x31, 0x46, 0xfb,
	0xaf, 0x8c, 0xe3, 0x1e, 0x3e, 0x2b, 0x48, 0xe5, 0x9e, 0xf3, 0x0b, 0x81, 0x3f, 0x81, 0x59, 0x19,
	0x76, 0x58, 0x1e, 0x3b, 0x44, 0xc4, 0xe8, 0x29, 0x37, 0xd6, 0x52, 0x44, 0x3c, 0xe3, 0x39, 0x7e,
	0x45, 0x61, 0xda, 0x74, 0x93, 0x9e, 0x72, 0x58, 0x07, 0x73, 0x17, 0x3b, 0xd4, 0x5b, 0x82, 0x70,
	0x23, 0x9f, 0xc2, 0xe2, 0xd6, 0x79, 0x8b, 0x82, 0x84, 0xc0, 0xaf, 0xc1, 0xb4, 0x4c, 0xc8, 0x39,
	0x0f, 0x03, 0xf4, 0x9f, 0x17, 0xe8, 0xe1, 0xb3, 0x1e, 0x38, 0x44, 0x3a, 0x3b, 0x2a, 0x52, 0x39,
	0xa8, 0x01, 0x27, 0xc8, 0x76, 0x98, 0x2c, 0xf6, 0x0e, 0x35, 0xd6, 0x53, 0x84, 0x3e, 0xed, 0x39,
	0xbe, 0x8a, 0xb5, 0x46, 0xf7, 0x39, 0x29, 0x29, 0x46, 0x85, 0xc2, 0x5d, 0x30, 0x23, 0x99, 0x81,
	0x2f, 0xa7, 0x8b, 0x1c, 0x5e, 0x62, 0x23, 0x0b, 0x5b, 0x87, 0xc4, 0xf8, 0x38, 0x71, 0x16, 0x4e,
	0x05, 0x9c, 0xec, 0xc7, 0x84, 0x45, 0xa9, 0x83, 0x0e, 0x58, 0xf4, 0x08, 0x6b, 0x10, 0x24, 0x18,
	0x21, 0x48, 0xbd, 0x38, 0xe8, 0x69, 0x3b, 0x78, 0xcd, 0xbe, 0xdf, 0x7f, 0x56, 0x66, 0x15, 0xac,
	0xc6, 0x08, 0xd9, 0xc6, 0x67, 0x72, 0x3c, 0x55, 0xfc, 0xda, 0xea, 0x08, 0xdc, 0xed, 0xb1, 0xea,
	0x4a, 0x94, 0xf6, 0xfa, 0xa4, 0x7f, 0xaf, 0xb9, 0xb8, 0x57, 0x27, 0x59, 0xda, 0xec, 0x14, 0x7c,
	0x10, 0x37, 0x73, 0x7c, 0xdd, 0x2f, 0xf9, 0xee, 0xb1, 0xa8, 0x6f, 0x05, 0x8c, 0x11, 0x5f, 0x20,
	0xb9, 0xb4, 0x32, 0x1e, 0xf4, 0x6f, 0x79, 0xb7, 0x63, 0xe9, 0xf8, 0xb2, 0x7b, 0x9b, 0x94, 0x15,
	0xdb, 0x38, 0x93, 0x60, 0x1b, 0xb6, 0xc0, 0x52, 0x8f, 0xb1, 0xee, 0xe5, 0x45, 0xce, 0x9f, 0xf6,
	0xef, 0x9c, 0x8d, 0x3b, 0xab, 0xce, 0x9e, 0xb7, 0x3e, 0x00, 0xd9, 0x4e, 0x56, 0xeb, 0xe4, 0x80,
	0x32, 0x59, 0x4f, 0x04, 0x61, 0x3e, 0x76, 0x51, 0x83, 0xd1, 0xa0, 0x89, 0xea, 0x2d, 0xe3, 0xab,
	0xe4, 0x8a, 0x3c, 0xef, 0x85, 0x09, 0x2d, 0x28, 0x48, 0x39, 0x64, 0x3c, 0x91, 0x88, 0x42, 0x0b,
	0x22, 0xb0, 0x70, 0xb9, 0x0f, 0xa7, 0x4c, 0x18, 0xcf, 0x92, 0x3d, 0x66, 0x2f, 0xf6, 0xd8, 0xa3,
	0x4c, 0x2e, 0xc0, 0xee, 0x44, 0xe1, 0x22, 0x71, 0x4a, 0x91, 0x4b, 0x4e, 0x88, 0x8b, 0xc4, 0x21,
	0x23, 0xfc, 0x90, 0xba, 0xb6, 0xb1, 0x95, 0x8c, 0x37, 0x1a, 0x3a, 0xd8, 0xda, 0x29, 0xdd, 0x92,
	0xea, 0x5a, 0x24, 0x96, 0x59, 0x7a, 0x1d, 0x3c, 0xac, 0x33, 0xdb, 0x7d, 0x64, 0xe9, 0x32, 0x0b,
	0x5d, 0x64, 0x1e, 0x83, 0x91, 0x26, 0x73, 0x28, 0x73, 0x44, 0xcb, 0xf8, 0x2c, 0xc5, 0xa3, 0xdf,
	0x56, 0xc1, 0x12, 0x18, 0x93, 0x79, 0x96, 0xa1, 0x61, 0x9b, 0x1b, 0x23, 0xfd, 0xcf, 0x16, 0xe0,
	0xe1, 0xb3, 0x9a, 0x96, 0xc1, 0x1d, 0x90, 0x91, 0x94, 0x70, 0x09, 0x10, 0x70, 0xdc, 0x20, 0xc6,
	0x58, 0x8a, 0x78, 0xe4, 0xbb, 0x43, 0xbf, 0xf5, 0xf7, 0xa5, 0x16, 0xfe, 0x08, 0x6e, 0xf7, 0xf2,
	0xd4, 0xe4, 0x0e, 0x38, 0x61, 0xc6, 0x78, 0xaa, 0x1a, 0xd7, 0x05, 0xde, 0xa4, 0x4c, 0x9d, 0x2f,
	0x54, 0x75, 0x71, 0xf6, 0x89, 0x38, 0xa5, 0xec, 0x08, 0xd5, 0xb1, 0x6f, 0x9f, 0x3a, 0xb6, 0x38,
	0x34, 0x3e, 0x4f, 0x1e, 0x92, 0x49, 0x0f, 0x9f, 0xed, 0x68, 0x61, 0x21, 0xd2, 0x45, 0xd3, 0xf5,
	0x1c, 0xb0, 0x13, 0xf5, 0xef, 0xfa, 0x9b, 0xae, 0xbd, 0xe4, 0x28, 0xe2, 0x0a, 0x98, 0x3c, 0xa0,
	0xcc, 0x22, 0xc8, 0x91, 0x6b, 0x3b, 0x39, 0xaf, 0x6c, 0x2c, 0x88, 0xf1, 0x45, 0x62, 0x49, 0xce,
	0x28, 0x59, 0x45, 0xaa, 0x0a, 0xad, 0x12, 0x16, 0x04, 0x6e, 0x82, 0x09, 0x8d, 0x6a, 0x32, 0xc7,
	0xc3, 0xac, 0x85, 0x8e, 0x48, 0xcb, 0xf8, 0x32, 0x11, 0x74, 0x53, 0x89, 0x76, 0xb5, 0xe6, 0x19,
	0x69, 0xc1, 0x6d, 0x3d, 0xe8, 0x51, 0x2d, 0x57, 0xd5, 0xe6, 0x7a, 0x8a, 0xb1, 0xb9, 0xee, 0x45,
	0xe5, 0x5b, 0x55, 0x96, 0x2a, 0x98, 0xe8, 0xaa, 0xd7, 0x8a, 0x77, 0x23, 0xe5, 0x24, 0x0a, 0x4b,
	0xb4, 0x02, 0x36, 0x00, 0x94, 0x0c, 0x44, 0x4f, 0x08, 0x3b, 0x90, 0x5b, 0x5a, 0xb5, 0x48, 0xbe,
	0xa9, 0x16, 0xc9, 0x9f, 0xa7, 0x5a, 0x24, 0x57, 0x43, 0x82, 0x5a, 0x1a, 0x67, 0x24, 0x34, 0x7e,
	0x05, 0xd6, 0xc0, 0x54, 0x3c, 0x11, 0xed, 0x2a, 0x98, 0x49, 0x11, 0x7c, 0xa6, 0x9d, 0x8c, 0xa8,
	0x02, 0x06, 0x60, 0xa6, 0x5d, 0x43, 0xba, 0xbb, 0x30, 0xa1, 0xba, 0xf0, 0x38, 0x55, 0x17, 0x42,
	0x6a, 0x57, 0x4f, 0x26, 0x1b, 0xe7, 0x2f, 0xf6, 0x8e, 0xaa, 0x2a, 0xb5, 0xf0, 0x8d, 0x46, 0x55,
	0x95, 0xd9, 0xde, 0x51, 0x55, 0xbc, 0xc9, 0x37, 0x1b, 0x55, 0x05, 0x6c, 0x00, 0x28, 0x19, 0x3d,
	0x29, 0x99, 0x7a, 0xeb, 0x51, 0x95, 0xd0, 0xae, 0x44, 0x6c, 0x81, 0x9b, 0x7a, 0x8f, 0xcb, 0x03,
	0x57, 0xe8, 0xb5, 0xe7, 0x74, 0xda, 0x3c, 0x28, 0xad, 0x5a, 0x72, 0x86, 0x15, 0x32, 0xa4, 0xe9,
	0xfa, 0x3f, 0x93, 0x32, 0x0d, 0x1a, 0xa7, 0x2b, 0xff, 0x11, 0x98, 0x0a, 0x59, 0xdd, 0x89, 0xb8,
	0xf5, 0xb6, 0x89, 0x80, 0x1a, 0xdb, 0x95, 0x8a, 0xfd, 0xd8, 0x04, 0x77, 0x7c, 0xb5, 0xb1, 0x76,
	0x7c, 0x4b, 0x18, 0x46, 0xaa, 0xcd, 0x8e, 0x9e, 0x17, 0x15, 0xbf, 0x14, 0xca, 0xe1, 0x0b, 0x5d,
	0x85, 0xf5, 0xdc, 0x88, 0x73, 0x6f, 0xa7, 0xe0, 0xc2, 0x68, 0x7e, 0xc4, 0xc0, 0x14, 0xcc, 0x44,
	0xac, 0x9e, 0xf4, 0xcc, 0xbe, 0x6d, 0x7a, 0xa6, 0x22, 0xf0, 0xa5, 0x09, 0x12, 0x14, 0x09, 0x86,
	0x7d, 0x7e, 0x40, 0x98, 0x31, 0xf7, 0x06, 0x09, 0xaa, 0xd1, 0x5a, 0x28, 0xef, 0x4e, 0x50, 0x9c,
	0x7b, 0xe7, 0x4d, 0x12, 0x14, 0x03, 0x53, 0x30, 0x13, 0xb1, 0x7a, 0x12, 0x34, 0xff, 0xd6, 0x09,
	0x8a, 0xc0, 0x5d, 0x09, 0x32, 0x81, 0x0c, 0x03, 0x91, 0x33, 0x62, 0x05, 0xea, 0xb4, 0x40, 0xee,
	0xdd, 0x8d, 0x85, 0x94, 0x05, 0xb2, 0x1c, 0xc9, 0xe5, 0xde, 0x1d, 0x7a, 0x60, 0x3a, 0x3c, 0x01,
	0xe8, 0xe9, 0xc3, 0x3b, 0x6f, 0xdb, 0x87, 0xc9, 0x90, 0xdb, 0xd5, 0x85, 0x3d, 0x20, 0xdf, 0xfc,
	0xc8, 0xa2, 0x6e, 0xe0, 0xf9, 0x9d, 0x37, 0xd4, 0x62, 0xca, 0x3e, 0x14, 0xb5, 0x3e, 0x7c, 0x47,
	0x7d, 0xa3, 0x47, 0x58, 0x10, 0xaf, 0x49, 0x99, 0x7c, 0x17, 0x87, 0x78, 0xe3, 0x6e, 0x0a, 0xac,
	0x8c, 0xab, 0x16, 0x11, 0x42, 0xbe, 0xda, 0xfc, 0x77, 0x91, 0x7d, 0xea, 0xab, 0x33, 0x40, 0xd1,
	0xf6, 0xc8, 0xa6, 0xda, 0xfc, 0xc7, 0x3c, 0x76, 0xa8, 0x5f, 0x94, 0xa4, 0xc8, 0x2b, 0xdc, 0xfc,
	0x1f, 0x07, 0x84, 0xb5, 0xf4, 0x26, 0xf7, 0x5e, 0xba, 0xcd, 0xff, 0x73, 0xa9, 0x54, 0xdb, 0xdb,
	0x27, 0x40, 0x16, 0x4e, 0x84, 0xb9, 0x40, 0x36, 0x69, 0x8a, 0x43, 0xe3, 0xdd, 0x14, 0x07, 0xac,
	0x1e, 0x3e, 0xdb, 0xe0, 0xa2, 0x24, 0x75, 0xd1, 0x7b, 0x4c, 0x82, 0x88, 0x4b, 0x3c, 0xe2, 0x0b,
	0x6e, 0xbc, 0x97, 0xe2, 0xdc, 0x57, 0xb3, 0xca, 0xa1, 0x34, 0x5a, 0x91, 0x92, 0xb3, 0xa6, 0x9c,
	0x54, 0x76, 0x37, 0xf7, 0xfd, 0xfe, 0xb9, 0x33, 0x6a, 0x1a, 0x6b, 0x48, 0x9c, 0x2f, 0xc0, 0xb2,
	0xe3, 0x37, 0x03, 0x21, 0x17, 0x8c, 0x1e, 0x16, 0xe8, 0x44, 0xaa, 0x64, 0x55, 0x14, 0x84, 0x35,
	0x19, 0x11, 0x5d, 0xc7, 0x41, 0x0f, 0x93, 0x4f, 0xd6, 0x14, 0x6c, 0x53, 0xb1, 0xd4, 0x15, 0x5e,
	0x89, 0x48, 0xf1, 0x13, 0xa2, 0x63, 0xb0, 0xd4, 0xe5, 0x6a, 0x93, 0x03, 0x1c, 0xb8, 0x42, 0xef,
	0x24, 0xa9, 0xe7, 0x08, 0x41, 0x6c, 0x74, 0xe0, 0x10, 0xd7, 0xe6, 0xc6, 0xa3, 0x44, 0xd3, 0x7b,
	0x31, 0xd3, 0x52, 0x48, 0xda, 0xa4, 0xac, 0xaa, 0x39, 0x9b, 0x0a, 0x03, 0x29, 0xf8, 0x80, 0x06,
	0x22, 0xe6, 0xf9, 0x33, 0xa7, 0x3e, 0x3a, 0x0e, 0xa8, 0x20, 0xe8, 0xc1, 0xfd, 0xba, 0x23, 0x54,
	0x9f, 0x1b, 0x84, 0x71, 0xe3, 0xf7, 0x89, 0x8e, 0x59, 0x8d, 0xd2, 0x96, 0x5f, 0x71, 0xea, 0x3f,
	0x97, 0x1c, 0x85, 0xa9, 0x84, 0x14, 0xb9, 0x17, 0xbb, 0xd4, 0xd0, 0x26, 0xbe, 0xbc, 0xe6, 0x72,
	0xe3, 0x71, 0xa2, 0xd7, 0xc2, 0x85, 0x5e, 0xa5, 0x88, 0x00, 0x3d, 0xf0, 0xbe, 0xac, 0x40, 0x16,
	0x66, 0xb6, 0xe3, 0x63, 0xd7, 0x11, 0x2d, 0xa4, 0xbf, 0xa4, 0x38, 0x3e, 0xf2, 0xb1, 0x70, 0x4e,
	0x48, 0x18, 0x80, 0xb1, 0x93, 0xe8, 0x75, 0xd7, 0xa5, 0xa7, 0xc5, 0x0e, 0x68, 0x43, 0x72, 0x2a,
	0xfe, 0x8e, 0xa2, 0xe8, 0x00, 0x20, 0x03, 0xcb, 0xc4, 0x6b, 0x8a, 0x56, 0xb4, 0xa4, 0x90, 0x23,
	0x16, 0x3f, 0x8e, 0xad, 0xb7, 0x90, 0xbe, 0xcf, 0x89, 0x30, 0xaa, 0xc9, 0x63, 0xa7, 0x1a, 0xeb,
	0x15, 0xc6, 0x26, 0x65, 0xb1, 0xd3, 0xd8, 0x42, 0xab, 0x2c, 0x6f, 0xed, 0x11, 0x01, 0xf7, 0xc0,
	0xad, 0x43, 0x21, 0x9a, 0x28, 0xfc, 0xc2, 0x12, 0xd5, 0x71, 0x1a, 0x08, 0x63, 0x23, 0x79, 0x7b,
	0x33, 0x2d, 0xb5, 0xc5, 0xb6, 0x34, 0x3a, 0x7f, 0xdd, 0x06, 0x53, 0x0a, 0xda, 0xfb, 0x91, 0xa6,
	0x90, 0x4c, 0x84, 0x52, 0x68, 0x76, 0x7f, 0xa0, 0x79, 0x02, 0x26, 0x14, 0xae, 0xeb, 0x2b, 0x4d,
	0x31, 0x99, 0x75, 0x53, 0xaa, 0xf6, 0x62, 0x5f, 0x68, 0x4c, 0x70, 0x8b, 0xf8, 0xea, 0xd3, 0x66,
	0xd8, 0x67, 0xaf, 0x7d, 0x6a, 0x5a, 0x4a, 0x4c, 0xe7, 0xb4, 0x96, 0x3e, 0x55, 0x3d, 0x6e, 0x0b,
	0xe1, 0x0f, 0x60, 0x5e, 0xc5, 0xd5, 0x64, 0xb4, 0x21, 0xaf, 0xc9, 0xb9, 0xa1, 0xe8, 0x87, 0x04,
	0xdb, 0x72, 0xca, 0x97, 0x13, 0xc9, 0xb7, 0x25, 0x60, 0x37, 0xd4, 0x57, 0x7c, 0xe9, 0xf0, 0x54,
	0x8b, 0xe1, 0x4f, 0x60, 0x21, 0x0e, 0x8b, 0xbb, 0x08, 0xc2, 0x4e, 0xb0, 0x6b, 0x6c, 0x26, 0xe7,
	0x61, 0xee, 0xb0, 0x43, 0xec, 0xd8, 0x68, 0x3d, 0x7c, 0x06, 0xa6, 0xb0, 0x6d, 0x47, 0x09, 0x61,
	0x3c, 0xb4, 0x32, 0x9e, 0x24, 0x86, 0x3d, 0x81, 0x6d, 0x5b, 0x67, 0x83, 0x71, 0x4d, 0xcf, 0x22,
	0x30, 0xde, 0xf5, 0x82, 0x9d, 0x07, 0xb7, 0xab, 0x5f, 0x97, 0xcd, 0xcd, 0xad, 0xea, 0x0b, 0xb4,
	0x5d, 0x2d, 0x95, 0xd1, 0xfe, 0xce, 0xde, 0x6e, 0xb9, 0x58, 0xd9, 0xac, 0x94, 0x4b, 0x99, 0xff,
	0x83, 0xb7, 0xc0, 0x64, 0xf7, 0xed, 0xda, 0x53, 0xb3, 0xfa, 0x22, 0x33, 0x70, 0xfe, 0x46, 0xc1,
	0x2c, 0x6f, 0x3c, 0xcb, 0x0c, 0x66, 0xff, 0x36, 0x00, 0x26, 0x2f, 0xd8, 0xf7, 0xc0, 0xf7, 0x41,
	0xf6, 0x89, 0x59, 0xdd, 0xdf, 0x45, 0x85, 0x6f, 0xd1, 0xeb, 0x1c, 0x17, 0xc1, 0x9d, 0x4b, 0xda,
	0x45, 0xd6, 0x97, 0xb7, 0x08, 0x63, 0x80, 0x0b, 0x60, 0xf6, 0x92, 0x16, 0x1b, 0x3b, 0xdf, 0x66,
	0xae, 0x64, 0xff, 0x35, 0x00, 0x66, 0x2e, 0xfe, 0x06, 0x03, 0x97, 0xc0, 0xbb, 0xa5, 0xca, 0x5e,
	0xcd, 0xac, 0x14, 0xf6, 0x6b, 0xe5, 0x12, 0xda, 0x35, 0xab, 0xa5, 0xfd, 0x62, 0xed, 0xa2, 0x40,
	0xef, 0x82, 0xf9, 0x4b, 0x5b, 0x96, 0xca, 0x3b, 0xdf, 0x66, 0x06, 0x60, 0x16, 0x2c, 0x5c, 0xda,
	0x64, 0xab, 0x5a, 0xdc, 0xd8, 0xca, 0x0c, 0xc2, 0x7b, 0xe0, 0x9d, 0x4b, 0xdb, 0x3c, 0xd9, 0xaa,
	0x16, 0x36, 0xb6, 0x32, 0x57, 0x5e, 0x0b, 0xda, 0xd8, 0xda, 0xaa, 0xbe, 0xc8, 0x0c, 0x65, 0xff,
	0x7e, 0x05, 0x8c, 0xb6, 0xbf, 0x56, 0xc3, 0x7d, 0x30, 0x11, 0x4d, 0x40, 0x64, 0x07, 0x4c, 0x15,
	0x95, 0x7e, 0xbe, 0x4e, 0x8f, 0xbd, 0x7a, 0x99, 0xbf, 0xf6, 0xe8, 0xe1, 0x83, 0xb5, 0xb5, 0xb5,
	0x35, 0x33, 0x13, 0x21, 0x4a, 0x21, 0x01, 0x3e, 0x02, 0xd7, 0xa2, 0xaf, 0x7a, 0x83, 0x29, 0x16,
	0x32, 0x91, 0x08, 0x7e, 0x09, 0x86, 0x09, 0x63, 0x94, 0xf1, 0x54, 0x5f, 0xaa, 0x43, 0x0d, 0x2c,
	0x83, 0xb1, 0xf8, 0xce, 0x70, 0x28, 0x05, 0x02, 0xb0, 0xce, 0xb6, 0x70, 0x03, 0x8c, 0xaa, 0x33,
	0x0a, 0x05, 0xb9, 0x9a, 0xe6, 0x04, 0x4f, 0xca, 0x14, 0xe2, 0x19, 0xb8, 0xd1, 0xb3, 0xac, 0x1e,
	0x4e, 0xb3, 0x4d, 0x25, 0xf1, 0x35, 0x75, 0x81, 0x83, 0x6c, 0xd7, 0xaa, 0x19, 0x37, 0x9d, 0xf3,
	0x2b, 0xe7, 0xef, 0xb6, 0x1b, 0x8e, 0x38, 0x0c, 0xea, 0x39, 0x8b, 0x7a, 0xab, 0xba, 0xf9, 0x8a,
	0xfe, 0x8f, 0x9e, 0x06, 0x5d, 0x69, 0x10, 0x5f, 0x19, 0xae, 0xbe, 0xfe, 0xbf, 0x8a, 0xbe, 0xe8,
	0xfc, 0xaa, 0x0f, 0x2b, 0xc1, 0xc7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x08, 0xfe, 0xda,
	0x89, 0x24, 0x00, 0x00,
}
