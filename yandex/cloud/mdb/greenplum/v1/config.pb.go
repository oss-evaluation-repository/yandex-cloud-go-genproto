// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/greenplum/v1/config.proto

package greenplum

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectionPoolerConfig_PoolMode int32

const (
	ConnectionPoolerConfig_POOL_MODE_UNSPECIFIED ConnectionPoolerConfig_PoolMode = 0
	ConnectionPoolerConfig_SESSION               ConnectionPoolerConfig_PoolMode = 1
	ConnectionPoolerConfig_TRANSACTION           ConnectionPoolerConfig_PoolMode = 2
)

// Enum value maps for ConnectionPoolerConfig_PoolMode.
var (
	ConnectionPoolerConfig_PoolMode_name = map[int32]string{
		0: "POOL_MODE_UNSPECIFIED",
		1: "SESSION",
		2: "TRANSACTION",
	}
	ConnectionPoolerConfig_PoolMode_value = map[string]int32{
		"POOL_MODE_UNSPECIFIED": 0,
		"SESSION":               1,
		"TRANSACTION":           2,
	}
)

func (x ConnectionPoolerConfig_PoolMode) Enum() *ConnectionPoolerConfig_PoolMode {
	p := new(ConnectionPoolerConfig_PoolMode)
	*p = x
	return p
}

func (x ConnectionPoolerConfig_PoolMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionPoolerConfig_PoolMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[0].Descriptor()
}

func (ConnectionPoolerConfig_PoolMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[0]
}

func (x ConnectionPoolerConfig_PoolMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionPoolerConfig_PoolMode.Descriptor instead.
func (ConnectionPoolerConfig_PoolMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{1, 0}
}

type GreenplumMasterConfig_LogLevel int32

const (
	GreenplumMasterConfig_LOG_LEVEL_UNSPECIFIED GreenplumMasterConfig_LogLevel = 0
	GreenplumMasterConfig_TRACE                 GreenplumMasterConfig_LogLevel = 1
	GreenplumMasterConfig_DEBUG                 GreenplumMasterConfig_LogLevel = 2
	GreenplumMasterConfig_INFORMATION           GreenplumMasterConfig_LogLevel = 3
	GreenplumMasterConfig_WARNING               GreenplumMasterConfig_LogLevel = 4
	GreenplumMasterConfig_ERROR                 GreenplumMasterConfig_LogLevel = 5
)

// Enum value maps for GreenplumMasterConfig_LogLevel.
var (
	GreenplumMasterConfig_LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "TRACE",
		2: "DEBUG",
		3: "INFORMATION",
		4: "WARNING",
		5: "ERROR",
	}
	GreenplumMasterConfig_LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"TRACE":                 1,
		"DEBUG":                 2,
		"INFORMATION":           3,
		"WARNING":               4,
		"ERROR":                 5,
	}
)

func (x GreenplumMasterConfig_LogLevel) Enum() *GreenplumMasterConfig_LogLevel {
	p := new(GreenplumMasterConfig_LogLevel)
	*p = x
	return p
}

func (x GreenplumMasterConfig_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GreenplumMasterConfig_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[1].Descriptor()
}

func (GreenplumMasterConfig_LogLevel) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[1]
}

func (x GreenplumMasterConfig_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GreenplumMasterConfig_LogLevel.Descriptor instead.
func (GreenplumMasterConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{4, 0}
}

type GreenplumMasterConfig_LogStatement int32

const (
	GreenplumMasterConfig_LOG_STATEMENT_UNSPECIFIED GreenplumMasterConfig_LogStatement = 0
	GreenplumMasterConfig_NONE                      GreenplumMasterConfig_LogStatement = 1
	GreenplumMasterConfig_DDL                       GreenplumMasterConfig_LogStatement = 2
	GreenplumMasterConfig_MOD                       GreenplumMasterConfig_LogStatement = 3
	GreenplumMasterConfig_ALL                       GreenplumMasterConfig_LogStatement = 4
)

// Enum value maps for GreenplumMasterConfig_LogStatement.
var (
	GreenplumMasterConfig_LogStatement_name = map[int32]string{
		0: "LOG_STATEMENT_UNSPECIFIED",
		1: "NONE",
		2: "DDL",
		3: "MOD",
		4: "ALL",
	}
	GreenplumMasterConfig_LogStatement_value = map[string]int32{
		"LOG_STATEMENT_UNSPECIFIED": 0,
		"NONE":                      1,
		"DDL":                       2,
		"MOD":                       3,
		"ALL":                       4,
	}
)

func (x GreenplumMasterConfig_LogStatement) Enum() *GreenplumMasterConfig_LogStatement {
	p := new(GreenplumMasterConfig_LogStatement)
	*p = x
	return p
}

func (x GreenplumMasterConfig_LogStatement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GreenplumMasterConfig_LogStatement) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[2].Descriptor()
}

func (GreenplumMasterConfig_LogStatement) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[2]
}

func (x GreenplumMasterConfig_LogStatement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GreenplumMasterConfig_LogStatement.Descriptor instead.
func (GreenplumMasterConfig_LogStatement) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{4, 1}
}

type GreenplumMasterConfig_AutostatsModeInFunctions int32

const (
	GreenplumMasterConfig_AUTOSTATS_MODE_IN_FUNCTIONS_UNSPECIFIED GreenplumMasterConfig_AutostatsModeInFunctions = 0
	GreenplumMasterConfig_MODE_NONE                               GreenplumMasterConfig_AutostatsModeInFunctions = 1
	GreenplumMasterConfig_ON_CHANGE                               GreenplumMasterConfig_AutostatsModeInFunctions = 2
	GreenplumMasterConfig_ON_NO_STATS                             GreenplumMasterConfig_AutostatsModeInFunctions = 3
)

// Enum value maps for GreenplumMasterConfig_AutostatsModeInFunctions.
var (
	GreenplumMasterConfig_AutostatsModeInFunctions_name = map[int32]string{
		0: "AUTOSTATS_MODE_IN_FUNCTIONS_UNSPECIFIED",
		1: "MODE_NONE",
		2: "ON_CHANGE",
		3: "ON_NO_STATS",
	}
	GreenplumMasterConfig_AutostatsModeInFunctions_value = map[string]int32{
		"AUTOSTATS_MODE_IN_FUNCTIONS_UNSPECIFIED": 0,
		"MODE_NONE":   1,
		"ON_CHANGE":   2,
		"ON_NO_STATS": 3,
	}
)

func (x GreenplumMasterConfig_AutostatsModeInFunctions) Enum() *GreenplumMasterConfig_AutostatsModeInFunctions {
	p := new(GreenplumMasterConfig_AutostatsModeInFunctions)
	*p = x
	return p
}

func (x GreenplumMasterConfig_AutostatsModeInFunctions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GreenplumMasterConfig_AutostatsModeInFunctions) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[3].Descriptor()
}

func (GreenplumMasterConfig_AutostatsModeInFunctions) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[3]
}

func (x GreenplumMasterConfig_AutostatsModeInFunctions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GreenplumMasterConfig_AutostatsModeInFunctions.Descriptor instead.
func (GreenplumMasterConfig_AutostatsModeInFunctions) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{4, 2}
}

type GreenplumSegmentConfig_LogLevel int32

const (
	GreenplumSegmentConfig_LOG_LEVEL_UNSPECIFIED GreenplumSegmentConfig_LogLevel = 0
	GreenplumSegmentConfig_TRACE                 GreenplumSegmentConfig_LogLevel = 1
	GreenplumSegmentConfig_DEBUG                 GreenplumSegmentConfig_LogLevel = 2
	GreenplumSegmentConfig_INFORMATION           GreenplumSegmentConfig_LogLevel = 3
	GreenplumSegmentConfig_WARNING               GreenplumSegmentConfig_LogLevel = 4
	GreenplumSegmentConfig_ERROR                 GreenplumSegmentConfig_LogLevel = 5
)

// Enum value maps for GreenplumSegmentConfig_LogLevel.
var (
	GreenplumSegmentConfig_LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "TRACE",
		2: "DEBUG",
		3: "INFORMATION",
		4: "WARNING",
		5: "ERROR",
	}
	GreenplumSegmentConfig_LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"TRACE":                 1,
		"DEBUG":                 2,
		"INFORMATION":           3,
		"WARNING":               4,
		"ERROR":                 5,
	}
)

func (x GreenplumSegmentConfig_LogLevel) Enum() *GreenplumSegmentConfig_LogLevel {
	p := new(GreenplumSegmentConfig_LogLevel)
	*p = x
	return p
}

func (x GreenplumSegmentConfig_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GreenplumSegmentConfig_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[4].Descriptor()
}

func (GreenplumSegmentConfig_LogLevel) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[4]
}

func (x GreenplumSegmentConfig_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GreenplumSegmentConfig_LogLevel.Descriptor instead.
func (GreenplumSegmentConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{5, 0}
}

type GreenplumSegmentConfig_GPResourceManager int32

const (
	GreenplumSegmentConfig_GP_RESOURCE_MANAGER_UNSPECIFIED GreenplumSegmentConfig_GPResourceManager = 0
	GreenplumSegmentConfig_QUEUE                           GreenplumSegmentConfig_GPResourceManager = 1
	GreenplumSegmentConfig_GROUP                           GreenplumSegmentConfig_GPResourceManager = 2
)

// Enum value maps for GreenplumSegmentConfig_GPResourceManager.
var (
	GreenplumSegmentConfig_GPResourceManager_name = map[int32]string{
		0: "GP_RESOURCE_MANAGER_UNSPECIFIED",
		1: "QUEUE",
		2: "GROUP",
	}
	GreenplumSegmentConfig_GPResourceManager_value = map[string]int32{
		"GP_RESOURCE_MANAGER_UNSPECIFIED": 0,
		"QUEUE":                           1,
		"GROUP":                           2,
	}
)

func (x GreenplumSegmentConfig_GPResourceManager) Enum() *GreenplumSegmentConfig_GPResourceManager {
	p := new(GreenplumSegmentConfig_GPResourceManager)
	*p = x
	return p
}

func (x GreenplumSegmentConfig_GPResourceManager) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GreenplumSegmentConfig_GPResourceManager) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[5].Descriptor()
}

func (GreenplumSegmentConfig_GPResourceManager) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[5]
}

func (x GreenplumSegmentConfig_GPResourceManager) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GreenplumSegmentConfig_GPResourceManager.Descriptor instead.
func (GreenplumSegmentConfig_GPResourceManager) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{5, 1}
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the preset for computational resources available to a host (CPU, memory etc.).
	// All available presets are listed in the [documentation](/docs/managed-greenplum/concepts/instance-types).
	ResourcePresetId string `protobuf:"bytes,1,opt,name=resource_preset_id,json=resourcePresetId,proto3" json:"resource_preset_id,omitempty"`
	// Volume of the storage available to a host.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Type of the storage environment for the host.
	//
	// Possible values:
	// * network-hdd - network HDD drive,
	// * network-ssd - network SSD drive,
	// * local-ssd - local SSD storage.
	DiskTypeId string `protobuf:"bytes,3,opt,name=disk_type_id,json=diskTypeId,proto3" json:"disk_type_id,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Resources) GetResourcePresetId() string {
	if x != nil {
		return x.ResourcePresetId
	}
	return ""
}

func (x *Resources) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *Resources) GetDiskTypeId() string {
	if x != nil {
		return x.DiskTypeId
	}
	return ""
}

type ConnectionPoolerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Odyssey route server pool mode. Default is session mode.
	// https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string
	Mode ConnectionPoolerConfig_PoolMode `protobuf:"varint,1,opt,name=mode,proto3,enum=yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig_PoolMode" json:"mode,omitempty"`
	// Odyssey Server pool size.
	// Keep the number of servers in the pool as much as 'pool_size'. Clients are put in a wait queue, when all servers are busy.
	// Set to zero to disable the limit.
	// https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_size-integer
	Size *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	// Server pool idle timeout.
	// Close an server connection when it becomes idle for 'pool_ttl' seconds.
	// Set to zero to disable.
	// https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_ttl-integer
	ClientIdleTimeout *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=client_idle_timeout,json=clientIdleTimeout,proto3" json:"client_idle_timeout,omitempty"`
}

func (x *ConnectionPoolerConfig) Reset() {
	*x = ConnectionPoolerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionPoolerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionPoolerConfig) ProtoMessage() {}

func (x *ConnectionPoolerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionPoolerConfig.ProtoReflect.Descriptor instead.
func (*ConnectionPoolerConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionPoolerConfig) GetMode() ConnectionPoolerConfig_PoolMode {
	if x != nil {
		return x.Mode
	}
	return ConnectionPoolerConfig_POOL_MODE_UNSPECIFIED
}

func (x *ConnectionPoolerConfig) GetSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *ConnectionPoolerConfig) GetClientIdleTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.ClientIdleTimeout
	}
	return nil
}

// Configuration of master subcluster
type MasterSubclusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resources allocated to Greenplum master subcluster hosts.
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	// Configuration settings of a Greenplum master server.
	Config *GreenplumMasterConfigSet `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *MasterSubclusterConfig) Reset() {
	*x = MasterSubclusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterSubclusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterSubclusterConfig) ProtoMessage() {}

func (x *MasterSubclusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterSubclusterConfig.ProtoReflect.Descriptor instead.
func (*MasterSubclusterConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *MasterSubclusterConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MasterSubclusterConfig) GetConfig() *GreenplumMasterConfigSet {
	if x != nil {
		return x.Config
	}
	return nil
}

// Configuration of segmet subcluster
type SegmentSubclusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resources allocated to Greenplum segment subcluster hosts.
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	// Configuration settings of a Greenplum segment server.
	Config *GreenplumSegmentConfigSet `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SegmentSubclusterConfig) Reset() {
	*x = SegmentSubclusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentSubclusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentSubclusterConfig) ProtoMessage() {}

func (x *SegmentSubclusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentSubclusterConfig.ProtoReflect.Descriptor instead.
func (*SegmentSubclusterConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *SegmentSubclusterConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *SegmentSubclusterConfig) GetConfig() *GreenplumSegmentConfigSet {
	if x != nil {
		return x.Config
	}
	return nil
}

// Greenplum master subcluster configuration options. Detailed description for each set of options
//
// Any options not listed here are not supported.
type GreenplumMasterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logging level for the Greenplum master subcluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
	LogLevel GreenplumMasterConfig_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig_LogLevel" json:"log_level,omitempty"`
	// Maximum number of inbound connections.
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
	Timezone *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Odyssey pool settings
	Pool *ConnectionPoolerConfig `protobuf:"bytes,4,opt,name=pool,proto3" json:"pool,omitempty"`
	// Sets the maximum number of transactions that can be in the "prepared" state simultaneously
	// https://www.postgresql.org/docs/9.6/runtime-config-resource.html
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// For queries that are managed by resource queues or resource groups,
	// this parameter determines when Greenplum Database terminates running queries based on the amount of memory the queries are using.
	// A value of 100 disables the automatic termination of queries based on the percentage of memory that is utilized.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#runaway_detector_activation_percent
	RunawayDetectorActivationPercent *wrapperspb.Int64Value `protobuf:"bytes,14,opt,name=runaway_detector_activation_percent,json=runawayDetectorActivationPercent,proto3" json:"runaway_detector_activation_percent,omitempty"`
	// How many keepalives may be lost before the connection is considered dead. A value of 0 uses the system default.
	// If TCP_KEEPCNT is not supported, this parameter must be 0.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#tcp_keepalives_count
	TcpKeepalivesCount *wrapperspb.Int64Value `protobuf:"bytes,15,opt,name=tcp_keepalives_count,json=tcpKeepalivesCount,proto3" json:"tcp_keepalives_count,omitempty"`
	// How many seconds to wait for a response to a keepalive before retransmitting. A value of 0 uses the system default.
	// If TCP_KEEPINTVL is not supported, this parameter must be 0.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#tcp_keepalives_interval
	TcpKeepalivesInterval *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=tcp_keepalives_interval,json=tcpKeepalivesInterval,proto3" json:"tcp_keepalives_interval,omitempty"`
	// When an SQL query reads from an external table, the parameter value specifies the amount of time in seconds that
	// Greenplum Database waits before cancelling the query when data stops being returned from the external table.
	// The default value of 0, specifies no time out. Greenplum Database does not cancel the query.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#readable_external_table_timeout
	ReadableExternalTableTimeout *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=readable_external_table_timeout,json=readableExternalTableTimeout,proto3" json:"readable_external_table_timeout,omitempty"`
	// Sets the amount of data per-peer to be queued by the default UDPIFC interconnect on senders.
	// Increasing the depth from its default value will cause the system to use more memory, but may increase performance.
	// Reasonable values for this parameter are between 1 and 4. Increasing the value might radically increase the amount of memory used by the system.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_interconnect_snd_queue_depth
	GpInterconnectSndQueueDepth *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=gp_interconnect_snd_queue_depth,json=gpInterconnectSndQueueDepth,proto3" json:"gp_interconnect_snd_queue_depth,omitempty"`
	// Sets the amount of data per-peer to be queued by the Greenplum Database interconnect on receivers
	// (when data is received but no space is available to receive it the data will be dropped, and the transmitter will need to resend it)
	// for the default UDPIFC interconnect.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_interconnect_queue_depth
	GpInterconnectQueueDepth *wrapperspb.Int64Value `protobuf:"bytes,21,opt,name=gp_interconnect_queue_depth,json=gpInterconnectQueueDepth,proto3" json:"gp_interconnect_queue_depth,omitempty"`
	// Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
	// MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
	// PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#log_statement
	// Default value is ddl
	LogStatement GreenplumMasterConfig_LogStatement `protobuf:"varint,22,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig_LogStatement" json:"log_statement,omitempty"`
	// Causes the duration of every completed statement which satisfies log_statement to be logged.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#log_duration
	LogDuration *wrapperspb.BoolValue `protobuf:"bytes,23,opt,name=log_duration,json=logDuration,proto3" json:"log_duration,omitempty"`
	// For a partitioned table, controls whether the ROOTPARTITION keyword is required to collect root partition statistics
	// when the ANALYZE command is run on the table. GPORCA uses the root partition statistics when generating a query plan.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#optimizer_analyze_root_partition
	OptimizerAnalyzeRootPartition *wrapperspb.BoolValue `protobuf:"bytes,24,opt,name=optimizer_analyze_root_partition,json=optimizerAnalyzeRootPartition,proto3" json:"optimizer_analyze_root_partition,omitempty"`
	// Sets the number of segments that will scan external table data during an external table operation,
	// the purpose being not to overload the system with scanning data and take away resources from other concurrent operations.
	// This only applies to external tables that use the gpfdist:// protocol to access external table data.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_external_max_segs
	GpExternalMaxSegs *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=gp_external_max_segs,json=gpExternalMaxSegs,proto3" json:"gp_external_max_segs,omitempty"`
	// Specifies the allowed timeout for the fault detection process (ftsprobe) to establish a connection to a segment before declaring it down.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_fts_probe_timeout
	GpFtsProbeTimeout *wrapperspb.Int64Value `protobuf:"bytes,26,opt,name=gp_fts_probe_timeout,json=gpFtsProbeTimeout,proto3" json:"gp_fts_probe_timeout,omitempty"`
	// Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,27,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_autostats_mode_in_functions
	GpAutostatsModeInFunctions GreenplumMasterConfig_AutostatsModeInFunctions `protobuf:"varint,28,opt,name=gp_autostats_mode_in_functions,json=gpAutostatsModeInFunctions,proto3,enum=yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig_AutostatsModeInFunctions" json:"gp_autostats_mode_in_functions,omitempty"`
}

func (x *GreenplumMasterConfig) Reset() {
	*x = GreenplumMasterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumMasterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumMasterConfig) ProtoMessage() {}

func (x *GreenplumMasterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumMasterConfig.ProtoReflect.Descriptor instead.
func (*GreenplumMasterConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *GreenplumMasterConfig) GetLogLevel() GreenplumMasterConfig_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return GreenplumMasterConfig_LOG_LEVEL_UNSPECIFIED
}

func (x *GreenplumMasterConfig) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumMasterConfig) GetTimezone() *wrapperspb.StringValue {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *GreenplumMasterConfig) GetPool() *ConnectionPoolerConfig {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *GreenplumMasterConfig) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumMasterConfig) GetRunawayDetectorActivationPercent() *wrapperspb.Int64Value {
	if x != nil {
		return x.RunawayDetectorActivationPercent
	}
	return nil
}

func (x *GreenplumMasterConfig) GetTcpKeepalivesCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.TcpKeepalivesCount
	}
	return nil
}

func (x *GreenplumMasterConfig) GetTcpKeepalivesInterval() *wrapperspb.Int64Value {
	if x != nil {
		return x.TcpKeepalivesInterval
	}
	return nil
}

func (x *GreenplumMasterConfig) GetReadableExternalTableTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReadableExternalTableTimeout
	}
	return nil
}

func (x *GreenplumMasterConfig) GetGpInterconnectSndQueueDepth() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpInterconnectSndQueueDepth
	}
	return nil
}

func (x *GreenplumMasterConfig) GetGpInterconnectQueueDepth() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpInterconnectQueueDepth
	}
	return nil
}

func (x *GreenplumMasterConfig) GetLogStatement() GreenplumMasterConfig_LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return GreenplumMasterConfig_LOG_STATEMENT_UNSPECIFIED
}

func (x *GreenplumMasterConfig) GetLogDuration() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogDuration
	}
	return nil
}

func (x *GreenplumMasterConfig) GetOptimizerAnalyzeRootPartition() *wrapperspb.BoolValue {
	if x != nil {
		return x.OptimizerAnalyzeRootPartition
	}
	return nil
}

func (x *GreenplumMasterConfig) GetGpExternalMaxSegs() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpExternalMaxSegs
	}
	return nil
}

func (x *GreenplumMasterConfig) GetGpFtsProbeTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpFtsProbeTimeout
	}
	return nil
}

func (x *GreenplumMasterConfig) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

func (x *GreenplumMasterConfig) GetGpAutostatsModeInFunctions() GreenplumMasterConfig_AutostatsModeInFunctions {
	if x != nil {
		return x.GpAutostatsModeInFunctions
	}
	return GreenplumMasterConfig_AUTOSTATS_MODE_IN_FUNCTIONS_UNSPECIFIED
}

// Greenplum segment subcluster configuration options. Detailed description for each set of options
//
// Any options not listed here are not supported.
type GreenplumSegmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logging level for the Greenplum segment subcluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
	LogLevel GreenplumSegmentConfig_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig_LogLevel" json:"log_level,omitempty"`
	// Maximum number of inbound connections.
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
	// https://www.postgresql.org/docs/current/runtime-config-replication.html
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
	// Spill files are created when executing a query that requires more memory than it is allocated.
	// The current query is terminated when the limit is exceeded.
	// Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query
	// Default value is 10000
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// Identifies the resource management scheme currently enabled in the Greenplum Database cluster. The default scheme is to use resource queues.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_resource_manager
	// "group" is the default value
	GpResourceManager GreenplumSegmentConfig_GPResourceManager `protobuf:"varint,11,opt,name=gp_resource_manager,json=gpResourceManager,proto3,enum=yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig_GPResourceManager" json:"gp_resource_manager,omitempty"`
	// Identifies the maximum percentage of system CPU resources to allocate to resource groups on each Greenplum Database segment node.
	// Note: The gp_resource_group_cpu_limit server configuration parameter is enforced only when resource group-based resource management is active.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_resource_group_cpu_limit
	GpResourceGroupCpuLimit *wrapperspb.FloatValue `protobuf:"bytes,17,opt,name=gp_resource_group_cpu_limit,json=gpResourceGroupCpuLimit,proto3" json:"gp_resource_group_cpu_limit,omitempty"`
	// Identifies the maximum percentage of system memory resources to allocate to resource groups on each Greenplum Database segment node.
	// Note: The gp_resource_group_memory_limit server configuration parameter is enforced only when resource group-based resource management is active.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_resource_group_memory_limit
	GpResourceGroupMemoryLimit *wrapperspb.FloatValue `protobuf:"bytes,18,opt,name=gp_resource_group_memory_limit,json=gpResourceGroupMemoryLimit,proto3" json:"gp_resource_group_memory_limit,omitempty"`
}

func (x *GreenplumSegmentConfig) Reset() {
	*x = GreenplumSegmentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumSegmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumSegmentConfig) ProtoMessage() {}

func (x *GreenplumSegmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumSegmentConfig.ProtoReflect.Descriptor instead.
func (*GreenplumSegmentConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *GreenplumSegmentConfig) GetLogLevel() GreenplumSegmentConfig_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return GreenplumSegmentConfig_LOG_LEVEL_UNSPECIFIED
}

func (x *GreenplumSegmentConfig) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumSegmentConfig) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumSegmentConfig) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumSegmentConfig) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumSegmentConfig) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumSegmentConfig) GetGpResourceManager() GreenplumSegmentConfig_GPResourceManager {
	if x != nil {
		return x.GpResourceManager
	}
	return GreenplumSegmentConfig_GP_RESOURCE_MANAGER_UNSPECIFIED
}

func (x *GreenplumSegmentConfig) GetGpResourceGroupCpuLimit() *wrapperspb.FloatValue {
	if x != nil {
		return x.GpResourceGroupCpuLimit
	}
	return nil
}

func (x *GreenplumSegmentConfig) GetGpResourceGroupMemoryLimit() *wrapperspb.FloatValue {
	if x != nil {
		return x.GpResourceGroupMemoryLimit
	}
	return nil
}

type GreenplumMasterConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a Greenplum master subcluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *GreenplumMasterConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum master subcluster.
	UserConfig *GreenplumMasterConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum master subcluster.
	DefaultConfig *GreenplumMasterConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *GreenplumMasterConfigSet) Reset() {
	*x = GreenplumMasterConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumMasterConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumMasterConfigSet) ProtoMessage() {}

func (x *GreenplumMasterConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumMasterConfigSet.ProtoReflect.Descriptor instead.
func (*GreenplumMasterConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *GreenplumMasterConfigSet) GetEffectiveConfig() *GreenplumMasterConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumMasterConfigSet) GetUserConfig() *GreenplumMasterConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumMasterConfigSet) GetDefaultConfig() *GreenplumMasterConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type GreenplumSegmentConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a Greenplum segment subcluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *GreenplumSegmentConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum segment subcluster.
	UserConfig *GreenplumSegmentConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum segment subcluster.
	DefaultConfig *GreenplumSegmentConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *GreenplumSegmentConfigSet) Reset() {
	*x = GreenplumSegmentConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumSegmentConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumSegmentConfigSet) ProtoMessage() {}

func (x *GreenplumSegmentConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumSegmentConfigSet.ProtoReflect.Descriptor instead.
func (*GreenplumSegmentConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *GreenplumSegmentConfigSet) GetEffectiveConfig() *GreenplumSegmentConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumSegmentConfigSet) GetUserConfig() *GreenplumSegmentConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumSegmentConfigSet) GetDefaultConfig() *GreenplumSegmentConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_greenplum_v1_config_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x09, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x52, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x43, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x8c, 0x0f, 0x0a, 0x15, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x57, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x23, 0x72, 0x75,
	0x6e, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x72, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x79, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x74, 0x63, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x15, 0x74, 0x63, 0x70, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x65,
	0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1c, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x61,
	0x0a, 0x1f, 0x67, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x67, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x53, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x5a, 0x0a, 0x1b, 0x67, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x18, 0x67, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x66, 0x0a,
	0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x72, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x67, 0x70, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x67,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x67, 0x70, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x67, 0x70, 0x5f, 0x66, 0x74,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x67, 0x70, 0x46, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x52, 0x0a, 0x17, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x1e, 0x67, 0x70,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x1a, 0x67, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x64, 0x0a,
	0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x22, 0x52, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x44, 0x44, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x22, 0x76, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x54, 0x41, 0x54, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x03, 0x22,
	0x97, 0x08, 0x0a, 0x16, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a,
	0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x53,
	0x6c, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d,
	0x0a, 0x1d, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x19, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a,
	0x1b, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x17, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x21, 0x67, 0x70, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1c, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x77,
	0x0a, 0x13, 0x67, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x52, 0x11, 0x67, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x1b, 0x67, 0x70, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x70, 0x75,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x67, 0x70, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x67, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x67, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x64, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0x4e, 0x0a, 0x11, 0x47, 0x50, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x1f, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x22, 0xb5, 0x02, 0x0a, 0x18, 0x47, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x65, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xb9, 0x02, 0x0a, 0x19, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12,
	0x66, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5c, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x76, 0x0a,
	0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x42, 0x04, 0x47, 0x50, 0x43, 0x46, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData = file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc
)

func file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData
}

var file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_yandex_cloud_mdb_greenplum_v1_config_proto_goTypes = []interface{}{
	(ConnectionPoolerConfig_PoolMode)(0),                // 0: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.PoolMode
	(GreenplumMasterConfig_LogLevel)(0),                 // 1: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.LogLevel
	(GreenplumMasterConfig_LogStatement)(0),             // 2: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.LogStatement
	(GreenplumMasterConfig_AutostatsModeInFunctions)(0), // 3: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.AutostatsModeInFunctions
	(GreenplumSegmentConfig_LogLevel)(0),                // 4: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.LogLevel
	(GreenplumSegmentConfig_GPResourceManager)(0),       // 5: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.GPResourceManager
	(*Resources)(nil),                                   // 6: yandex.cloud.mdb.greenplum.v1.Resources
	(*ConnectionPoolerConfig)(nil),                      // 7: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	(*MasterSubclusterConfig)(nil),                      // 8: yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfig
	(*SegmentSubclusterConfig)(nil),                     // 9: yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfig
	(*GreenplumMasterConfig)(nil),                       // 10: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig
	(*GreenplumSegmentConfig)(nil),                      // 11: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig
	(*GreenplumMasterConfigSet)(nil),                    // 12: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfigSet
	(*GreenplumSegmentConfigSet)(nil),                   // 13: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfigSet
	(*wrapperspb.Int64Value)(nil),                       // 14: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil),                      // 15: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),                        // 16: google.protobuf.BoolValue
	(*wrapperspb.FloatValue)(nil),                       // 17: google.protobuf.FloatValue
}
var file_yandex_cloud_mdb_greenplum_v1_config_proto_depIdxs = []int32{
	0,  // 0: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.mode:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.PoolMode
	14, // 1: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.size:type_name -> google.protobuf.Int64Value
	14, // 2: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.client_idle_timeout:type_name -> google.protobuf.Int64Value
	6,  // 3: yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfig.resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	12, // 4: yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfig.config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfigSet
	6,  // 5: yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfig.resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	13, // 6: yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfig.config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfigSet
	1,  // 7: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.log_level:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.LogLevel
	14, // 8: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.max_connections:type_name -> google.protobuf.Int64Value
	15, // 9: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.timezone:type_name -> google.protobuf.StringValue
	7,  // 10: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.pool:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	14, // 11: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	14, // 12: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.runaway_detector_activation_percent:type_name -> google.protobuf.Int64Value
	14, // 13: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.tcp_keepalives_count:type_name -> google.protobuf.Int64Value
	14, // 14: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.tcp_keepalives_interval:type_name -> google.protobuf.Int64Value
	14, // 15: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.readable_external_table_timeout:type_name -> google.protobuf.Int64Value
	14, // 16: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.gp_interconnect_snd_queue_depth:type_name -> google.protobuf.Int64Value
	14, // 17: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.gp_interconnect_queue_depth:type_name -> google.protobuf.Int64Value
	2,  // 18: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.log_statement:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.LogStatement
	16, // 19: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.log_duration:type_name -> google.protobuf.BoolValue
	16, // 20: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.optimizer_analyze_root_partition:type_name -> google.protobuf.BoolValue
	14, // 21: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.gp_external_max_segs:type_name -> google.protobuf.Int64Value
	14, // 22: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.gp_fts_probe_timeout:type_name -> google.protobuf.Int64Value
	16, // 23: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	3,  // 24: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.gp_autostats_mode_in_functions:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig.AutostatsModeInFunctions
	4,  // 25: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.log_level:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.LogLevel
	14, // 26: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.max_connections:type_name -> google.protobuf.Int64Value
	14, // 27: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	14, // 28: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	14, // 29: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	14, // 30: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	5,  // 31: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.gp_resource_manager:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.GPResourceManager
	17, // 32: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.gp_resource_group_cpu_limit:type_name -> google.protobuf.FloatValue
	17, // 33: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig.gp_resource_group_memory_limit:type_name -> google.protobuf.FloatValue
	10, // 34: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfigSet.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig
	10, // 35: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfigSet.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig
	10, // 36: yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfigSet.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumMasterConfig
	11, // 37: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfigSet.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig
	11, // 38: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfigSet.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig
	11, // 39: yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfigSet.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumSegmentConfig
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_greenplum_v1_config_proto_init() }
func file_yandex_cloud_mdb_greenplum_v1_config_proto_init() {
	if File_yandex_cloud_mdb_greenplum_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionPoolerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterSubclusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentSubclusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumMasterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumSegmentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumMasterConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumSegmentConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_greenplum_v1_config_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_greenplum_v1_config_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_greenplum_v1_config_proto = out.File
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc = nil
	file_yandex_cloud_mdb_greenplum_v1_config_proto_goTypes = nil
	file_yandex_cloud_mdb_greenplum_v1_config_proto_depIdxs = nil
}
