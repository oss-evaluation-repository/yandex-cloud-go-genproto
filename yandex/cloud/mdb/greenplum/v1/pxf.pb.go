// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/greenplum/v1/pxf.proto

package greenplum

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PXFConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection
	ConnectionTimeout *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	UploadTimeout     *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=upload_timeout,json=uploadTimeout,proto3" json:"upload_timeout,omitempty"`
	// Thread pool
	MaxThreads                 *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=max_threads,json=maxThreads,proto3" json:"max_threads,omitempty"`
	PoolAllowCoreThreadTimeout *wrapperspb.BoolValue  `protobuf:"bytes,4,opt,name=pool_allow_core_thread_timeout,json=poolAllowCoreThreadTimeout,proto3" json:"pool_allow_core_thread_timeout,omitempty"`
	PoolCoreSize               *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=pool_core_size,json=poolCoreSize,proto3" json:"pool_core_size,omitempty"`
	PoolQueueCapacity          *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=pool_queue_capacity,json=poolQueueCapacity,proto3" json:"pool_queue_capacity,omitempty"`
	PoolMaxSize                *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=pool_max_size,json=poolMaxSize,proto3" json:"pool_max_size,omitempty"`
	// JVM
	Xmx *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=xmx,proto3" json:"xmx,omitempty"`
	Xms *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=xms,proto3" json:"xms,omitempty"`
}

func (x *PXFConfig) Reset() {
	*x = PXFConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXFConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFConfig) ProtoMessage() {}

func (x *PXFConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFConfig.ProtoReflect.Descriptor instead.
func (*PXFConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{0}
}

func (x *PXFConfig) GetConnectionTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.ConnectionTimeout
	}
	return nil
}

func (x *PXFConfig) GetUploadTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.UploadTimeout
	}
	return nil
}

func (x *PXFConfig) GetMaxThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxThreads
	}
	return nil
}

func (x *PXFConfig) GetPoolAllowCoreThreadTimeout() *wrapperspb.BoolValue {
	if x != nil {
		return x.PoolAllowCoreThreadTimeout
	}
	return nil
}

func (x *PXFConfig) GetPoolCoreSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolCoreSize
	}
	return nil
}

func (x *PXFConfig) GetPoolQueueCapacity() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolQueueCapacity
	}
	return nil
}

func (x *PXFConfig) GetPoolMaxSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolMaxSize
	}
	return nil
}

func (x *PXFConfig) GetXmx() *wrapperspb.Int64Value {
	if x != nil {
		return x.Xmx
	}
	return nil
}

func (x *PXFConfig) GetXms() *wrapperspb.Int64Value {
	if x != nil {
		return x.Xms
	}
	return nil
}

type PXFConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectiveConfig *PXFConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings
	UserConfig *PXFConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration
	DefaultConfig *PXFConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *PXFConfigSet) Reset() {
	*x = PXFConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXFConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFConfigSet) ProtoMessage() {}

func (x *PXFConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFConfigSet.ProtoReflect.Descriptor instead.
func (*PXFConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{1}
}

func (x *PXFConfigSet) GetEffectiveConfig() *PXFConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *PXFConfigSet) GetUserConfig() *PXFConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *PXFConfigSet) GetDefaultConfig() *PXFConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_greenplum_v1_pxf_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDesc = []byte{
	0x0a, 0x27, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x78, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x05, 0x0a, 0x09, 0x50, 0x58, 0x46, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09,
	0xfa, 0xc7, 0x31, 0x05, 0x35, 0x2d, 0x36, 0x30, 0x30, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x0e,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x35, 0x2d, 0x36, 0x30, 0x30, 0x52, 0x0d, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa,
	0xc7, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x1e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x70, 0x6f, 0x6f, 0x6c, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06,
	0x31, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x72, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0xfa, 0xc7, 0x31, 0x03, 0x3e, 0x3d, 0x30, 0x52, 0x11, 0x70, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a,
	0xfa, 0xc7, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x78, 0x6d, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0c, 0xfa, 0xc7, 0x31, 0x08, 0x36, 0x34, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52,
	0x03, 0x78, 0x6d, 0x78, 0x12, 0x3b, 0x0a, 0x03, 0x78, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c,
	0xfa, 0xc7, 0x31, 0x08, 0x36, 0x34, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52, 0x03, 0x78, 0x6d,
	0x73, 0x22, 0x85, 0x02, 0x0a, 0x0c, 0x50, 0x58, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x58, 0x46,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x58, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x58, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x70, 0x0a, 0x21, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x5a, 0x4b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2f, 0x76,
	0x31, 0x3b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescData = file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDesc
)

func file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescData
}

var file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_mdb_greenplum_v1_pxf_proto_goTypes = []interface{}{
	(*PXFConfig)(nil),             // 0: yandex.cloud.mdb.greenplum.v1.PXFConfig
	(*PXFConfigSet)(nil),          // 1: yandex.cloud.mdb.greenplum.v1.PXFConfigSet
	(*wrapperspb.Int64Value)(nil), // 2: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),  // 3: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_greenplum_v1_pxf_proto_depIdxs = []int32{
	2,  // 0: yandex.cloud.mdb.greenplum.v1.PXFConfig.connection_timeout:type_name -> google.protobuf.Int64Value
	2,  // 1: yandex.cloud.mdb.greenplum.v1.PXFConfig.upload_timeout:type_name -> google.protobuf.Int64Value
	2,  // 2: yandex.cloud.mdb.greenplum.v1.PXFConfig.max_threads:type_name -> google.protobuf.Int64Value
	3,  // 3: yandex.cloud.mdb.greenplum.v1.PXFConfig.pool_allow_core_thread_timeout:type_name -> google.protobuf.BoolValue
	2,  // 4: yandex.cloud.mdb.greenplum.v1.PXFConfig.pool_core_size:type_name -> google.protobuf.Int64Value
	2,  // 5: yandex.cloud.mdb.greenplum.v1.PXFConfig.pool_queue_capacity:type_name -> google.protobuf.Int64Value
	2,  // 6: yandex.cloud.mdb.greenplum.v1.PXFConfig.pool_max_size:type_name -> google.protobuf.Int64Value
	2,  // 7: yandex.cloud.mdb.greenplum.v1.PXFConfig.xmx:type_name -> google.protobuf.Int64Value
	2,  // 8: yandex.cloud.mdb.greenplum.v1.PXFConfig.xms:type_name -> google.protobuf.Int64Value
	0,  // 9: yandex.cloud.mdb.greenplum.v1.PXFConfigSet.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.PXFConfig
	0,  // 10: yandex.cloud.mdb.greenplum.v1.PXFConfigSet.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.PXFConfig
	0,  // 11: yandex.cloud.mdb.greenplum.v1.PXFConfigSet.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.PXFConfig
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_greenplum_v1_pxf_proto_init() }
func file_yandex_cloud_mdb_greenplum_v1_pxf_proto_init() {
	if File_yandex_cloud_mdb_greenplum_v1_pxf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXFConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXFConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_greenplum_v1_pxf_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_greenplum_v1_pxf_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_greenplum_v1_pxf_proto = out.File
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDesc = nil
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_goTypes = nil
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_depIdxs = nil
}
