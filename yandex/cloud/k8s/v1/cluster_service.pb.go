// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/k8s/v1/cluster_service.proto

package k8s

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetClusterRequest struct {
	// ID of the Kubernetes cluster to return.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterRequest) Reset()         { *m = GetClusterRequest{} }
func (m *GetClusterRequest) String() string { return proto.CompactTextString(m) }
func (*GetClusterRequest) ProtoMessage()    {}
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{0}
}

func (m *GetClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterRequest.Unmarshal(m, b)
}
func (m *GetClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterRequest.Marshal(b, m, deterministic)
}
func (m *GetClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterRequest.Merge(m, src)
}
func (m *GetClusterRequest) XXX_Size() int {
	return xxx_messageInfo_GetClusterRequest.Size(m)
}
func (m *GetClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterRequest proto.InternalMessageInfo

func (m *GetClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	// ID of the folder to list Kubernetes cluster in.
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListClustersResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClustersResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [Cluster.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. The value. Must be 1-61 characters long and match the regular expression `|[a-z][-a-z0-9]{1,61}[a-z0-9]`.
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClustersRequest) Reset()         { *m = ListClustersRequest{} }
func (m *ListClustersRequest) String() string { return proto.CompactTextString(m) }
func (*ListClustersRequest) ProtoMessage()    {}
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{1}
}

func (m *ListClustersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClustersRequest.Unmarshal(m, b)
}
func (m *ListClustersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClustersRequest.Marshal(b, m, deterministic)
}
func (m *ListClustersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClustersRequest.Merge(m, src)
}
func (m *ListClustersRequest) XXX_Size() int {
	return xxx_messageInfo_ListClustersRequest.Size(m)
}
func (m *ListClustersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClustersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClustersRequest proto.InternalMessageInfo

func (m *ListClustersRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *ListClustersRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClustersRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListClustersRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListClustersResponse struct {
	// List of Kubernetes cluster.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClustersRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListClustersRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClustersResponse) Reset()         { *m = ListClustersResponse{} }
func (m *ListClustersResponse) String() string { return proto.CompactTextString(m) }
func (*ListClustersResponse) ProtoMessage()    {}
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{2}
}

func (m *ListClustersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClustersResponse.Unmarshal(m, b)
}
func (m *ListClustersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClustersResponse.Marshal(b, m, deterministic)
}
func (m *ListClustersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClustersResponse.Merge(m, src)
}
func (m *ListClustersResponse) XXX_Size() int {
	return xxx_messageInfo_ListClustersResponse.Size(m)
}
func (m *ListClustersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClustersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClustersResponse proto.InternalMessageInfo

func (m *ListClustersResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ListClustersResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteClusterRequest struct {
	// ID of the Kubernetes cluster to delete.
	// To get Kubernetes cluster ID use a [ClusterService.List] request.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterRequest) Reset()         { *m = DeleteClusterRequest{} }
func (m *DeleteClusterRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterRequest) ProtoMessage()    {}
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{3}
}

func (m *DeleteClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterRequest.Unmarshal(m, b)
}
func (m *DeleteClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterRequest.Marshal(b, m, deterministic)
}
func (m *DeleteClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterRequest.Merge(m, src)
}
func (m *DeleteClusterRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterRequest.Size(m)
}
func (m *DeleteClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterRequest proto.InternalMessageInfo

func (m *DeleteClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	// ID of the Kubernetes cluster that is being deleted.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterMetadata) Reset()         { *m = DeleteClusterMetadata{} }
func (m *DeleteClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterMetadata) ProtoMessage()    {}
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{4}
}

func (m *DeleteClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterMetadata.Unmarshal(m, b)
}
func (m *DeleteClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterMetadata.Marshal(b, m, deterministic)
}
func (m *DeleteClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterMetadata.Merge(m, src)
}
func (m *DeleteClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterMetadata.Size(m)
}
func (m *DeleteClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterMetadata proto.InternalMessageInfo

func (m *DeleteClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ServiceAccountId     string   `protobuf:"bytes,2,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopClusterRequest) Reset()         { *m = StopClusterRequest{} }
func (m *StopClusterRequest) String() string { return proto.CompactTextString(m) }
func (*StopClusterRequest) ProtoMessage()    {}
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{5}
}

func (m *StopClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopClusterRequest.Unmarshal(m, b)
}
func (m *StopClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopClusterRequest.Marshal(b, m, deterministic)
}
func (m *StopClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopClusterRequest.Merge(m, src)
}
func (m *StopClusterRequest) XXX_Size() int {
	return xxx_messageInfo_StopClusterRequest.Size(m)
}
func (m *StopClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopClusterRequest proto.InternalMessageInfo

func (m *StopClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *StopClusterRequest) GetServiceAccountId() string {
	if m != nil {
		return m.ServiceAccountId
	}
	return ""
}

type StopClusterMetadata struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopClusterMetadata) Reset()         { *m = StopClusterMetadata{} }
func (m *StopClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*StopClusterMetadata) ProtoMessage()    {}
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{6}
}

func (m *StopClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopClusterMetadata.Unmarshal(m, b)
}
func (m *StopClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopClusterMetadata.Marshal(b, m, deterministic)
}
func (m *StopClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopClusterMetadata.Merge(m, src)
}
func (m *StopClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_StopClusterMetadata.Size(m)
}
func (m *StopClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StopClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StopClusterMetadata proto.InternalMessageInfo

func (m *StopClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type StartClusterRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartClusterRequest) Reset()         { *m = StartClusterRequest{} }
func (m *StartClusterRequest) String() string { return proto.CompactTextString(m) }
func (*StartClusterRequest) ProtoMessage()    {}
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{7}
}

func (m *StartClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartClusterRequest.Unmarshal(m, b)
}
func (m *StartClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartClusterRequest.Marshal(b, m, deterministic)
}
func (m *StartClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartClusterRequest.Merge(m, src)
}
func (m *StartClusterRequest) XXX_Size() int {
	return xxx_messageInfo_StartClusterRequest.Size(m)
}
func (m *StartClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartClusterRequest proto.InternalMessageInfo

func (m *StartClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartClusterMetadata) Reset()         { *m = StartClusterMetadata{} }
func (m *StartClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*StartClusterMetadata) ProtoMessage()    {}
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{8}
}

func (m *StartClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartClusterMetadata.Unmarshal(m, b)
}
func (m *StartClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartClusterMetadata.Marshal(b, m, deterministic)
}
func (m *StartClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartClusterMetadata.Merge(m, src)
}
func (m *StartClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_StartClusterMetadata.Size(m)
}
func (m *StartClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StartClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StartClusterMetadata proto.InternalMessageInfo

func (m *StartClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	// ID of the Kubernetes cluster to update.
	// To get the Kubernetes cluster ID use a [ClusterService.List] request.
	ClusterId  string                `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the Kubernetes cluster.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Kubernetes cluster.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	//
	// Existing set of `labels` is completely replaced by the provided set.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to InternetGateway:
	//	*UpdateClusterRequest_GatewayIpv4Address
	InternetGateway isUpdateClusterRequest_InternetGateway `protobuf_oneof:"internet_gateway"`
	MasterSpec      *MasterUpdateSpec                      `protobuf:"bytes,7,opt,name=master_spec,json=masterSpec,proto3" json:"master_spec,omitempty"`
	// Service account to be used for provisioning Compute Cloud and VPC resources for Kubernetes cluster.
	// Selected service account should have `edit` role on the folder where the Kubernetes cluster will be
	// located and on the folder where selected network resides.
	ServiceAccountId string `protobuf:"bytes,9,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Service account to be used by the worker nodes of the Kubernetes cluster to access Container Registry
	// or to push node logs and metrics.
	NodeServiceAccountId string         `protobuf:"bytes,8,opt,name=node_service_account_id,json=nodeServiceAccountId,proto3" json:"node_service_account_id,omitempty"`
	NetworkPolicy        *NetworkPolicy `protobuf:"bytes,10,opt,name=network_policy,json=networkPolicy,proto3" json:"network_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateClusterRequest) Reset()         { *m = UpdateClusterRequest{} }
func (m *UpdateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterRequest) ProtoMessage()    {}
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{9}
}

func (m *UpdateClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClusterRequest.Unmarshal(m, b)
}
func (m *UpdateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClusterRequest.Marshal(b, m, deterministic)
}
func (m *UpdateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterRequest.Merge(m, src)
}
func (m *UpdateClusterRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateClusterRequest.Size(m)
}
func (m *UpdateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterRequest proto.InternalMessageInfo

func (m *UpdateClusterRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *UpdateClusterRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateClusterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateClusterRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type isUpdateClusterRequest_InternetGateway interface {
	isUpdateClusterRequest_InternetGateway()
}

type UpdateClusterRequest_GatewayIpv4Address struct {
	GatewayIpv4Address string `protobuf:"bytes,6,opt,name=gateway_ipv4_address,json=gatewayIpv4Address,proto3,oneof"`
}

func (*UpdateClusterRequest_GatewayIpv4Address) isUpdateClusterRequest_InternetGateway() {}

func (m *UpdateClusterRequest) GetInternetGateway() isUpdateClusterRequest_InternetGateway {
	if m != nil {
		return m.InternetGateway
	}
	return nil
}

func (m *UpdateClusterRequest) GetGatewayIpv4Address() string {
	if x, ok := m.GetInternetGateway().(*UpdateClusterRequest_GatewayIpv4Address); ok {
		return x.GatewayIpv4Address
	}
	return ""
}

func (m *UpdateClusterRequest) GetMasterSpec() *MasterUpdateSpec {
	if m != nil {
		return m.MasterSpec
	}
	return nil
}

func (m *UpdateClusterRequest) GetServiceAccountId() string {
	if m != nil {
		return m.ServiceAccountId
	}
	return ""
}

func (m *UpdateClusterRequest) GetNodeServiceAccountId() string {
	if m != nil {
		return m.NodeServiceAccountId
	}
	return ""
}

func (m *UpdateClusterRequest) GetNetworkPolicy() *NetworkPolicy {
	if m != nil {
		return m.NetworkPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateClusterRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateClusterRequest_GatewayIpv4Address)(nil),
	}
}

type MasterUpdateSpec struct {
	Version              *UpdateVersionSpec       `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	MaintenancePolicy    *MasterMaintenancePolicy `protobuf:"bytes,2,opt,name=maintenance_policy,json=maintenancePolicy,proto3" json:"maintenance_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MasterUpdateSpec) Reset()         { *m = MasterUpdateSpec{} }
func (m *MasterUpdateSpec) String() string { return proto.CompactTextString(m) }
func (*MasterUpdateSpec) ProtoMessage()    {}
func (*MasterUpdateSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{10}
}

func (m *MasterUpdateSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterUpdateSpec.Unmarshal(m, b)
}
func (m *MasterUpdateSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterUpdateSpec.Marshal(b, m, deterministic)
}
func (m *MasterUpdateSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterUpdateSpec.Merge(m, src)
}
func (m *MasterUpdateSpec) XXX_Size() int {
	return xxx_messageInfo_MasterUpdateSpec.Size(m)
}
func (m *MasterUpdateSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterUpdateSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MasterUpdateSpec proto.InternalMessageInfo

func (m *MasterUpdateSpec) GetVersion() *UpdateVersionSpec {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *MasterUpdateSpec) GetMaintenancePolicy() *MasterMaintenancePolicy {
	if m != nil {
		return m.MaintenancePolicy
	}
	return nil
}

type UpdateClusterMetadata struct {
	// ID of the Kubernetes cluster that is being updated.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateClusterMetadata) Reset()         { *m = UpdateClusterMetadata{} }
func (m *UpdateClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterMetadata) ProtoMessage()    {}
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{11}
}

func (m *UpdateClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClusterMetadata.Unmarshal(m, b)
}
func (m *UpdateClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClusterMetadata.Marshal(b, m, deterministic)
}
func (m *UpdateClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterMetadata.Merge(m, src)
}
func (m *UpdateClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_UpdateClusterMetadata.Size(m)
}
func (m *UpdateClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterMetadata proto.InternalMessageInfo

func (m *UpdateClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type CreateClusterRequest struct {
	// ID of the folder to create a Kubernetes cluster in.
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the Kubernetes cluster.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Kubernetes cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the network.
	NetworkId string `protobuf:"bytes,5,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// IP allocation policy of the Kubernetes cluster.
	MasterSpec *MasterSpec `protobuf:"bytes,6,opt,name=master_spec,json=masterSpec,proto3" json:"master_spec,omitempty"`
	// IP allocation policy of the Kubernetes cluster.
	IpAllocationPolicy *IPAllocationPolicy `protobuf:"bytes,7,opt,name=ip_allocation_policy,json=ipAllocationPolicy,proto3" json:"ip_allocation_policy,omitempty"`
	// Types that are valid to be assigned to InternetGateway:
	//	*CreateClusterRequest_GatewayIpv4Address
	InternetGateway isCreateClusterRequest_InternetGateway `protobuf_oneof:"internet_gateway"`
	// Service account to be used for provisioning Compute Cloud and VPC resources for Kubernetes cluster.
	// Selected service account should have `edit` role on the folder where the Kubernetes cluster will be
	// located and on the folder where selected network resides.
	ServiceAccountId string `protobuf:"bytes,9,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Service account to be used by the worker nodes of the Kubernetes cluster to access Container Registry or to push node logs and metrics.
	NodeServiceAccountId string         `protobuf:"bytes,10,opt,name=node_service_account_id,json=nodeServiceAccountId,proto3" json:"node_service_account_id,omitempty"`
	ReleaseChannel       ReleaseChannel `protobuf:"varint,11,opt,name=release_channel,json=releaseChannel,proto3,enum=yandex.cloud.k8s.v1.ReleaseChannel" json:"release_channel,omitempty"`
	NetworkPolicy        *NetworkPolicy `protobuf:"bytes,12,opt,name=network_policy,json=networkPolicy,proto3" json:"network_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreateClusterRequest) Reset()         { *m = CreateClusterRequest{} }
func (m *CreateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClusterRequest) ProtoMessage()    {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{12}
}

func (m *CreateClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterRequest.Unmarshal(m, b)
}
func (m *CreateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterRequest.Marshal(b, m, deterministic)
}
func (m *CreateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterRequest.Merge(m, src)
}
func (m *CreateClusterRequest) XXX_Size() int {
	return xxx_messageInfo_CreateClusterRequest.Size(m)
}
func (m *CreateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterRequest proto.InternalMessageInfo

func (m *CreateClusterRequest) GetFolderId() string {
	if m != nil {
		return m.FolderId
	}
	return ""
}

func (m *CreateClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateClusterRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateClusterRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *CreateClusterRequest) GetMasterSpec() *MasterSpec {
	if m != nil {
		return m.MasterSpec
	}
	return nil
}

func (m *CreateClusterRequest) GetIpAllocationPolicy() *IPAllocationPolicy {
	if m != nil {
		return m.IpAllocationPolicy
	}
	return nil
}

type isCreateClusterRequest_InternetGateway interface {
	isCreateClusterRequest_InternetGateway()
}

type CreateClusterRequest_GatewayIpv4Address struct {
	GatewayIpv4Address string `protobuf:"bytes,8,opt,name=gateway_ipv4_address,json=gatewayIpv4Address,proto3,oneof"`
}

func (*CreateClusterRequest_GatewayIpv4Address) isCreateClusterRequest_InternetGateway() {}

func (m *CreateClusterRequest) GetInternetGateway() isCreateClusterRequest_InternetGateway {
	if m != nil {
		return m.InternetGateway
	}
	return nil
}

func (m *CreateClusterRequest) GetGatewayIpv4Address() string {
	if x, ok := m.GetInternetGateway().(*CreateClusterRequest_GatewayIpv4Address); ok {
		return x.GatewayIpv4Address
	}
	return ""
}

func (m *CreateClusterRequest) GetServiceAccountId() string {
	if m != nil {
		return m.ServiceAccountId
	}
	return ""
}

func (m *CreateClusterRequest) GetNodeServiceAccountId() string {
	if m != nil {
		return m.NodeServiceAccountId
	}
	return ""
}

func (m *CreateClusterRequest) GetReleaseChannel() ReleaseChannel {
	if m != nil {
		return m.ReleaseChannel
	}
	return ReleaseChannel_RELEASE_CHANNEL_UNSPECIFIED
}

func (m *CreateClusterRequest) GetNetworkPolicy() *NetworkPolicy {
	if m != nil {
		return m.NetworkPolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateClusterRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateClusterRequest_GatewayIpv4Address)(nil),
	}
}

type CreateClusterMetadata struct {
	// ID of the Kubernetes cluster that is being created.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterMetadata) Reset()         { *m = CreateClusterMetadata{} }
func (m *CreateClusterMetadata) String() string { return proto.CompactTextString(m) }
func (*CreateClusterMetadata) ProtoMessage()    {}
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{13}
}

func (m *CreateClusterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterMetadata.Unmarshal(m, b)
}
func (m *CreateClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterMetadata.Marshal(b, m, deterministic)
}
func (m *CreateClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterMetadata.Merge(m, src)
}
func (m *CreateClusterMetadata) XXX_Size() int {
	return xxx_messageInfo_CreateClusterMetadata.Size(m)
}
func (m *CreateClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterMetadata proto.InternalMessageInfo

func (m *CreateClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type AutoUpgradeMasterMetadata struct {
	// ID of the Kubernetes cluster that is being auto upgraded.
	ClusterId            string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutoUpgradeMasterMetadata) Reset()         { *m = AutoUpgradeMasterMetadata{} }
func (m *AutoUpgradeMasterMetadata) String() string { return proto.CompactTextString(m) }
func (*AutoUpgradeMasterMetadata) ProtoMessage()    {}
func (*AutoUpgradeMasterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{14}
}

func (m *AutoUpgradeMasterMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutoUpgradeMasterMetadata.Unmarshal(m, b)
}
func (m *AutoUpgradeMasterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutoUpgradeMasterMetadata.Marshal(b, m, deterministic)
}
func (m *AutoUpgradeMasterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoUpgradeMasterMetadata.Merge(m, src)
}
func (m *AutoUpgradeMasterMetadata) XXX_Size() int {
	return xxx_messageInfo_AutoUpgradeMasterMetadata.Size(m)
}
func (m *AutoUpgradeMasterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoUpgradeMasterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AutoUpgradeMasterMetadata proto.InternalMessageInfo

func (m *AutoUpgradeMasterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type ListClusterOperationsRequest struct {
	// ID of the Kubernetes cluster to list operations for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterOperationsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// Currently you can use filtering only on [Cluster.name] field.
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterOperationsRequest) Reset()         { *m = ListClusterOperationsRequest{} }
func (m *ListClusterOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterOperationsRequest) ProtoMessage()    {}
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{15}
}

func (m *ListClusterOperationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterOperationsRequest.Unmarshal(m, b)
}
func (m *ListClusterOperationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterOperationsRequest.Marshal(b, m, deterministic)
}
func (m *ListClusterOperationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterOperationsRequest.Merge(m, src)
}
func (m *ListClusterOperationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterOperationsRequest.Size(m)
}
func (m *ListClusterOperationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterOperationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterOperationsRequest proto.InternalMessageInfo

func (m *ListClusterOperationsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterOperationsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterOperationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListClusterOperationsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListClusterOperationsResponse struct {
	// List of operations for the specified Kubernetes cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterOperationsResponse) Reset()         { *m = ListClusterOperationsResponse{} }
func (m *ListClusterOperationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterOperationsResponse) ProtoMessage()    {}
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{16}
}

func (m *ListClusterOperationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterOperationsResponse.Unmarshal(m, b)
}
func (m *ListClusterOperationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterOperationsResponse.Marshal(b, m, deterministic)
}
func (m *ListClusterOperationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterOperationsResponse.Merge(m, src)
}
func (m *ListClusterOperationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterOperationsResponse.Size(m)
}
func (m *ListClusterOperationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterOperationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterOperationsResponse proto.InternalMessageInfo

func (m *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *ListClusterOperationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type ListClusterNodeGroupsRequest struct {
	// ID of the Kubernetes cluster to list node groups in.
	// To get the Kubernetes cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListClusterNodeGroupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterNodeGroupsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// Currently you can use filtering only on [Cluster.name] field.
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterNodeGroupsRequest) Reset()         { *m = ListClusterNodeGroupsRequest{} }
func (m *ListClusterNodeGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterNodeGroupsRequest) ProtoMessage()    {}
func (*ListClusterNodeGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{17}
}

func (m *ListClusterNodeGroupsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterNodeGroupsRequest.Unmarshal(m, b)
}
func (m *ListClusterNodeGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterNodeGroupsRequest.Marshal(b, m, deterministic)
}
func (m *ListClusterNodeGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterNodeGroupsRequest.Merge(m, src)
}
func (m *ListClusterNodeGroupsRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterNodeGroupsRequest.Size(m)
}
func (m *ListClusterNodeGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterNodeGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterNodeGroupsRequest proto.InternalMessageInfo

func (m *ListClusterNodeGroupsRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ListClusterNodeGroupsRequest) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListClusterNodeGroupsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListClusterNodeGroupsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListClusterNodeGroupsResponse struct {
	// List of node groups for the specified Kubernetes cluster.
	NodeGroups []*NodeGroup `protobuf:"bytes,1,rep,name=node_groups,json=nodeGroups,proto3" json:"node_groups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterNodeGroupsRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListClusterNodeGroupsRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterNodeGroupsResponse) Reset()         { *m = ListClusterNodeGroupsResponse{} }
func (m *ListClusterNodeGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterNodeGroupsResponse) ProtoMessage()    {}
func (*ListClusterNodeGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{18}
}

func (m *ListClusterNodeGroupsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterNodeGroupsResponse.Unmarshal(m, b)
}
func (m *ListClusterNodeGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterNodeGroupsResponse.Marshal(b, m, deterministic)
}
func (m *ListClusterNodeGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterNodeGroupsResponse.Merge(m, src)
}
func (m *ListClusterNodeGroupsResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterNodeGroupsResponse.Size(m)
}
func (m *ListClusterNodeGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterNodeGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterNodeGroupsResponse proto.InternalMessageInfo

func (m *ListClusterNodeGroupsResponse) GetNodeGroups() []*NodeGroup {
	if m != nil {
		return m.NodeGroups
	}
	return nil
}

func (m *ListClusterNodeGroupsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type MasterSpec struct {
	// Types that are valid to be assigned to MasterType:
	//	*MasterSpec_ZonalMasterSpec
	//	*MasterSpec_RegionalMasterSpec
	MasterType           isMasterSpec_MasterType  `protobuf_oneof:"master_type"`
	Version              string                   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	MaintenancePolicy    *MasterMaintenancePolicy `protobuf:"bytes,4,opt,name=maintenance_policy,json=maintenancePolicy,proto3" json:"maintenance_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MasterSpec) Reset()         { *m = MasterSpec{} }
func (m *MasterSpec) String() string { return proto.CompactTextString(m) }
func (*MasterSpec) ProtoMessage()    {}
func (*MasterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{19}
}

func (m *MasterSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterSpec.Unmarshal(m, b)
}
func (m *MasterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterSpec.Marshal(b, m, deterministic)
}
func (m *MasterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterSpec.Merge(m, src)
}
func (m *MasterSpec) XXX_Size() int {
	return xxx_messageInfo_MasterSpec.Size(m)
}
func (m *MasterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MasterSpec proto.InternalMessageInfo

type isMasterSpec_MasterType interface {
	isMasterSpec_MasterType()
}

type MasterSpec_ZonalMasterSpec struct {
	ZonalMasterSpec *ZonalMasterSpec `protobuf:"bytes,1,opt,name=zonal_master_spec,json=zonalMasterSpec,proto3,oneof"`
}

type MasterSpec_RegionalMasterSpec struct {
	RegionalMasterSpec *RegionalMasterSpec `protobuf:"bytes,2,opt,name=regional_master_spec,json=regionalMasterSpec,proto3,oneof"`
}

func (*MasterSpec_ZonalMasterSpec) isMasterSpec_MasterType() {}

func (*MasterSpec_RegionalMasterSpec) isMasterSpec_MasterType() {}

func (m *MasterSpec) GetMasterType() isMasterSpec_MasterType {
	if m != nil {
		return m.MasterType
	}
	return nil
}

func (m *MasterSpec) GetZonalMasterSpec() *ZonalMasterSpec {
	if x, ok := m.GetMasterType().(*MasterSpec_ZonalMasterSpec); ok {
		return x.ZonalMasterSpec
	}
	return nil
}

func (m *MasterSpec) GetRegionalMasterSpec() *RegionalMasterSpec {
	if x, ok := m.GetMasterType().(*MasterSpec_RegionalMasterSpec); ok {
		return x.RegionalMasterSpec
	}
	return nil
}

func (m *MasterSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MasterSpec) GetMaintenancePolicy() *MasterMaintenancePolicy {
	if m != nil {
		return m.MaintenancePolicy
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MasterSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MasterSpec_ZonalMasterSpec)(nil),
		(*MasterSpec_RegionalMasterSpec)(nil),
	}
}

type ZonalMasterSpec struct {
	// ID of the availability zone.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// Specification of parameters for internal IPv4 networking.
	InternalV4AddressSpec *InternalAddressSpec `protobuf:"bytes,2,opt,name=internal_v4_address_spec,json=internalV4AddressSpec,proto3" json:"internal_v4_address_spec,omitempty"`
	// Specification of parameters for external IPv4 networking.
	ExternalV4AddressSpec *ExternalAddressSpec `protobuf:"bytes,3,opt,name=external_v4_address_spec,json=externalV4AddressSpec,proto3" json:"external_v4_address_spec,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *ZonalMasterSpec) Reset()         { *m = ZonalMasterSpec{} }
func (m *ZonalMasterSpec) String() string { return proto.CompactTextString(m) }
func (*ZonalMasterSpec) ProtoMessage()    {}
func (*ZonalMasterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{20}
}

func (m *ZonalMasterSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZonalMasterSpec.Unmarshal(m, b)
}
func (m *ZonalMasterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZonalMasterSpec.Marshal(b, m, deterministic)
}
func (m *ZonalMasterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZonalMasterSpec.Merge(m, src)
}
func (m *ZonalMasterSpec) XXX_Size() int {
	return xxx_messageInfo_ZonalMasterSpec.Size(m)
}
func (m *ZonalMasterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ZonalMasterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ZonalMasterSpec proto.InternalMessageInfo

func (m *ZonalMasterSpec) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *ZonalMasterSpec) GetInternalV4AddressSpec() *InternalAddressSpec {
	if m != nil {
		return m.InternalV4AddressSpec
	}
	return nil
}

func (m *ZonalMasterSpec) GetExternalV4AddressSpec() *ExternalAddressSpec {
	if m != nil {
		return m.ExternalV4AddressSpec
	}
	return nil
}

type RegionalMasterSpec struct {
	RegionId  string            `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Locations []*MasterLocation `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	// Specify to allocate a static public IP for the master.
	ExternalV4AddressSpec *ExternalAddressSpec `protobuf:"bytes,3,opt,name=external_v4_address_spec,json=externalV4AddressSpec,proto3" json:"external_v4_address_spec,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *RegionalMasterSpec) Reset()         { *m = RegionalMasterSpec{} }
func (m *RegionalMasterSpec) String() string { return proto.CompactTextString(m) }
func (*RegionalMasterSpec) ProtoMessage()    {}
func (*RegionalMasterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{21}
}

func (m *RegionalMasterSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegionalMasterSpec.Unmarshal(m, b)
}
func (m *RegionalMasterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegionalMasterSpec.Marshal(b, m, deterministic)
}
func (m *RegionalMasterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionalMasterSpec.Merge(m, src)
}
func (m *RegionalMasterSpec) XXX_Size() int {
	return xxx_messageInfo_RegionalMasterSpec.Size(m)
}
func (m *RegionalMasterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionalMasterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RegionalMasterSpec proto.InternalMessageInfo

func (m *RegionalMasterSpec) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *RegionalMasterSpec) GetLocations() []*MasterLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *RegionalMasterSpec) GetExternalV4AddressSpec() *ExternalAddressSpec {
	if m != nil {
		return m.ExternalV4AddressSpec
	}
	return nil
}

type InternalAddressSpec struct {
	// ID of the subnet. If no ID is specified, and there only one subnet in specified zone, an address in this subnet will be allocated.
	SubnetId             string   `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalAddressSpec) Reset()         { *m = InternalAddressSpec{} }
func (m *InternalAddressSpec) String() string { return proto.CompactTextString(m) }
func (*InternalAddressSpec) ProtoMessage()    {}
func (*InternalAddressSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{22}
}

func (m *InternalAddressSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalAddressSpec.Unmarshal(m, b)
}
func (m *InternalAddressSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalAddressSpec.Marshal(b, m, deterministic)
}
func (m *InternalAddressSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalAddressSpec.Merge(m, src)
}
func (m *InternalAddressSpec) XXX_Size() int {
	return xxx_messageInfo_InternalAddressSpec.Size(m)
}
func (m *InternalAddressSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalAddressSpec.DiscardUnknown(m)
}

var xxx_messageInfo_InternalAddressSpec proto.InternalMessageInfo

func (m *InternalAddressSpec) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

type ExternalAddressSpec struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalAddressSpec) Reset()         { *m = ExternalAddressSpec{} }
func (m *ExternalAddressSpec) String() string { return proto.CompactTextString(m) }
func (*ExternalAddressSpec) ProtoMessage()    {}
func (*ExternalAddressSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{23}
}

func (m *ExternalAddressSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExternalAddressSpec.Unmarshal(m, b)
}
func (m *ExternalAddressSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExternalAddressSpec.Marshal(b, m, deterministic)
}
func (m *ExternalAddressSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalAddressSpec.Merge(m, src)
}
func (m *ExternalAddressSpec) XXX_Size() int {
	return xxx_messageInfo_ExternalAddressSpec.Size(m)
}
func (m *ExternalAddressSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalAddressSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalAddressSpec proto.InternalMessageInfo

type MasterLocation struct {
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// If not specified and there is a single subnet in specified zone, address
	// in this subnet will be allocated.
	InternalV4AddressSpec *InternalAddressSpec `protobuf:"bytes,2,opt,name=internal_v4_address_spec,json=internalV4AddressSpec,proto3" json:"internal_v4_address_spec,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *MasterLocation) Reset()         { *m = MasterLocation{} }
func (m *MasterLocation) String() string { return proto.CompactTextString(m) }
func (*MasterLocation) ProtoMessage()    {}
func (*MasterLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_19e070dea8611550, []int{24}
}

func (m *MasterLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterLocation.Unmarshal(m, b)
}
func (m *MasterLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterLocation.Marshal(b, m, deterministic)
}
func (m *MasterLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterLocation.Merge(m, src)
}
func (m *MasterLocation) XXX_Size() int {
	return xxx_messageInfo_MasterLocation.Size(m)
}
func (m *MasterLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterLocation.DiscardUnknown(m)
}

var xxx_messageInfo_MasterLocation proto.InternalMessageInfo

func (m *MasterLocation) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *MasterLocation) GetInternalV4AddressSpec() *InternalAddressSpec {
	if m != nil {
		return m.InternalV4AddressSpec
	}
	return nil
}

func init() {
	proto.RegisterType((*GetClusterRequest)(nil), "yandex.cloud.k8s.v1.GetClusterRequest")
	proto.RegisterType((*ListClustersRequest)(nil), "yandex.cloud.k8s.v1.ListClustersRequest")
	proto.RegisterType((*ListClustersResponse)(nil), "yandex.cloud.k8s.v1.ListClustersResponse")
	proto.RegisterType((*DeleteClusterRequest)(nil), "yandex.cloud.k8s.v1.DeleteClusterRequest")
	proto.RegisterType((*DeleteClusterMetadata)(nil), "yandex.cloud.k8s.v1.DeleteClusterMetadata")
	proto.RegisterType((*StopClusterRequest)(nil), "yandex.cloud.k8s.v1.StopClusterRequest")
	proto.RegisterType((*StopClusterMetadata)(nil), "yandex.cloud.k8s.v1.StopClusterMetadata")
	proto.RegisterType((*StartClusterRequest)(nil), "yandex.cloud.k8s.v1.StartClusterRequest")
	proto.RegisterType((*StartClusterMetadata)(nil), "yandex.cloud.k8s.v1.StartClusterMetadata")
	proto.RegisterType((*UpdateClusterRequest)(nil), "yandex.cloud.k8s.v1.UpdateClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.k8s.v1.UpdateClusterRequest.LabelsEntry")
	proto.RegisterType((*MasterUpdateSpec)(nil), "yandex.cloud.k8s.v1.MasterUpdateSpec")
	proto.RegisterType((*UpdateClusterMetadata)(nil), "yandex.cloud.k8s.v1.UpdateClusterMetadata")
	proto.RegisterType((*CreateClusterRequest)(nil), "yandex.cloud.k8s.v1.CreateClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.k8s.v1.CreateClusterRequest.LabelsEntry")
	proto.RegisterType((*CreateClusterMetadata)(nil), "yandex.cloud.k8s.v1.CreateClusterMetadata")
	proto.RegisterType((*AutoUpgradeMasterMetadata)(nil), "yandex.cloud.k8s.v1.AutoUpgradeMasterMetadata")
	proto.RegisterType((*ListClusterOperationsRequest)(nil), "yandex.cloud.k8s.v1.ListClusterOperationsRequest")
	proto.RegisterType((*ListClusterOperationsResponse)(nil), "yandex.cloud.k8s.v1.ListClusterOperationsResponse")
	proto.RegisterType((*ListClusterNodeGroupsRequest)(nil), "yandex.cloud.k8s.v1.ListClusterNodeGroupsRequest")
	proto.RegisterType((*ListClusterNodeGroupsResponse)(nil), "yandex.cloud.k8s.v1.ListClusterNodeGroupsResponse")
	proto.RegisterType((*MasterSpec)(nil), "yandex.cloud.k8s.v1.MasterSpec")
	proto.RegisterType((*ZonalMasterSpec)(nil), "yandex.cloud.k8s.v1.ZonalMasterSpec")
	proto.RegisterType((*RegionalMasterSpec)(nil), "yandex.cloud.k8s.v1.RegionalMasterSpec")
	proto.RegisterType((*InternalAddressSpec)(nil), "yandex.cloud.k8s.v1.InternalAddressSpec")
	proto.RegisterType((*ExternalAddressSpec)(nil), "yandex.cloud.k8s.v1.ExternalAddressSpec")
	proto.RegisterType((*MasterLocation)(nil), "yandex.cloud.k8s.v1.MasterLocation")
}

func init() {
	proto.RegisterFile("yandex/cloud/k8s/v1/cluster_service.proto", fileDescriptor_19e070dea8611550)
}

var fileDescriptor_19e070dea8611550 = []byte{
	// 1732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x53, 0xdb, 0xcc,
	0x19, 0x8f, 0xc0, 0x18, 0xfc, 0xb8, 0x05, 0xb2, 0x98, 0x89, 0xeb, 0x86, 0x04, 0x44, 0x9a, 0x10,
	0x8a, 0x3f, 0xe4, 0x00, 0x85, 0x90, 0x4c, 0x0a, 0x69, 0x3e, 0x3c, 0x03, 0x69, 0x46, 0x34, 0x99,
	0x69, 0x98, 0x8c, 0x67, 0xb1, 0x16, 0x47, 0x63, 0x59, 0x52, 0x25, 0xd9, 0xc1, 0xa4, 0x39, 0x34,
	0xed, 0xa1, 0xc3, 0xa1, 0x87, 0xf6, 0x5f, 0xe8, 0xf4, 0xda, 0x29, 0xbd, 0x74, 0x7a, 0xe8, 0xb4,
	0x27, 0xe8, 0x95, 0x9e, 0x7b, 0xeb, 0xa1, 0xe7, 0x1c, 0x7a, 0xe8, 0xe9, 0x1d, 0xed, 0xae, 0x6c,
	0xc9, 0x96, 0x8d, 0xe1, 0xfd, 0xc8, 0xfb, 0x9e, 0x6c, 0xed, 0xfe, 0x9e, 0x8f, 0x7d, 0xf6, 0xf9,
	0xda, 0x07, 0x6e, 0x37, 0xb0, 0xae, 0x90, 0xfd, 0x6c, 0x49, 0x33, 0x6a, 0x4a, 0xb6, 0xb2, 0x62,
	0x67, 0xeb, 0x52, 0xb6, 0xa4, 0xd5, 0x6c, 0x87, 0x58, 0x45, 0x9b, 0x58, 0x75, 0xb5, 0x44, 0x32,
	0xa6, 0x65, 0x38, 0x06, 0x9a, 0x60, 0xd0, 0x0c, 0x85, 0x66, 0x2a, 0x2b, 0x76, 0xa6, 0x2e, 0xa5,
	0xae, 0x96, 0x0d, 0xa3, 0xac, 0x91, 0x2c, 0x36, 0xd5, 0x2c, 0xd6, 0x75, 0xc3, 0xc1, 0x8e, 0x6a,
	0xe8, 0x36, 0x23, 0x49, 0x4d, 0xf3, 0x5d, 0xfa, 0xb5, 0x5b, 0xdb, 0xcb, 0xee, 0xa9, 0x44, 0x53,
	0x8a, 0x55, 0x6c, 0x57, 0x3c, 0x44, 0x40, 0xbe, 0xcb, 0xc5, 0x30, 0x89, 0x45, 0x99, 0x70, 0xc4,
	0xcd, 0x00, 0xa2, 0xb9, 0xdb, 0x81, 0x9b, 0x0a, 0xe0, 0xea, 0x58, 0x53, 0x15, 0xff, 0xf6, 0x4c,
	0x8f, 0x83, 0x72, 0xc8, 0x8d, 0x30, 0x88, 0x6e, 0x28, 0xa4, 0x58, 0xb6, 0x8c, 0x9a, 0xd9, 0x8b,
	0x51, 0x9d, 0x58, 0x76, 0x53, 0x96, 0xb8, 0x02, 0x97, 0x9f, 0x10, 0xe7, 0x21, 0x63, 0x2e, 0x93,
	0x9f, 0xd5, 0x88, 0xed, 0xa0, 0x59, 0x00, 0xcf, 0xae, 0xaa, 0x92, 0x14, 0xa6, 0x85, 0xb9, 0xd8,
	0x46, 0xe4, 0xbf, 0xc7, 0x92, 0x20, 0xc7, 0xf8, 0x7a, 0x41, 0x11, 0xff, 0x28, 0xc0, 0xc4, 0xa6,
	0x6a, 0x7b, 0xb4, 0xb6, 0x47, 0x3c, 0x03, 0xb1, 0x3d, 0x43, 0x53, 0x3a, 0x69, 0x47, 0xd8, 0x72,
	0x41, 0x41, 0xb7, 0x20, 0x66, 0xe2, 0x32, 0x29, 0xda, 0xea, 0x01, 0x49, 0x0e, 0x4c, 0x0b, 0x73,
	0x83, 0x1b, 0xf0, 0xff, 0x63, 0x29, 0x9a, 0x4b, 0x4b, 0xb9, 0x5c, 0x4e, 0x1e, 0x71, 0x37, 0xb7,
	0xd5, 0x03, 0x82, 0xe6, 0x00, 0x28, 0xd0, 0x31, 0x2a, 0x44, 0x4f, 0x0e, 0x52, 0x66, 0xb1, 0xc3,
	0x13, 0x69, 0xe8, 0xde, 0x7d, 0x29, 0x97, 0x93, 0x29, 0x97, 0x9f, 0xb8, 0x7b, 0x48, 0x84, 0xe8,
	0x9e, 0xaa, 0x39, 0xc4, 0x4a, 0x46, 0x28, 0x0a, 0x0e, 0x4f, 0xa4, 0x28, 0x45, 0xe5, 0x64, 0xbe,
	0x23, 0xee, 0x43, 0x22, 0xa8, 0xb0, 0x6d, 0x1a, 0xba, 0x4d, 0xd0, 0x0a, 0x8c, 0xf0, 0x63, 0xd9,
	0x49, 0x61, 0x7a, 0x70, 0x2e, 0x9e, 0xbf, 0x9a, 0x09, 0x71, 0xa0, 0x8c, 0x67, 0xa5, 0x26, 0x1a,
	0xdd, 0x84, 0x31, 0x9d, 0xec, 0x3b, 0x45, 0x9f, 0x92, 0xee, 0x71, 0x62, 0xf2, 0xb7, 0xdd, 0xe5,
	0xe7, 0x9e, 0x76, 0xe2, 0x1a, 0x24, 0x7e, 0x44, 0x34, 0xe2, 0x90, 0x8b, 0x18, 0x7a, 0x19, 0x26,
	0x03, 0xc4, 0x5b, 0xc4, 0xc1, 0x0a, 0x76, 0x30, 0x9a, 0xea, 0xa4, 0xf6, 0xd3, 0x95, 0x01, 0x6d,
	0x3b, 0x86, 0x79, 0x01, 0x91, 0x68, 0x01, 0x10, 0x0f, 0xa8, 0x22, 0x2e, 0x95, 0x8c, 0x9a, 0xee,
	0xb8, 0x60, 0x76, 0xb4, 0x71, 0xbe, 0xb3, 0xce, 0x36, 0x0a, 0x8a, 0xb8, 0x08, 0x13, 0x3e, 0x41,
	0xfd, 0xaa, 0x77, 0xd7, 0xa5, 0xc2, 0xd6, 0x85, 0x7c, 0x6f, 0x09, 0x12, 0x7e, 0xda, 0x7e, 0x45,
	0x7e, 0x1c, 0x82, 0xc4, 0x0b, 0x53, 0xc1, 0x17, 0xba, 0x07, 0xb4, 0x06, 0xf1, 0x1a, 0x25, 0xa6,
	0x49, 0x81, 0x5a, 0x23, 0x9e, 0x4f, 0x65, 0x58, 0xde, 0xc8, 0x78, 0x79, 0x23, 0xf3, 0xd8, 0xcd,
	0x1b, 0x5b, 0xd8, 0xae, 0xc8, 0xc0, 0xe0, 0xee, 0x7f, 0xb4, 0x04, 0x11, 0x1d, 0x57, 0x09, 0xf7,
	0xe1, 0x99, 0x8f, 0xc7, 0xd2, 0xd4, 0xcf, 0x77, 0x70, 0xfa, 0xe0, 0xf5, 0x4e, 0x1a, 0xa7, 0x0f,
	0x72, 0xe9, 0xd5, 0xd7, 0xef, 0xa4, 0x85, 0x65, 0xe9, 0xfd, 0x0e, 0xff, 0x92, 0x29, 0x1c, 0x7d,
	0x1f, 0xe2, 0x0a, 0xb1, 0x4b, 0x96, 0x6a, 0xba, 0xf9, 0x81, 0xfb, 0x36, 0x8f, 0x80, 0xfc, 0xd2,
	0xb2, 0xec, 0xdf, 0x45, 0xbf, 0x11, 0x20, 0xaa, 0xe1, 0x5d, 0xa2, 0xd9, 0xc9, 0x21, 0xea, 0xc6,
	0x4b, 0xa1, 0x6e, 0x1c, 0x66, 0x81, 0xcc, 0x26, 0xa5, 0x7b, 0xa4, 0x3b, 0x56, 0x63, 0xe3, 0xc1,
	0xc7, 0x63, 0x29, 0xbe, 0x93, 0x2e, 0xe6, 0xd2, 0xab, 0xae, 0x86, 0xf3, 0x1f, 0x4e, 0xa4, 0xc8,
	0xbd, 0xfb, 0xcb, 0x8b, 0x87, 0xec, 0xf7, 0xce, 0xd1, 0x89, 0x14, 0x4d, 0x45, 0xa4, 0x34, 0xfd,
	0x87, 0xd0, 0x38, 0x3f, 0x47, 0x13, 0x2f, 0x73, 0x2d, 0xd0, 0x3d, 0x48, 0x94, 0xb1, 0x43, 0xde,
	0xe2, 0x46, 0x51, 0x35, 0xeb, 0x8b, 0x45, 0xac, 0x28, 0x16, 0xb1, 0xed, 0x64, 0x94, 0x1e, 0x63,
	0x84, 0xf1, 0x93, 0x96, 0x9e, 0x5e, 0x92, 0x11, 0xc7, 0x15, 0xcc, 0xfa, 0xe2, 0x3a, 0x43, 0xa1,
	0xc7, 0x10, 0xaf, 0x62, 0x96, 0xdc, 0x4d, 0x52, 0x4a, 0x0e, 0x53, 0x7b, 0x7f, 0x2f, 0xf4, 0x48,
	0x5b, 0x14, 0xc7, 0x0e, 0xb6, 0x6d, 0x92, 0x92, 0x0c, 0x8c, 0xd2, 0xfd, 0xdf, 0xc5, 0x99, 0x63,
	0xe1, 0xce, 0x8c, 0x96, 0xe0, 0x0a, 0xcd, 0xa3, 0x21, 0x24, 0x23, 0x94, 0x24, 0xe1, 0x6e, 0x6f,
	0xb7, 0x93, 0x15, 0x60, 0x54, 0x27, 0xce, 0x5b, 0xc3, 0xaa, 0x14, 0x4d, 0x43, 0x53, 0x4b, 0x8d,
	0x24, 0x50, 0x7d, 0xc5, 0x50, 0x7d, 0x9f, 0x31, 0xe8, 0x73, 0x8a, 0x74, 0x93, 0x85, 0xef, 0x33,
	0xb5, 0x0a, 0x71, 0xdf, 0x6d, 0xa0, 0x71, 0x18, 0xac, 0x90, 0x06, 0x77, 0x66, 0xf7, 0x2f, 0x4a,
	0xc0, 0x50, 0x1d, 0x6b, 0x35, 0xc2, 0x03, 0x92, 0x7d, 0xdc, 0x1d, 0x58, 0x11, 0x36, 0x10, 0x8c,
	0xab, 0xba, 0x43, 0x2c, 0x9d, 0x38, 0x45, 0x6e, 0x51, 0xf1, 0x4f, 0x02, 0x8c, 0xb7, 0xdb, 0x07,
	0xfd, 0x10, 0x86, 0x79, 0x1d, 0xa0, 0x8c, 0xe3, 0xf9, 0x9b, 0x3d, 0x5c, 0xe5, 0x25, 0x43, 0x52,
	0xc3, 0x7a, 0x64, 0x68, 0x07, 0x50, 0x15, 0xbb, 0xc2, 0x74, 0xac, 0x97, 0x88, 0x77, 0x68, 0x16,
	0x14, 0x0b, 0x3d, 0x2e, 0x69, 0xab, 0x45, 0xc4, 0x8f, 0x7f, 0xb9, 0xda, 0xbe, 0xe4, 0xa6, 0xbc,
	0x80, 0x97, 0xf6, 0x1b, 0xe0, 0xbf, 0x1c, 0x86, 0xc4, 0x43, 0x8b, 0x74, 0x06, 0x78, 0x1f, 0x45,
	0xc9, 0x8b, 0xd0, 0x81, 0xcf, 0x15, 0xa1, 0x83, 0xfd, 0x46, 0x68, 0xa4, 0x47, 0x84, 0x86, 0x1d,
	0xe1, 0xcb, 0x89, 0xd0, 0x59, 0x00, 0xcf, 0x6d, 0x55, 0x25, 0x39, 0xe4, 0x4f, 0x7c, 0x7c, 0xbd,
	0xa0, 0xb4, 0x07, 0x62, 0x94, 0xde, 0xf1, 0xf5, 0x1e, 0x77, 0xec, 0x7a, 0x0a, 0x67, 0xe3, 0x0f,
	0xc4, 0x9f, 0x42, 0x42, 0x35, 0x8b, 0x58, 0xd3, 0x8c, 0x12, 0x6d, 0x77, 0x3c, 0xa7, 0x61, 0x91,
	0x7d, 0x2b, 0x94, 0x61, 0xe1, 0xf9, 0x7a, 0x13, 0xcf, 0xfd, 0x05, 0xa9, 0x66, 0xfb, 0x1a, 0xca,
	0x77, 0xc9, 0x34, 0x34, 0x64, 0xbb, 0xe4, 0x97, 0x7c, 0xf7, 0xbc, 0xc0, 0x95, 0xef, 0xcc, 0x0e,
	0x6b, 0xdd, 0xb3, 0x03, 0xf8, 0x08, 0xc3, 0x73, 0xc4, 0x26, 0x8c, 0x59, 0x44, 0x23, 0xd8, 0x26,
	0xc5, 0xd2, 0x1b, 0xac, 0xeb, 0x44, 0x4b, 0xc6, 0xa7, 0x85, 0xb9, 0xd1, 0xfc, 0x6c, 0xe8, 0xd1,
	0x65, 0x86, 0x7d, 0xc8, 0xa0, 0xf2, 0xa8, 0x15, 0xf8, 0x0e, 0xc9, 0x38, 0xdf, 0xfa, 0x9a, 0x64,
	0x9c, 0x65, 0x98, 0x0c, 0x78, 0x70, 0xff, 0x1d, 0xc1, 0x77, 0xd6, 0x6b, 0x8e, 0xf1, 0xc2, 0x2c,
	0x5b, 0x58, 0x21, 0x3c, 0x5d, 0xf4, 0x49, 0xfb, 0x57, 0x01, 0xae, 0xfa, 0x9a, 0xbb, 0x1f, 0x7b,
	0x1d, 0xb7, 0x7d, 0xae, 0x12, 0xff, 0x89, 0x1a, 0xd3, 0x43, 0x01, 0xa6, 0xba, 0x28, 0xcf, 0x5b,
	0xd4, 0x75, 0x80, 0xe6, 0x23, 0xc2, 0x6b, 0x52, 0x67, 0x82, 0x17, 0xdd, 0x7a, 0x64, 0x34, 0xe9,
	0x65, 0x1f, 0x51, 0xdf, 0xbd, 0x6a, 0x9b, 0x25, 0x9f, 0x19, 0x0a, 0x79, 0xe2, 0xbe, 0x29, 0xbe,
	0x11, 0x96, 0xfc, 0x75, 0xd0, 0x92, 0x7e, 0xe5, 0xb9, 0x25, 0x1f, 0x40, 0xbc, 0xf5, 0x4e, 0xf2,
	0x4c, 0x79, 0x2d, 0x3c, 0x66, 0x3c, 0x6a, 0x19, 0xf4, 0x26, 0xa3, 0xbe, 0xed, 0xf8, 0xcf, 0x01,
	0x80, 0x56, 0x3a, 0x44, 0x32, 0x5c, 0x3e, 0x30, 0x74, 0xac, 0x15, 0xfd, 0xa9, 0x94, 0xd5, 0xde,
	0x1b, 0xa1, 0xd2, 0x5f, 0xb9, 0xe8, 0x16, 0x83, 0xa7, 0x97, 0xe4, 0xb1, 0x83, 0xe0, 0x12, 0xda,
	0x81, 0x84, 0x45, 0xca, 0x6a, 0x07, 0xdb, 0x81, 0x1e, 0x09, 0x55, 0xe6, 0x04, 0x01, 0xce, 0xc8,
	0xea, 0x58, 0x45, 0xc9, 0x56, 0x8b, 0x40, 0x6f, 0xe5, 0xac, 0xd2, 0x1f, 0xf9, 0x42, 0x4a, 0xff,
	0xc6, 0x44, 0xb3, 0xd8, 0x38, 0x0d, 0x93, 0xa0, 0xc8, 0xdf, 0xff, 0x21, 0x09, 0xe2, 0xff, 0x04,
	0x18, 0x6b, 0xb3, 0x07, 0x9a, 0x82, 0xe1, 0x03, 0x43, 0x27, 0xed, 0x3e, 0x18, 0x75, 0x17, 0x0b,
	0x0a, 0xc2, 0x90, 0x64, 0x89, 0x09, 0x6b, 0xc5, 0x56, 0x41, 0xf0, 0xdb, 0x67, 0x2e, 0xbc, 0xe0,
	0x70, 0x22, 0x5e, 0x25, 0x68, 0xd3, 0x33, 0xe9, 0x71, 0x7a, 0xb9, 0xe8, 0x5b, 0x76, 0x45, 0x90,
	0xfd, 0x2e, 0x22, 0x06, 0x7b, 0x88, 0x78, 0xb4, 0x1f, 0x22, 0xc2, 0xe3, 0x14, 0x10, 0x21, 0xfe,
	0x5b, 0x00, 0xd4, 0x79, 0x63, 0x6e, 0x3b, 0xc3, 0x6e, 0xac, 0xa3, 0x9d, 0x61, 0xcb, 0x05, 0x05,
	0xad, 0x43, 0xcc, 0xab, 0x91, 0x76, 0x72, 0x80, 0x7a, 0xf9, 0x6c, 0x8f, 0xbb, 0xd9, 0xe4, 0x58,
	0xb9, 0x45, 0xf5, 0x55, 0x9c, 0x2f, 0x0f, 0x13, 0x21, 0x06, 0x47, 0xdf, 0x85, 0x98, 0x5d, 0xdb,
	0x75, 0x6b, 0x4a, 0xf3, 0xd9, 0x39, 0xc2, 0x16, 0x0a, 0x8a, 0x38, 0x09, 0x13, 0x21, 0x12, 0xc4,
	0xdf, 0x0a, 0x30, 0x1a, 0x3c, 0xcb, 0xa7, 0x77, 0x91, 0xfc, 0xef, 0xe3, 0x30, 0xca, 0x73, 0x11,
	0x6f, 0x07, 0xd0, 0x2f, 0x04, 0x18, 0x7c, 0x42, 0x1c, 0x14, 0xde, 0x71, 0x77, 0x0c, 0x63, 0x52,
	0x3d, 0x67, 0x11, 0xe2, 0xe2, 0x87, 0x7f, 0xfd, 0xe7, 0x77, 0x03, 0x19, 0xb4, 0x90, 0xad, 0x62,
	0x1d, 0x97, 0x89, 0x92, 0xae, 0xd4, 0x76, 0x69, 0x39, 0x26, 0xfe, 0xb1, 0x91, 0x9d, 0x7d, 0xd7,
	0xca, 0xd9, 0xef, 0xd1, 0xaf, 0x04, 0x88, 0xb8, 0x69, 0x12, 0x85, 0x1f, 0x30, 0x64, 0xac, 0x93,
	0xba, 0xdd, 0x07, 0x92, 0xa5, 0x58, 0xf1, 0x16, 0xd5, 0x69, 0x06, 0x5d, 0x3f, 0x43, 0x27, 0xf4,
	0x07, 0x01, 0xa2, 0xac, 0x53, 0x40, 0xb7, 0xfb, 0x6e, 0x84, 0x53, 0x67, 0xd7, 0x3d, 0xf1, 0xd9,
	0xd1, 0xe9, 0xfc, 0x74, 0xb7, 0x2e, 0x64, 0x98, 0x2f, 0x50, 0x2d, 0x6f, 0x88, 0x67, 0x69, 0x79,
	0x57, 0x98, 0x47, 0x7f, 0x16, 0x20, 0xca, 0x1e, 0x24, 0x5d, 0x14, 0x0d, 0x7b, 0x53, 0xf7, 0xa3,
	0xe8, 0x0e, 0x53, 0x34, 0xfc, 0xb1, 0x13, 0x50, 0x54, 0xca, 0x9f, 0xeb, 0x8a, 0x5d, 0xad, 0xff,
	0x26, 0x40, 0x94, 0x4d, 0x8e, 0xba, 0x68, 0x1d, 0x36, 0x93, 0xea, 0x47, 0xeb, 0xbd, 0xa3, 0xd3,
	0xf9, 0x4c, 0xb7, 0xa9, 0xd4, 0x64, 0xfb, 0x40, 0xe4, 0x51, 0xd5, 0x74, 0x1a, 0xcc, 0x4d, 0xe7,
	0xcf, 0xe7, 0xa6, 0x75, 0x88, 0x6c, 0x3b, 0x86, 0x89, 0xc2, 0x2b, 0x59, 0xe7, 0x70, 0xab, 0x1f,
	0xdd, 0xc5, 0xa3, 0xd3, 0xf9, 0x6b, 0xe1, 0x03, 0x2b, 0xcf, 0xde, 0xa8, 0x01, 0x43, 0x74, 0xbc,
	0xd4, 0x25, 0x3c, 0x42, 0xc6, 0x56, 0xfd, 0x48, 0x9e, 0x3d, 0x3a, 0x9d, 0xbf, 0xde, 0x65, 0x70,
	0xd5, 0x14, 0xfd, 0x17, 0x01, 0x46, 0xdd, 0xa0, 0x6a, 0x75, 0x2e, 0x48, 0x3a, 0x2b, 0xf2, 0x3a,
	0x5a, 0xb4, 0x54, 0xfe, 0x3c, 0x24, 0x3c, 0x6a, 0x1f, 0xd0, 0x2b, 0x5a, 0x45, 0x3f, 0x38, 0xcf,
	0x15, 0x65, 0x7d, 0x8d, 0x91, 0xa7, 0x7a, 0xab, 0x7d, 0x3d, 0x5b, 0xf5, 0x8e, 0x3e, 0xfd, 0x6c,
	0xd5, 0x3b, 0xbb, 0xe3, 0x0b, 0xaa, 0xde, 0xea, 0x8d, 0x37, 0x5e, 0xc2, 0x95, 0x80, 0x54, 0x6c,
	0xaa, 0x5c, 0xf2, 0xab, 0xb5, 0xb2, 0xea, 0xbc, 0xa9, 0xed, 0x66, 0x4a, 0x46, 0x35, 0xcb, 0x30,
	0x69, 0x36, 0x4e, 0x2f, 0x1b, 0xe9, 0x32, 0xd1, 0xa9, 0x97, 0x67, 0x43, 0xe6, 0xec, 0x6b, 0x95,
	0x15, 0x7b, 0x37, 0x4a, 0xb7, 0xef, 0x7c, 0x16, 0x00, 0x00, 0xff, 0xff, 0x60, 0xe7, 0x06, 0x73,
	0xbb, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterServiceClient interface {
	// Returns the specified Kubernetes cluster.
	//
	// To get the list of available Kubernetes cluster, make a [List] request.
	Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Retrieves the list of Kubernetes cluster in the specified folder.
	List(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// Creates a Kubernetes cluster in the specified folder.
	Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified Kubernetes cluster.
	Update(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified Kubernetes cluster.
	Delete(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Stop(ctx context.Context, in *StopClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Start(ctx context.Context, in *StartClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Lists nodegroup for the specified Kubernetes cluster.
	ListNodeGroups(ctx context.Context, in *ListClusterNodeGroupsRequest, opts ...grpc.CallOption) (*ListClusterNodeGroupsResponse, error)
	// Lists operations for the specified Kubernetes cluster.
	ListOperations(ctx context.Context, in *ListClusterOperationsRequest, opts ...grpc.CallOption) (*ListClusterOperationsResponse, error)
}

type clusterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServiceClient(cc *grpc.ClientConn) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/yandex.cloud.k8s.v1.ClusterService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) List(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.k8s.v1.ClusterService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.k8s.v1.ClusterService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Update(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.k8s.v1.ClusterService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Delete(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.k8s.v1.ClusterService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Stop(ctx context.Context, in *StopClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.k8s.v1.ClusterService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Start(ctx context.Context, in *StartClusterRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.k8s.v1.ClusterService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListNodeGroups(ctx context.Context, in *ListClusterNodeGroupsRequest, opts ...grpc.CallOption) (*ListClusterNodeGroupsResponse, error) {
	out := new(ListClusterNodeGroupsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.k8s.v1.ClusterService/ListNodeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) ListOperations(ctx context.Context, in *ListClusterOperationsRequest, opts ...grpc.CallOption) (*ListClusterOperationsResponse, error) {
	out := new(ListClusterOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.k8s.v1.ClusterService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
type ClusterServiceServer interface {
	// Returns the specified Kubernetes cluster.
	//
	// To get the list of available Kubernetes cluster, make a [List] request.
	Get(context.Context, *GetClusterRequest) (*Cluster, error)
	// Retrieves the list of Kubernetes cluster in the specified folder.
	List(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	// Creates a Kubernetes cluster in the specified folder.
	Create(context.Context, *CreateClusterRequest) (*operation.Operation, error)
	// Updates the specified Kubernetes cluster.
	Update(context.Context, *UpdateClusterRequest) (*operation.Operation, error)
	// Deletes the specified Kubernetes cluster.
	Delete(context.Context, *DeleteClusterRequest) (*operation.Operation, error)
	Stop(context.Context, *StopClusterRequest) (*operation.Operation, error)
	Start(context.Context, *StartClusterRequest) (*operation.Operation, error)
	// Lists nodegroup for the specified Kubernetes cluster.
	ListNodeGroups(context.Context, *ListClusterNodeGroupsRequest) (*ListClusterNodeGroupsResponse, error)
	// Lists operations for the specified Kubernetes cluster.
	ListOperations(context.Context, *ListClusterOperationsRequest) (*ListClusterOperationsResponse, error)
}

// UnimplementedClusterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServiceServer struct {
}

func (*UnimplementedClusterServiceServer) Get(ctx context.Context, req *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedClusterServiceServer) List(ctx context.Context, req *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedClusterServiceServer) Create(ctx context.Context, req *CreateClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedClusterServiceServer) Update(ctx context.Context, req *UpdateClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedClusterServiceServer) Delete(ctx context.Context, req *DeleteClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedClusterServiceServer) Stop(ctx context.Context, req *StopClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedClusterServiceServer) Start(ctx context.Context, req *StartClusterRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedClusterServiceServer) ListNodeGroups(ctx context.Context, req *ListClusterNodeGroupsRequest) (*ListClusterNodeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeGroups not implemented")
}
func (*UnimplementedClusterServiceServer) ListOperations(ctx context.Context, req *ListClusterOperationsRequest) (*ListClusterOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.k8s.v1.ClusterService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Get(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.k8s.v1.ClusterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).List(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.k8s.v1.ClusterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Create(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.k8s.v1.ClusterService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Update(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.k8s.v1.ClusterService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Delete(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.k8s.v1.ClusterService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Stop(ctx, req.(*StopClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.k8s.v1.ClusterService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Start(ctx, req.(*StartClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListNodeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterNodeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListNodeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.k8s.v1.ClusterService/ListNodeGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListNodeGroups(ctx, req.(*ListClusterNodeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.k8s.v1.ClusterService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListOperations(ctx, req.(*ListClusterOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.k8s.v1.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ClusterService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClusterService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ClusterService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClusterService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClusterService_Delete_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ClusterService_Stop_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _ClusterService_Start_Handler,
		},
		{
			MethodName: "ListNodeGroups",
			Handler:    _ClusterService_ListNodeGroups_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _ClusterService_ListOperations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/k8s/v1/cluster_service.proto",
}
