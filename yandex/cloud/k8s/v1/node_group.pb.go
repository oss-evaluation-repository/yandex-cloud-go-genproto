// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/k8s/v1/node_group.proto

package k8s

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpVersion int32

const (
	IpVersion_IP_VERSION_UNSPECIFIED IpVersion = 0
	// IPv4 address, for example 192.168.0.0.
	IpVersion_IPV4 IpVersion = 1
	// IPv6 address, not available yet.
	IpVersion_IPV6 IpVersion = 2
)

var IpVersion_name = map[int32]string{
	0: "IP_VERSION_UNSPECIFIED",
	1: "IPV4",
	2: "IPV6",
}

var IpVersion_value = map[string]int32{
	"IP_VERSION_UNSPECIFIED": 0,
	"IPV4":                   1,
	"IPV6":                   2,
}

func (x IpVersion) String() string {
	return proto.EnumName(IpVersion_name, int32(x))
}

func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{0}
}

type NodeGroup_Status int32

const (
	NodeGroup_STATUS_UNSPECIFIED NodeGroup_Status = 0
	// Node group is waiting for resources to be allocated.
	NodeGroup_PROVISIONING NodeGroup_Status = 1
	// Node group is running.
	NodeGroup_RUNNING NodeGroup_Status = 2
	// Node group is waiting for some work to be done, such as upgrading node software.
	NodeGroup_RECONCILING NodeGroup_Status = 3
	// Node group is being stopped.
	NodeGroup_STOPPING NodeGroup_Status = 4
	// Node group stopped.
	NodeGroup_STOPPED NodeGroup_Status = 5
	// Node group is being deleted.
	NodeGroup_DELETING NodeGroup_Status = 6
	// Node group is being started.
	NodeGroup_STARTING NodeGroup_Status = 7
)

var NodeGroup_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "PROVISIONING",
	2: "RUNNING",
	3: "RECONCILING",
	4: "STOPPING",
	5: "STOPPED",
	6: "DELETING",
	7: "STARTING",
}

var NodeGroup_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"PROVISIONING":       1,
	"RUNNING":            2,
	"RECONCILING":        3,
	"STOPPING":           4,
	"STOPPED":            5,
	"DELETING":           6,
	"STARTING":           7,
}

func (x NodeGroup_Status) String() string {
	return proto.EnumName(NodeGroup_Status_name, int32(x))
}

func (NodeGroup_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{0, 0}
}

type NodeGroup struct {
	// ID of the node group.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the cluster that the node group belongs to.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Creation timestamp.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the node group.
	// The name is unique within the folder.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the node group. 0-256 characters long.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs. Ðœaximum of 64 per resource.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Status of the node group.
	Status NodeGroup_Status `protobuf:"varint,7,opt,name=status,proto3,enum=yandex.cloud.k8s.v1.NodeGroup_Status" json:"status,omitempty"`
	// Node template that specifies parameters of the compute instances for the node group.
	NodeTemplate *NodeTemplate `protobuf:"bytes,8,opt,name=node_template,json=nodeTemplate,proto3" json:"node_template,omitempty"`
	// Scale policy of the node group.  For more information, see [Scaling policy](/docs/compute/concepts/instance-groups/policies#scale-policy).
	ScalePolicy *ScalePolicy `protobuf:"bytes,9,opt,name=scale_policy,json=scalePolicy,proto3" json:"scale_policy,omitempty"`
	// Allocation policy by which resources for node group are allocated to zones and regions.
	AllocationPolicy *NodeGroupAllocationPolicy `protobuf:"bytes,10,opt,name=allocation_policy,json=allocationPolicy,proto3" json:"allocation_policy,omitempty"`
	// ID of the managed instance group associated with this node group.
	InstanceGroupId string `protobuf:"bytes,11,opt,name=instance_group_id,json=instanceGroupId,proto3" json:"instance_group_id,omitempty"`
	// Version of Kubernetes components that runs on the nodes.
	// Deprecated. Use version_info.current_version.
	NodeVersion          string                      `protobuf:"bytes,12,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	VersionInfo          *VersionInfo                `protobuf:"bytes,13,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	MaintenancePolicy    *NodeGroupMaintenancePolicy `protobuf:"bytes,14,opt,name=maintenance_policy,json=maintenancePolicy,proto3" json:"maintenance_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NodeGroup) Reset()         { *m = NodeGroup{} }
func (m *NodeGroup) String() string { return proto.CompactTextString(m) }
func (*NodeGroup) ProtoMessage()    {}
func (*NodeGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{0}
}

func (m *NodeGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGroup.Unmarshal(m, b)
}
func (m *NodeGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGroup.Marshal(b, m, deterministic)
}
func (m *NodeGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGroup.Merge(m, src)
}
func (m *NodeGroup) XXX_Size() int {
	return xxx_messageInfo_NodeGroup.Size(m)
}
func (m *NodeGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGroup.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGroup proto.InternalMessageInfo

func (m *NodeGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeGroup) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NodeGroup) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *NodeGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NodeGroup) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NodeGroup) GetStatus() NodeGroup_Status {
	if m != nil {
		return m.Status
	}
	return NodeGroup_STATUS_UNSPECIFIED
}

func (m *NodeGroup) GetNodeTemplate() *NodeTemplate {
	if m != nil {
		return m.NodeTemplate
	}
	return nil
}

func (m *NodeGroup) GetScalePolicy() *ScalePolicy {
	if m != nil {
		return m.ScalePolicy
	}
	return nil
}

func (m *NodeGroup) GetAllocationPolicy() *NodeGroupAllocationPolicy {
	if m != nil {
		return m.AllocationPolicy
	}
	return nil
}

func (m *NodeGroup) GetInstanceGroupId() string {
	if m != nil {
		return m.InstanceGroupId
	}
	return ""
}

func (m *NodeGroup) GetNodeVersion() string {
	if m != nil {
		return m.NodeVersion
	}
	return ""
}

func (m *NodeGroup) GetVersionInfo() *VersionInfo {
	if m != nil {
		return m.VersionInfo
	}
	return nil
}

func (m *NodeGroup) GetMaintenancePolicy() *NodeGroupMaintenancePolicy {
	if m != nil {
		return m.MaintenancePolicy
	}
	return nil
}

type NodeTemplate struct {
	// ID of the hardware platform configuration for the node.
	PlatformId string `protobuf:"bytes,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	// Computing resources of the node such as the amount of memory and number of cores.
	ResourcesSpec *ResourcesSpec `protobuf:"bytes,2,opt,name=resources_spec,json=resourcesSpec,proto3" json:"resources_spec,omitempty"`
	// The metadata as `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.
	//
	// For example, you may use the metadata in order to provide your public SSH key to the node.
	// For more information, see [Metadata](/docs/compute/concepts/vm-metadata).
	BootDiskSpec *DiskSpec         `protobuf:"bytes,3,opt,name=boot_disk_spec,json=bootDiskSpec,proto3" json:"boot_disk_spec,omitempty"`
	Metadata     map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Specification for the create network interfaces for the node group compute instances.
	V4AddressSpec *NodeAddressSpec `protobuf:"bytes,5,opt,name=v4_address_spec,json=v4AddressSpec,proto3" json:"v4_address_spec,omitempty"`
	// Scheduling policy configuration.
	SchedulingPolicy     *SchedulingPolicy `protobuf:"bytes,6,opt,name=scheduling_policy,json=schedulingPolicy,proto3" json:"scheduling_policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeTemplate) Reset()         { *m = NodeTemplate{} }
func (m *NodeTemplate) String() string { return proto.CompactTextString(m) }
func (*NodeTemplate) ProtoMessage()    {}
func (*NodeTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{1}
}

func (m *NodeTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeTemplate.Unmarshal(m, b)
}
func (m *NodeTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeTemplate.Marshal(b, m, deterministic)
}
func (m *NodeTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeTemplate.Merge(m, src)
}
func (m *NodeTemplate) XXX_Size() int {
	return xxx_messageInfo_NodeTemplate.Size(m)
}
func (m *NodeTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_NodeTemplate proto.InternalMessageInfo

func (m *NodeTemplate) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *NodeTemplate) GetResourcesSpec() *ResourcesSpec {
	if m != nil {
		return m.ResourcesSpec
	}
	return nil
}

func (m *NodeTemplate) GetBootDiskSpec() *DiskSpec {
	if m != nil {
		return m.BootDiskSpec
	}
	return nil
}

func (m *NodeTemplate) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *NodeTemplate) GetV4AddressSpec() *NodeAddressSpec {
	if m != nil {
		return m.V4AddressSpec
	}
	return nil
}

func (m *NodeTemplate) GetSchedulingPolicy() *SchedulingPolicy {
	if m != nil {
		return m.SchedulingPolicy
	}
	return nil
}

type NodeAddressSpec struct {
	// One-to-one NAT configuration. Setting up one-to-one NAT ensures that public IP addresses are assigned to nodes, and therefore internet is accessible for all nodes of the node group. If the field is not set, NAT will not be set up.
	OneToOneNatSpec      *OneToOneNatSpec `protobuf:"bytes,1,opt,name=one_to_one_nat_spec,json=oneToOneNatSpec,proto3" json:"one_to_one_nat_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeAddressSpec) Reset()         { *m = NodeAddressSpec{} }
func (m *NodeAddressSpec) String() string { return proto.CompactTextString(m) }
func (*NodeAddressSpec) ProtoMessage()    {}
func (*NodeAddressSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{2}
}

func (m *NodeAddressSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeAddressSpec.Unmarshal(m, b)
}
func (m *NodeAddressSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeAddressSpec.Marshal(b, m, deterministic)
}
func (m *NodeAddressSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeAddressSpec.Merge(m, src)
}
func (m *NodeAddressSpec) XXX_Size() int {
	return xxx_messageInfo_NodeAddressSpec.Size(m)
}
func (m *NodeAddressSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeAddressSpec.DiscardUnknown(m)
}

var xxx_messageInfo_NodeAddressSpec proto.InternalMessageInfo

func (m *NodeAddressSpec) GetOneToOneNatSpec() *OneToOneNatSpec {
	if m != nil {
		return m.OneToOneNatSpec
	}
	return nil
}

type OneToOneNatSpec struct {
	// IP version for the public IP address.
	IpVersion            IpVersion `protobuf:"varint,1,opt,name=ip_version,json=ipVersion,proto3,enum=yandex.cloud.k8s.v1.IpVersion" json:"ip_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OneToOneNatSpec) Reset()         { *m = OneToOneNatSpec{} }
func (m *OneToOneNatSpec) String() string { return proto.CompactTextString(m) }
func (*OneToOneNatSpec) ProtoMessage()    {}
func (*OneToOneNatSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{3}
}

func (m *OneToOneNatSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OneToOneNatSpec.Unmarshal(m, b)
}
func (m *OneToOneNatSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OneToOneNatSpec.Marshal(b, m, deterministic)
}
func (m *OneToOneNatSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneToOneNatSpec.Merge(m, src)
}
func (m *OneToOneNatSpec) XXX_Size() int {
	return xxx_messageInfo_OneToOneNatSpec.Size(m)
}
func (m *OneToOneNatSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_OneToOneNatSpec.DiscardUnknown(m)
}

var xxx_messageInfo_OneToOneNatSpec proto.InternalMessageInfo

func (m *OneToOneNatSpec) GetIpVersion() IpVersion {
	if m != nil {
		return m.IpVersion
	}
	return IpVersion_IP_VERSION_UNSPECIFIED
}

type ResourcesSpec struct {
	// Amount of memory available to the node, specified in bytes.
	Memory int64 `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"`
	// Number of cores available to the node.
	Cores int64 `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	// Baseline level of CPU performance with the possibility to burst performance above that baseline level.
	// This field sets baseline performance for each core.
	CoreFraction         int64    `protobuf:"varint,3,opt,name=core_fraction,json=coreFraction,proto3" json:"core_fraction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourcesSpec) Reset()         { *m = ResourcesSpec{} }
func (m *ResourcesSpec) String() string { return proto.CompactTextString(m) }
func (*ResourcesSpec) ProtoMessage()    {}
func (*ResourcesSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{4}
}

func (m *ResourcesSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourcesSpec.Unmarshal(m, b)
}
func (m *ResourcesSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourcesSpec.Marshal(b, m, deterministic)
}
func (m *ResourcesSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcesSpec.Merge(m, src)
}
func (m *ResourcesSpec) XXX_Size() int {
	return xxx_messageInfo_ResourcesSpec.Size(m)
}
func (m *ResourcesSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcesSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcesSpec proto.InternalMessageInfo

func (m *ResourcesSpec) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ResourcesSpec) GetCores() int64 {
	if m != nil {
		return m.Cores
	}
	return 0
}

func (m *ResourcesSpec) GetCoreFraction() int64 {
	if m != nil {
		return m.CoreFraction
	}
	return 0
}

type DiskSpec struct {
	// ID of the disk type.
	DiskTypeId string `protobuf:"bytes,1,opt,name=disk_type_id,json=diskTypeId,proto3" json:"disk_type_id,omitempty"`
	// Size of the disk, specified in bytes.
	DiskSize             int64    `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskSpec) Reset()         { *m = DiskSpec{} }
func (m *DiskSpec) String() string { return proto.CompactTextString(m) }
func (*DiskSpec) ProtoMessage()    {}
func (*DiskSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{5}
}

func (m *DiskSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskSpec.Unmarshal(m, b)
}
func (m *DiskSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskSpec.Marshal(b, m, deterministic)
}
func (m *DiskSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskSpec.Merge(m, src)
}
func (m *DiskSpec) XXX_Size() int {
	return xxx_messageInfo_DiskSpec.Size(m)
}
func (m *DiskSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DiskSpec proto.InternalMessageInfo

func (m *DiskSpec) GetDiskTypeId() string {
	if m != nil {
		return m.DiskTypeId
	}
	return ""
}

func (m *DiskSpec) GetDiskSize() int64 {
	if m != nil {
		return m.DiskSize
	}
	return 0
}

type ScalePolicy struct {
	// Types that are valid to be assigned to ScaleType:
	//	*ScalePolicy_FixedScale_
	ScaleType            isScalePolicy_ScaleType `protobuf_oneof:"scale_type"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ScalePolicy) Reset()         { *m = ScalePolicy{} }
func (m *ScalePolicy) String() string { return proto.CompactTextString(m) }
func (*ScalePolicy) ProtoMessage()    {}
func (*ScalePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{6}
}

func (m *ScalePolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScalePolicy.Unmarshal(m, b)
}
func (m *ScalePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScalePolicy.Marshal(b, m, deterministic)
}
func (m *ScalePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalePolicy.Merge(m, src)
}
func (m *ScalePolicy) XXX_Size() int {
	return xxx_messageInfo_ScalePolicy.Size(m)
}
func (m *ScalePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_ScalePolicy proto.InternalMessageInfo

type isScalePolicy_ScaleType interface {
	isScalePolicy_ScaleType()
}

type ScalePolicy_FixedScale_ struct {
	FixedScale *ScalePolicy_FixedScale `protobuf:"bytes,1,opt,name=fixed_scale,json=fixedScale,proto3,oneof"`
}

func (*ScalePolicy_FixedScale_) isScalePolicy_ScaleType() {}

func (m *ScalePolicy) GetScaleType() isScalePolicy_ScaleType {
	if m != nil {
		return m.ScaleType
	}
	return nil
}

func (m *ScalePolicy) GetFixedScale() *ScalePolicy_FixedScale {
	if x, ok := m.GetScaleType().(*ScalePolicy_FixedScale_); ok {
		return x.FixedScale
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ScalePolicy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ScalePolicy_FixedScale_)(nil),
	}
}

type ScalePolicy_FixedScale struct {
	// Number of nodes in the node group.
	Size                 int64    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScalePolicy_FixedScale) Reset()         { *m = ScalePolicy_FixedScale{} }
func (m *ScalePolicy_FixedScale) String() string { return proto.CompactTextString(m) }
func (*ScalePolicy_FixedScale) ProtoMessage()    {}
func (*ScalePolicy_FixedScale) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{6, 0}
}

func (m *ScalePolicy_FixedScale) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScalePolicy_FixedScale.Unmarshal(m, b)
}
func (m *ScalePolicy_FixedScale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScalePolicy_FixedScale.Marshal(b, m, deterministic)
}
func (m *ScalePolicy_FixedScale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalePolicy_FixedScale.Merge(m, src)
}
func (m *ScalePolicy_FixedScale) XXX_Size() int {
	return xxx_messageInfo_ScalePolicy_FixedScale.Size(m)
}
func (m *ScalePolicy_FixedScale) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalePolicy_FixedScale.DiscardUnknown(m)
}

var xxx_messageInfo_ScalePolicy_FixedScale proto.InternalMessageInfo

func (m *ScalePolicy_FixedScale) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type NodeGroupAllocationPolicy struct {
	// List of locations where resources for the node group will be allocated.
	Locations            []*NodeGroupLocation `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NodeGroupAllocationPolicy) Reset()         { *m = NodeGroupAllocationPolicy{} }
func (m *NodeGroupAllocationPolicy) String() string { return proto.CompactTextString(m) }
func (*NodeGroupAllocationPolicy) ProtoMessage()    {}
func (*NodeGroupAllocationPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{7}
}

func (m *NodeGroupAllocationPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGroupAllocationPolicy.Unmarshal(m, b)
}
func (m *NodeGroupAllocationPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGroupAllocationPolicy.Marshal(b, m, deterministic)
}
func (m *NodeGroupAllocationPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGroupAllocationPolicy.Merge(m, src)
}
func (m *NodeGroupAllocationPolicy) XXX_Size() int {
	return xxx_messageInfo_NodeGroupAllocationPolicy.Size(m)
}
func (m *NodeGroupAllocationPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGroupAllocationPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGroupAllocationPolicy proto.InternalMessageInfo

func (m *NodeGroupAllocationPolicy) GetLocations() []*NodeGroupLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

type NodeGroupLocation struct {
	// ID of the availability zone where the nodes may reside.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// ID of the subnet. If a network chosen for the Kubernetes cluster has only one subnet in the specified zone, subnet ID may be omitted.
	SubnetId             string   `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeGroupLocation) Reset()         { *m = NodeGroupLocation{} }
func (m *NodeGroupLocation) String() string { return proto.CompactTextString(m) }
func (*NodeGroupLocation) ProtoMessage()    {}
func (*NodeGroupLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{8}
}

func (m *NodeGroupLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGroupLocation.Unmarshal(m, b)
}
func (m *NodeGroupLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGroupLocation.Marshal(b, m, deterministic)
}
func (m *NodeGroupLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGroupLocation.Merge(m, src)
}
func (m *NodeGroupLocation) XXX_Size() int {
	return xxx_messageInfo_NodeGroupLocation.Size(m)
}
func (m *NodeGroupLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGroupLocation.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGroupLocation proto.InternalMessageInfo

func (m *NodeGroupLocation) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *NodeGroupLocation) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

type SchedulingPolicy struct {
	// True for preemptible compute instances. Default value is false. Preemptible compute instances are stopped at least once every 24 hours, and can be stopped at any time
	// if their resources are needed by Compute.
	// For more information, see [Preemptible Virtual Machines](/docs/compute/concepts/preemptible-vm).
	Preemptible          bool     `protobuf:"varint,1,opt,name=preemptible,proto3" json:"preemptible,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulingPolicy) Reset()         { *m = SchedulingPolicy{} }
func (m *SchedulingPolicy) String() string { return proto.CompactTextString(m) }
func (*SchedulingPolicy) ProtoMessage()    {}
func (*SchedulingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{9}
}

func (m *SchedulingPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingPolicy.Unmarshal(m, b)
}
func (m *SchedulingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingPolicy.Marshal(b, m, deterministic)
}
func (m *SchedulingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingPolicy.Merge(m, src)
}
func (m *SchedulingPolicy) XXX_Size() int {
	return xxx_messageInfo_SchedulingPolicy.Size(m)
}
func (m *SchedulingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingPolicy proto.InternalMessageInfo

func (m *SchedulingPolicy) GetPreemptible() bool {
	if m != nil {
		return m.Preemptible
	}
	return false
}

type NodeGroupMaintenancePolicy struct {
	AutoUpgrade          bool               `protobuf:"varint,1,opt,name=auto_upgrade,json=autoUpgrade,proto3" json:"auto_upgrade,omitempty"`
	AutoRepair           bool               `protobuf:"varint,2,opt,name=auto_repair,json=autoRepair,proto3" json:"auto_repair,omitempty"`
	MaintenanceWindow    *MaintenanceWindow `protobuf:"bytes,3,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NodeGroupMaintenancePolicy) Reset()         { *m = NodeGroupMaintenancePolicy{} }
func (m *NodeGroupMaintenancePolicy) String() string { return proto.CompactTextString(m) }
func (*NodeGroupMaintenancePolicy) ProtoMessage()    {}
func (*NodeGroupMaintenancePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c271823cf8486a, []int{10}
}

func (m *NodeGroupMaintenancePolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGroupMaintenancePolicy.Unmarshal(m, b)
}
func (m *NodeGroupMaintenancePolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGroupMaintenancePolicy.Marshal(b, m, deterministic)
}
func (m *NodeGroupMaintenancePolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGroupMaintenancePolicy.Merge(m, src)
}
func (m *NodeGroupMaintenancePolicy) XXX_Size() int {
	return xxx_messageInfo_NodeGroupMaintenancePolicy.Size(m)
}
func (m *NodeGroupMaintenancePolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGroupMaintenancePolicy.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGroupMaintenancePolicy proto.InternalMessageInfo

func (m *NodeGroupMaintenancePolicy) GetAutoUpgrade() bool {
	if m != nil {
		return m.AutoUpgrade
	}
	return false
}

func (m *NodeGroupMaintenancePolicy) GetAutoRepair() bool {
	if m != nil {
		return m.AutoRepair
	}
	return false
}

func (m *NodeGroupMaintenancePolicy) GetMaintenanceWindow() *MaintenanceWindow {
	if m != nil {
		return m.MaintenanceWindow
	}
	return nil
}

func init() {
	proto.RegisterEnum("yandex.cloud.k8s.v1.IpVersion", IpVersion_name, IpVersion_value)
	proto.RegisterEnum("yandex.cloud.k8s.v1.NodeGroup_Status", NodeGroup_Status_name, NodeGroup_Status_value)
	proto.RegisterType((*NodeGroup)(nil), "yandex.cloud.k8s.v1.NodeGroup")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.k8s.v1.NodeGroup.LabelsEntry")
	proto.RegisterType((*NodeTemplate)(nil), "yandex.cloud.k8s.v1.NodeTemplate")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.k8s.v1.NodeTemplate.MetadataEntry")
	proto.RegisterType((*NodeAddressSpec)(nil), "yandex.cloud.k8s.v1.NodeAddressSpec")
	proto.RegisterType((*OneToOneNatSpec)(nil), "yandex.cloud.k8s.v1.OneToOneNatSpec")
	proto.RegisterType((*ResourcesSpec)(nil), "yandex.cloud.k8s.v1.ResourcesSpec")
	proto.RegisterType((*DiskSpec)(nil), "yandex.cloud.k8s.v1.DiskSpec")
	proto.RegisterType((*ScalePolicy)(nil), "yandex.cloud.k8s.v1.ScalePolicy")
	proto.RegisterType((*ScalePolicy_FixedScale)(nil), "yandex.cloud.k8s.v1.ScalePolicy.FixedScale")
	proto.RegisterType((*NodeGroupAllocationPolicy)(nil), "yandex.cloud.k8s.v1.NodeGroupAllocationPolicy")
	proto.RegisterType((*NodeGroupLocation)(nil), "yandex.cloud.k8s.v1.NodeGroupLocation")
	proto.RegisterType((*SchedulingPolicy)(nil), "yandex.cloud.k8s.v1.SchedulingPolicy")
	proto.RegisterType((*NodeGroupMaintenancePolicy)(nil), "yandex.cloud.k8s.v1.NodeGroupMaintenancePolicy")
}

func init() {
	proto.RegisterFile("yandex/cloud/k8s/v1/node_group.proto", fileDescriptor_d5c271823cf8486a)
}

var fileDescriptor_d5c271823cf8486a = []byte{
	// 1412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x4f, 0xe3, 0x46,
	0x14, 0x5f, 0x43, 0x08, 0xc9, 0x4b, 0x80, 0x30, 0x5b, 0x6d, 0xd3, 0xb4, 0x74, 0xd9, 0x68, 0xb7,
	0x42, 0xac, 0xe3, 0xd8, 0xc6, 0x1b, 0x42, 0x59, 0x2a, 0xf1, 0x27, 0x6c, 0x2d, 0xb1, 0x21, 0x9a,
	0x04, 0x2a, 0x75, 0xd5, 0x5a, 0x83, 0x3d, 0x64, 0x2d, 0x12, 0xdb, 0xb2, 0x9d, 0xec, 0x82, 0xf6,
	0xd2, 0x5e, 0x2a, 0xf5, 0x43, 0xf4, 0xd0, 0x8f, 0xb0, 0x97, 0xde, 0xaa, 0xf6, 0x04, 0xd7, 0x7e,
	0x8b, 0x9e, 0x7b, 0xe4, 0x54, 0xcd, 0xd8, 0x09, 0x81, 0x06, 0x56, 0x3d, 0x65, 0xde, 0xef, 0xfd,
	0xde, 0xcb, 0xfc, 0x66, 0xde, 0x9b, 0x67, 0x78, 0x7c, 0x4a, 0x1c, 0x8b, 0xbe, 0x2d, 0x9b, 0x1d,
	0xb7, 0x67, 0x95, 0x4f, 0xaa, 0x41, 0xb9, 0xaf, 0x94, 0x1d, 0xd7, 0xa2, 0x46, 0xdb, 0x77, 0x7b,
	0x9e, 0xe4, 0xf9, 0x6e, 0xe8, 0xa2, 0xfb, 0x11, 0x4b, 0xe2, 0x2c, 0xe9, 0xa4, 0x1a, 0x48, 0x7d,
	0xa5, 0xf0, 0xb0, 0xed, 0xba, 0xed, 0x0e, 0x2d, 0x73, 0xca, 0x51, 0xef, 0xb8, 0x1c, 0xda, 0x5d,
	0x1a, 0x84, 0xa4, 0x1b, 0x47, 0x15, 0x9e, 0x8c, 0xcb, 0xdd, 0x25, 0xb6, 0x13, 0x52, 0x87, 0x38,
	0x26, 0x8d, 0x69, 0x8f, 0xc6, 0xd1, 0xfa, 0xd4, 0x0f, 0x6c, 0xd7, 0x89, 0x29, 0x0b, 0xd7, 0x28,
	0x7d, 0xd2, 0xb1, 0x2d, 0x12, 0x0e, 0xdd, 0xc5, 0xbf, 0xa6, 0x21, 0x5d, 0x77, 0x2d, 0xfa, 0x82,
	0x6d, 0x19, 0xcd, 0xc2, 0x84, 0x6d, 0xe5, 0x85, 0x45, 0x61, 0x29, 0x8d, 0x27, 0x6c, 0x0b, 0x2d,
	0x00, 0x98, 0x9d, 0x5e, 0x10, 0x52, 0xdf, 0xb0, 0xad, 0xfc, 0x04, 0xc7, 0xd3, 0x31, 0xa2, 0x5b,
	0x68, 0x0d, 0xc0, 0xf4, 0x29, 0x09, 0xa9, 0x65, 0x90, 0x30, 0x3f, 0xb9, 0x28, 0x2c, 0x65, 0xd4,
	0x82, 0x14, 0x69, 0x93, 0x06, 0xda, 0xa4, 0xd6, 0x40, 0x1b, 0x4e, 0xc7, 0xec, 0xcd, 0x10, 0x21,
	0x48, 0x38, 0xa4, 0x4b, 0xf3, 0x09, 0x9e, 0x93, 0xaf, 0xd1, 0x22, 0x64, 0x2c, 0x1a, 0x98, 0xbe,
	0xed, 0xb1, 0x0d, 0xe6, 0xa7, 0xb8, 0x6b, 0x14, 0x42, 0x5b, 0x90, 0xec, 0x90, 0x23, 0xda, 0x09,
	0xf2, 0xc9, 0xc5, 0xc9, 0xa5, 0x8c, 0xba, 0x2c, 0x8d, 0x39, 0x5d, 0x69, 0xa8, 0x47, 0xda, 0xe3,
	0xe4, 0x9a, 0x13, 0xfa, 0xa7, 0x38, 0x8e, 0x44, 0x1b, 0x90, 0x0c, 0x42, 0x12, 0xf6, 0x82, 0xfc,
	0xf4, 0xa2, 0xb0, 0x34, 0xab, 0x3e, 0xf9, 0x40, 0x8e, 0x26, 0x27, 0xe3, 0x38, 0x08, 0xed, 0xc2,
	0x0c, 0xbf, 0xe3, 0x90, 0x76, 0xbd, 0x0e, 0x09, 0x69, 0x3e, 0xc5, 0x65, 0x3f, 0xba, 0x35, 0x4b,
	0x2b, 0x26, 0xe2, 0xac, 0x33, 0x62, 0xa1, 0x6d, 0xc8, 0x06, 0x26, 0xe9, 0x50, 0xc3, 0x73, 0x3b,
	0xb6, 0x79, 0x9a, 0x4f, 0xf3, 0x34, 0x8b, 0x63, 0xd3, 0x34, 0x19, 0xb1, 0xc1, 0x79, 0x38, 0x13,
	0x5c, 0x19, 0xe8, 0x15, 0xcc, 0x93, 0x4e, 0xc7, 0x35, 0xf9, 0x8d, 0x0e, 0x32, 0x01, 0xcf, 0x24,
	0xdd, 0x2d, 0x6b, 0x73, 0x18, 0x16, 0xe7, 0xcd, 0x91, 0x1b, 0x08, 0x5a, 0x86, 0x79, 0xdb, 0x09,
	0x42, 0x56, 0x6e, 0x51, 0x45, 0xb3, 0x1a, 0xc8, 0xf0, 0x4b, 0x99, 0x1b, 0x38, 0x78, 0x2e, 0xdd,
	0x42, 0x8f, 0x80, 0xab, 0x33, 0xe2, 0xda, 0xcb, 0x67, 0xa3, 0xbb, 0x63, 0xd8, 0x61, 0x04, 0x31,
	0xc1, 0xb1, 0xd7, 0xb0, 0x9d, 0x63, 0x37, 0x3f, 0x73, 0x87, 0xe0, 0x38, 0x46, 0x77, 0x8e, 0x5d,
	0x9c, 0xe9, 0x5f, 0x19, 0xe8, 0x7b, 0x40, 0x23, 0x5d, 0x30, 0x50, 0x3c, 0xcb, 0x53, 0x95, 0xef,
	0x56, 0xfc, 0xf2, 0x2a, 0x2e, 0x96, 0x3c, 0xdf, 0xbd, 0x09, 0x15, 0xd6, 0x20, 0x33, 0x52, 0x33,
	0x28, 0x07, 0x93, 0x27, 0xf4, 0x34, 0x6e, 0x08, 0xb6, 0x44, 0x1f, 0xc1, 0x54, 0x9f, 0x74, 0x7a,
	0x34, 0x6e, 0x86, 0xc8, 0xf8, 0x72, 0xa2, 0x2a, 0x14, 0x7f, 0x12, 0x20, 0x19, 0xd5, 0x0a, 0x7a,
	0x00, 0xa8, 0xd9, 0xda, 0x6c, 0x1d, 0x34, 0x8d, 0x83, 0x7a, 0xb3, 0x51, 0xdb, 0xd6, 0x77, 0xf5,
	0xda, 0x4e, 0xee, 0x1e, 0xca, 0x41, 0xb6, 0x81, 0xf7, 0x0f, 0xf5, 0xa6, 0xbe, 0x5f, 0xd7, 0xeb,
	0x2f, 0x72, 0x02, 0xca, 0xc0, 0x34, 0x3e, 0xa8, 0x73, 0x63, 0x02, 0xcd, 0x41, 0x06, 0xd7, 0xb6,
	0xf7, 0xeb, 0xdb, 0xfa, 0x1e, 0x03, 0x26, 0x51, 0x16, 0x52, 0xcd, 0xd6, 0x7e, 0xa3, 0xc1, 0xac,
	0x04, 0xe3, 0x72, 0xab, 0xb6, 0x93, 0x9b, 0x62, 0xae, 0x9d, 0xda, 0x5e, 0xad, 0xc5, 0x5c, 0xc9,
	0x88, 0xb8, 0x89, 0xb9, 0x35, 0x5d, 0xfc, 0x35, 0x01, 0xd9, 0xd1, 0xca, 0x43, 0x0f, 0x21, 0xc3,
	0x16, 0xc7, 0xae, 0xdf, 0x35, 0x86, 0xfd, 0x0d, 0x03, 0x48, 0xb7, 0x90, 0x0e, 0xb3, 0x3e, 0x0d,
	0xdc, 0x9e, 0x6f, 0xd2, 0xc0, 0x08, 0x3c, 0x6a, 0x72, 0x79, 0x19, 0xb5, 0x38, 0xf6, 0x48, 0xf1,
	0x80, 0xda, 0xf4, 0xa8, 0x89, 0x67, 0xfc, 0x51, 0x13, 0x6d, 0xc3, 0xec, 0x91, 0xeb, 0x86, 0x86,
	0x65, 0x07, 0x27, 0x51, 0xaa, 0xe8, 0x5d, 0x58, 0x18, 0x9b, 0x6a, 0xc7, 0x0e, 0x4e, 0x78, 0x96,
	0x2c, 0x0b, 0x1a, 0x58, 0xe8, 0x07, 0x01, 0x52, 0x5d, 0x1a, 0x12, 0x8b, 0x84, 0x24, 0x9f, 0xe0,
	0xad, 0x5e, 0xfe, 0x60, 0x83, 0x49, 0x2f, 0xe3, 0x08, 0x7e, 0x77, 0x5b, 0xda, 0x8f, 0x17, 0x4a,
	0xe2, 0xf9, 0x46, 0x45, 0xfb, 0xf9, 0x42, 0x49, 0x3d, 0xdf, 0x50, 0x56, 0x14, 0x79, 0x55, 0x7d,
	0x7f, 0xa1, 0x24, 0x0b, 0x09, 0xa5, 0x54, 0x59, 0x79, 0x7f, 0xa1, 0x20, 0x94, 0x7b, 0x45, 0x4a,
	0x67, 0xdf, 0xbd, 0x2a, 0x19, 0x72, 0x69, 0x8d, 0xad, 0x96, 0xf1, 0xf0, 0x6f, 0xd1, 0x1e, 0xcc,
	0xf5, 0x35, 0x83, 0x58, 0x96, 0x4f, 0x83, 0xf8, 0x50, 0xa6, 0xb8, 0x92, 0xc7, 0xb7, 0xee, 0x64,
	0x33, 0x22, 0x47, 0xc7, 0xd2, 0xd7, 0x46, 0x4c, 0x84, 0x61, 0x3e, 0x30, 0x5f, 0x53, 0xab, 0xd7,
	0xb1, 0x9d, 0xf6, 0xa0, 0x6e, 0x93, 0x3c, 0xdf, 0x93, 0x5b, 0x7a, 0x7e, 0xc0, 0x1e, 0x34, 0x68,
	0x70, 0x03, 0x29, 0xac, 0xc3, 0xcc, 0x35, 0xc9, 0xff, 0xab, 0x5c, 0x29, 0xcc, 0xdd, 0xd8, 0x32,
	0xc2, 0x70, 0xdf, 0x75, 0xa8, 0x11, 0xba, 0x06, 0xfb, 0x71, 0x48, 0x18, 0xa9, 0x16, 0xee, 0x50,
	0xbd, 0xef, 0xd0, 0x96, 0xbb, 0xef, 0xd0, 0x3a, 0x09, 0xb9, 0xea, 0x39, 0xf7, 0x3a, 0x50, 0x6c,
	0xc0, 0xdc, 0x0d, 0x0e, 0xda, 0x00, 0xb0, 0xbd, 0xe1, 0x4b, 0x21, 0xf0, 0x47, 0xf8, 0xf3, 0xb1,
	0xd9, 0x75, 0x2f, 0x7e, 0x08, 0x70, 0xda, 0x1e, 0x2c, 0x8b, 0xbf, 0x0b, 0x30, 0x73, 0xad, 0x02,
	0xd1, 0x32, 0x24, 0xbb, 0xb4, 0xeb, 0xfa, 0x91, 0xf2, 0xc9, 0x2d, 0x74, 0x79, 0xae, 0xcc, 0xca,
	0x25, 0x75, 0x55, 0xab, 0xae, 0xae, 0xae, 0xc9, 0x95, 0x35, 0x4d, 0xc3, 0x31, 0x03, 0xe9, 0x30,
	0x65, 0xba, 0x3e, 0x0d, 0xf8, 0x81, 0x4c, 0x6e, 0xad, 0x5c, 0x9e, 0x2b, 0x65, 0x59, 0x54, 0x44,
	0x55, 0xd4, 0xc4, 0x8a, 0x58, 0x15, 0x15, 0x59, 0x54, 0x54, 0x51, 0xd1, 0x44, 0xa5, 0x22, 0x2a,
	0x55, 0x51, 0x95, 0x45, 0x55, 0x15, 0x55, 0x4d, 0x54, 0x2b, 0xa2, 0x5a, 0x15, 0x57, 0x64, 0x71,
	0x45, 0xc5, 0x51, 0x06, 0x54, 0x81, 0x19, 0xb6, 0x30, 0x8e, 0x7d, 0x62, 0xf2, 0x81, 0x35, 0xc9,
	0x53, 0xce, 0x5f, 0x9e, 0x2b, 0x33, 0xb2, 0xf8, 0x8c, 0xc5, 0x3e, 0x93, 0x45, 0x45, 0x96, 0x71,
	0x96, 0xf1, 0x76, 0x63, 0x5a, 0xf1, 0x1d, 0xa4, 0x86, 0x85, 0xfe, 0x15, 0x64, 0x79, 0xa3, 0x84,
	0xa7, 0x1e, 0x1d, 0xb6, 0xe6, 0xd6, 0x67, 0xff, 0x9c, 0x2b, 0xf9, 0x77, 0x0e, 0x0d, 0xdf, 0xb8,
	0xfe, 0x49, 0x29, 0x08, 0xac, 0xe1, 0xfa, 0xb5, 0x65, 0x61, 0x60, 0x11, 0xad, 0x53, 0x8f, 0xea,
	0x16, 0x92, 0x21, 0x1d, 0x35, 0x9a, 0x7d, 0x46, 0x63, 0x49, 0xf7, 0x2f, 0xcf, 0x95, 0x39, 0xb9,
	0xa4, 0xad, 0xac, 0x55, 0x65, 0xad, 0xf2, 0x4c, 0x51, 0x14, 0x59, 0xc3, 0x29, 0xc6, 0x6a, 0xda,
	0x67, 0xb4, 0xf8, 0x8b, 0x00, 0x99, 0x91, 0x79, 0x82, 0xea, 0x90, 0x39, 0xb6, 0xdf, 0x52, 0xcb,
	0xe0, 0x73, 0x25, 0xbe, 0xec, 0xa7, 0x1f, 0x1a, 0x43, 0xd2, 0x2e, 0x8b, 0xe1, 0xc0, 0xd7, 0xf7,
	0x30, 0x1c, 0x0f, 0xad, 0xc2, 0x53, 0x80, 0x2b, 0x1f, 0x5a, 0x80, 0x04, 0xdf, 0x5a, 0x74, 0x31,
	0xe9, 0xcb, 0x73, 0x65, 0x4a, 0x2e, 0xb1, 0x23, 0xe1, 0xf0, 0x16, 0x02, 0x88, 0x86, 0x20, 0xd3,
	0x8f, 0x12, 0x7f, 0xfc, 0xa9, 0x08, 0x45, 0x02, 0x9f, 0xdc, 0x3a, 0xa5, 0xd0, 0x0e, 0xa4, 0x07,
	0x48, 0x90, 0x17, 0xf8, 0xc3, 0xf0, 0xc5, 0xdd, 0xcf, 0xfe, 0x5e, 0x4c, 0xc7, 0x57, 0x81, 0xc5,
	0x7d, 0x98, 0xff, 0x8f, 0x1f, 0x2d, 0xc0, 0xf4, 0x19, 0xab, 0xfb, 0xe1, 0x2d, 0x24, 0xfe, 0x3e,
	0x57, 0x04, 0x9c, 0x64, 0xa0, 0x6e, 0xa1, 0x4f, 0x21, 0x1d, 0xf4, 0x8e, 0x1c, 0x1a, 0x5e, 0x7d,
	0x09, 0xa5, 0x22, 0x40, 0xb7, 0x8a, 0x1a, 0xe4, 0x6e, 0xf6, 0x2b, 0xfb, 0x9a, 0xf1, 0x7c, 0x4a,
	0xbb, 0x5e, 0x68, 0x1f, 0xc5, 0x07, 0x9b, 0xc2, 0xa3, 0x50, 0xf1, 0x37, 0x01, 0x0a, 0xb7, 0x8f,
	0x27, 0x36, 0x53, 0x49, 0x2f, 0x74, 0x8d, 0x9e, 0xd7, 0xf6, 0x89, 0x35, 0xcc, 0xc0, 0xb0, 0x83,
	0x08, 0x62, 0x0f, 0x3b, 0xa7, 0xf8, 0xd4, 0x23, 0xb6, 0xcf, 0xb7, 0x95, 0xc2, 0xc0, 0x20, 0xcc,
	0x11, 0x74, 0x70, 0x7d, 0x5e, 0xbe, 0xb1, 0x1d, 0xcb, 0x7d, 0x13, 0xbf, 0xc8, 0xe3, 0x0f, 0x6e,
	0x64, 0x1f, 0xdf, 0x70, 0xf6, 0xb5, 0x31, 0x19, 0x41, 0xcb, 0xeb, 0x90, 0x1e, 0xf6, 0x26, 0x2a,
	0xc0, 0x03, 0xbd, 0x61, 0x1c, 0xd6, 0x30, 0x1b, 0x6b, 0x37, 0x26, 0x5e, 0x0a, 0x12, 0x7a, 0xe3,
	0x50, 0xcb, 0x09, 0xf1, 0xaa, 0x92, 0x9b, 0xd8, 0x3a, 0x84, 0x8f, 0xaf, 0xfd, 0x31, 0xf1, 0xec,
	0xf8, 0xcf, 0xbf, 0x5d, 0x6f, 0xdb, 0xe1, 0xeb, 0xde, 0x91, 0x64, 0xba, 0xdd, 0x72, 0xc4, 0x29,
	0x45, 0xdf, 0xad, 0x6d, 0xb7, 0xd4, 0xa6, 0x0e, 0xff, 0xa4, 0x2c, 0x8f, 0xf9, 0xe6, 0x5d, 0x3f,
	0xa9, 0x06, 0x47, 0x49, 0xee, 0x5e, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x34, 0x3c, 0x92, 0xd7,
	0x98, 0x0b, 0x00, 0x00,
}
