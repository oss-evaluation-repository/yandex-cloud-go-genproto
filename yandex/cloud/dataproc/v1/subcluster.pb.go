// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/dataproc/v1/subcluster.proto

package dataproc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Role int32

const (
	// Host have undefined role
	Role_ROLE_UNSPECIFIED Role = 0
	// Masternode includes these services (depends on given component list)
	// * HDFS Namenode, Secondary Namenode,
	// * YARN ResorceManager, Timeline Server,
	// * Zookeeper,
	// * Hive Server, Hive Metastore, HCatalog
	// * HBase Master,
	// * Spark History Server,
	// * Zeppelin
	Role_MASTERNODE Role = 1
	// Datanode includes these services (depends on given component list)
	// * HDFS Datanode,
	// * YARN NodeManager,
	// * HBase RegionServer,
	// * Spark libraries.
	Role_DATANODE Role = 2
	// Computenodes includes these services (depends on given component list)
	// * YARN NodeManager.
	// * Spark libraries.
	Role_COMPUTENODE Role = 3
)

var Role_name = map[int32]string{
	0: "ROLE_UNSPECIFIED",
	1: "MASTERNODE",
	2: "DATANODE",
	3: "COMPUTENODE",
}

var Role_value = map[string]int32{
	"ROLE_UNSPECIFIED": 0,
	"MASTERNODE":       1,
	"DATANODE":         2,
	"COMPUTENODE":      3,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}

func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3761a92b6a1bd471, []int{0}
}

// A Dataproc Subcluster resource. For more information, see
// the [Concepts](/docs/data-proc/concepts) section of the documentation.
type Subcluster struct {
	// ID of the Dataproc subcluster.
	// This ID is assigned by Dataproc in the process of creating Dataproc subcluster.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the Dataproc cluster.
	// This ID is assigned by Dataproc in the process of creating Dataproc cluster.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the Dataproc subcluster.
	// The name is unique within the folder. 1-64 characters long.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Role of all hosts in subcluster.
	Role Role `protobuf:"varint,5,opt,name=role,proto3,enum=yandex.cloud.dataproc.v1.Role" json:"role,omitempty"`
	// Resource configuration for hosts in subcluster.
	Resources *Resources `protobuf:"bytes,6,opt,name=resources,proto3" json:"resources,omitempty"`
	// ID of using compute subnet for hosts in subcluster.
	SubnetId string `protobuf:"bytes,7,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Number of hosts in subcluster.
	HostsCount           int64    `protobuf:"varint,8,opt,name=hosts_count,json=hostsCount,proto3" json:"hosts_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subcluster) Reset()         { *m = Subcluster{} }
func (m *Subcluster) String() string { return proto.CompactTextString(m) }
func (*Subcluster) ProtoMessage()    {}
func (*Subcluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_3761a92b6a1bd471, []int{0}
}

func (m *Subcluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subcluster.Unmarshal(m, b)
}
func (m *Subcluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subcluster.Marshal(b, m, deterministic)
}
func (m *Subcluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subcluster.Merge(m, src)
}
func (m *Subcluster) XXX_Size() int {
	return xxx_messageInfo_Subcluster.Size(m)
}
func (m *Subcluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Subcluster.DiscardUnknown(m)
}

var xxx_messageInfo_Subcluster proto.InternalMessageInfo

func (m *Subcluster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Subcluster) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *Subcluster) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Subcluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subcluster) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (m *Subcluster) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Subcluster) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *Subcluster) GetHostsCount() int64 {
	if m != nil {
		return m.HostsCount
	}
	return 0
}

// A Dataproc Host resource. For more information, see
// the [Concepts](/docs/data-proc/concepts) section of the documentation.
type Host struct {
	// Name of the Dataproc host. The host name is assigned by Dataproc at creation time, and cannot be changed.
	// 1-63 characters long.
	//
	// The name is unique across all existing Dataproc hosts in Yandex.Cloud, as it defines the FQDN of the host.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of Dataproc subcluster host. The ID is assigned by Dataproc at creation time.
	SubclusterId string `protobuf:"bytes,2,opt,name=subcluster_id,json=subclusterId,proto3" json:"subcluster_id,omitempty"`
	// Status code of the aggregated health of the host.
	Health Health `protobuf:"varint,3,opt,name=health,proto3,enum=yandex.cloud.dataproc.v1.Health" json:"health,omitempty"`
	// ID of compute instance appropriated to the Dataproc host.
	ComputeInstanceId string `protobuf:"bytes,4,opt,name=compute_instance_id,json=computeInstanceId,proto3" json:"compute_instance_id,omitempty"`
	// Role of current host in cluster.
	Role                 Role     `protobuf:"varint,5,opt,name=role,proto3,enum=yandex.cloud.dataproc.v1.Role" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_3761a92b6a1bd471, []int{1}
}

func (m *Host) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Host.Unmarshal(m, b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Host.Marshal(b, m, deterministic)
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return xxx_messageInfo_Host.Size(m)
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Host) GetSubclusterId() string {
	if m != nil {
		return m.SubclusterId
	}
	return ""
}

func (m *Host) GetHealth() Health {
	if m != nil {
		return m.Health
	}
	return Health_HEALTH_UNKNOWN
}

func (m *Host) GetComputeInstanceId() string {
	if m != nil {
		return m.ComputeInstanceId
	}
	return ""
}

func (m *Host) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("yandex.cloud.dataproc.v1.Role", Role_name, Role_value)
	proto.RegisterType((*Subcluster)(nil), "yandex.cloud.dataproc.v1.Subcluster")
	proto.RegisterType((*Host)(nil), "yandex.cloud.dataproc.v1.Host")
}

func init() {
	proto.RegisterFile("yandex/cloud/dataproc/v1/subcluster.proto", fileDescriptor_3761a92b6a1bd471)
}

var fileDescriptor_3761a92b6a1bd471 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x49, 0x5b, 0x4a, 0xf3, 0x76, 0x94, 0x62, 0x38, 0x44, 0xe5, 0xcf, 0xa2, 0x4d, 0x48,
	0x05, 0x69, 0x8e, 0x56, 0x2e, 0x20, 0x4e, 0xa1, 0x0d, 0x5a, 0x04, 0x5b, 0xa7, 0xb4, 0xbb, 0x70,
	0x89, 0x1c, 0xdb, 0xa4, 0x91, 0x92, 0x38, 0x8a, 0x9d, 0x09, 0x3e, 0x1d, 0x9f, 0x84, 0xef, 0x82,
	0xea, 0x24, 0x64, 0x1c, 0xca, 0x81, 0x9b, 0xfd, 0xf8, 0xf7, 0xe6, 0x79, 0xde, 0x37, 0x2f, 0xbc,
	0xfe, 0x41, 0x72, 0xc6, 0xbf, 0x3b, 0x34, 0x15, 0x15, 0x73, 0x18, 0x51, 0xa4, 0x28, 0x05, 0x75,
	0x6e, 0xcf, 0x1d, 0x59, 0x45, 0x34, 0xad, 0xa4, 0xe2, 0x25, 0x2e, 0x4a, 0xa1, 0x04, 0xb2, 0x6a,
	0x14, 0x6b, 0x14, 0xb7, 0x28, 0xbe, 0x3d, 0x9f, 0x1d, 0xc7, 0x42, 0xc4, 0x29, 0x77, 0x34, 0x17,
	0x55, 0xdf, 0x1c, 0x95, 0x64, 0x5c, 0x2a, 0x92, 0x15, 0x75, 0xe9, 0xec, 0xd5, 0x41, 0x17, 0x2a,
	0xb2, 0x4c, 0xe4, 0x35, 0x76, 0xf2, 0xb3, 0x07, 0xb0, 0xf9, 0x63, 0x8b, 0x26, 0xd0, 0x4b, 0x98,
	0x65, 0xd8, 0xc6, 0xdc, 0x0c, 0x7a, 0x09, 0x43, 0x2f, 0x00, 0x9a, 0xa7, 0x30, 0x61, 0x56, 0x4f,
	0xeb, 0x66, 0xa3, 0xf8, 0x0c, 0xbd, 0x07, 0xa0, 0x25, 0x27, 0x8a, 0xb3, 0x90, 0x28, 0xab, 0x6f,
	0x1b, 0xf3, 0xf1, 0x62, 0x86, 0xeb, 0x68, 0xb8, 0x8d, 0x86, 0xb7, 0x6d, 0xb4, 0xc0, 0x6c, 0x68,
	0x57, 0x21, 0x04, 0x83, 0x9c, 0x64, 0xdc, 0x1a, 0xe8, 0x6f, 0xea, 0x33, 0x5a, 0xc0, 0xa0, 0x14,
	0x29, 0xb7, 0xee, 0xdb, 0xc6, 0x7c, 0xb2, 0x78, 0x89, 0x0f, 0x75, 0x8f, 0x03, 0x91, 0xf2, 0x40,
	0xb3, 0xc8, 0x05, 0xb3, 0xe4, 0x52, 0x54, 0x25, 0xe5, 0xd2, 0x1a, 0xea, 0x04, 0xa7, 0xff, 0x28,
	0x6c, 0xd1, 0xa0, 0xab, 0x42, 0xcf, 0xc0, 0x94, 0x55, 0x94, 0x73, 0xb5, 0xef, 0xf1, 0x81, 0xce,
	0x33, 0xaa, 0x05, 0x9f, 0xa1, 0x63, 0x18, 0xef, 0x84, 0x54, 0x32, 0xa4, 0xa2, 0xca, 0x95, 0x35,
	0xb2, 0x8d, 0x79, 0x3f, 0x00, 0x2d, 0x2d, 0xf7, 0xca, 0xc9, 0x2f, 0x03, 0x06, 0x17, 0x42, 0x76,
	0x1d, 0x19, 0x77, 0x3a, 0x3a, 0x85, 0x87, 0xdd, 0x4f, 0xed, 0x46, 0x78, 0xd4, 0x89, 0x3e, 0x43,
	0xef, 0x60, 0xb8, 0xe3, 0x24, 0x55, 0x3b, 0x3d, 0xc1, 0xc9, 0xc2, 0x3e, 0x9c, 0xff, 0x42, 0x73,
	0x41, 0xc3, 0x23, 0x0c, 0x4f, 0xa8, 0xc8, 0x8a, 0x4a, 0xf1, 0x30, 0xc9, 0xa5, 0x22, 0x39, 0xe5,
	0x7b, 0x93, 0x7a, 0xa6, 0x8f, 0x9b, 0x27, 0xbf, 0x79, 0xf1, 0xd9, 0xff, 0x0c, 0xf8, 0xcd, 0x67,
	0x18, 0xec, 0x6f, 0xe8, 0x29, 0x4c, 0x83, 0xf5, 0x17, 0x2f, 0xbc, 0xb9, 0xda, 0x5c, 0x7b, 0x4b,
	0xff, 0x93, 0xef, 0xad, 0xa6, 0xf7, 0xd0, 0x04, 0xe0, 0xd2, 0xdd, 0x6c, 0xbd, 0xe0, 0x6a, 0xbd,
	0xf2, 0xa6, 0x06, 0x3a, 0x82, 0xd1, 0xca, 0xdd, 0xba, 0xfa, 0xd6, 0x43, 0x8f, 0x60, 0xbc, 0x5c,
	0x5f, 0x5e, 0xdf, 0x6c, 0x3d, 0x2d, 0xf4, 0x3f, 0x72, 0x78, 0xfe, 0x97, 0x27, 0x29, 0x92, 0xbb,
	0xbe, 0x5f, 0xbd, 0x38, 0x51, 0xbb, 0x2a, 0xc2, 0x54, 0x64, 0x4e, 0x0d, 0x9e, 0xd5, 0x0b, 0x1c,
	0x8b, 0xb3, 0x98, 0xe7, 0x7a, 0xa5, 0x9c, 0x43, 0x9b, 0xfd, 0xa1, 0x3d, 0x47, 0x43, 0x0d, 0xbe,
	0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x15, 0xe1, 0x15, 0x93, 0x6b, 0x03, 0x00, 0x00,
}
