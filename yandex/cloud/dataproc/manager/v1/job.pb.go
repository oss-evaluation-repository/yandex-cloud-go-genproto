// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yandex/cloud/dataproc/manager/v1/job.proto

package dataproc_manager

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Job_Status int32

const (
	Job_STATUS_UNSPECIFIED Job_Status = 0
	Job_PROVISIONING       Job_Status = 1
	Job_PENDING            Job_Status = 2
	Job_RUNNING            Job_Status = 3
	Job_ERROR              Job_Status = 4
	Job_DONE               Job_Status = 5
)

var Job_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "PROVISIONING",
	2: "PENDING",
	3: "RUNNING",
	4: "ERROR",
	5: "DONE",
}

var Job_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"PROVISIONING":       1,
	"PENDING":            2,
	"RUNNING":            3,
	"ERROR":              4,
	"DONE":               5,
}

func (x Job_Status) String() string {
	return proto.EnumName(Job_Status_name, int32(x))
}

func (Job_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_21bdbee720f1717c, []int{0, 0}
}

// Data Proc job.
type Job struct {
	// Unique ID of the Data Proc job.
	// This ID is assigned by MDB in the process of creating Data Proc job.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the Data Proc cluster.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The time when the Data Proc job was created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The time when the Data Proc job was started.
	StartedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// The time when the Data Proc job was finished.
	FinishedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// Name of the Data Proc job.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// The id of the user who created the job
	CreatedBy string `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Status.
	Status Job_Status `protobuf:"varint,7,opt,name=status,proto3,enum=yandex.cloud.dataproc.manager.v1.Job_Status" json:"status,omitempty"`
	// Job specification.
	//
	// Types that are valid to be assigned to JobSpec:
	//	*Job_MapreduceJob
	//	*Job_SparkJob
	//	*Job_PysparkJob
	//	*Job_HiveJob
	JobSpec              isJob_JobSpec `protobuf_oneof:"job_spec"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_21bdbee720f1717c, []int{0}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *Job) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Job) GetStartedAt() *timestamp.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *Job) GetFinishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Job) GetStatus() Job_Status {
	if m != nil {
		return m.Status
	}
	return Job_STATUS_UNSPECIFIED
}

type isJob_JobSpec interface {
	isJob_JobSpec()
}

type Job_MapreduceJob struct {
	MapreduceJob *MapreduceJob `protobuf:"bytes,8,opt,name=mapreduce_job,json=mapreduceJob,proto3,oneof"`
}

type Job_SparkJob struct {
	SparkJob *SparkJob `protobuf:"bytes,9,opt,name=spark_job,json=sparkJob,proto3,oneof"`
}

type Job_PysparkJob struct {
	PysparkJob *PysparkJob `protobuf:"bytes,10,opt,name=pyspark_job,json=pysparkJob,proto3,oneof"`
}

type Job_HiveJob struct {
	HiveJob *HiveJob `protobuf:"bytes,11,opt,name=hive_job,json=hiveJob,proto3,oneof"`
}

func (*Job_MapreduceJob) isJob_JobSpec() {}

func (*Job_SparkJob) isJob_JobSpec() {}

func (*Job_PysparkJob) isJob_JobSpec() {}

func (*Job_HiveJob) isJob_JobSpec() {}

func (m *Job) GetJobSpec() isJob_JobSpec {
	if m != nil {
		return m.JobSpec
	}
	return nil
}

func (m *Job) GetMapreduceJob() *MapreduceJob {
	if x, ok := m.GetJobSpec().(*Job_MapreduceJob); ok {
		return x.MapreduceJob
	}
	return nil
}

func (m *Job) GetSparkJob() *SparkJob {
	if x, ok := m.GetJobSpec().(*Job_SparkJob); ok {
		return x.SparkJob
	}
	return nil
}

func (m *Job) GetPysparkJob() *PysparkJob {
	if x, ok := m.GetJobSpec().(*Job_PysparkJob); ok {
		return x.PysparkJob
	}
	return nil
}

func (m *Job) GetHiveJob() *HiveJob {
	if x, ok := m.GetJobSpec().(*Job_HiveJob); ok {
		return x.HiveJob
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Job) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Job_MapreduceJob)(nil),
		(*Job_SparkJob)(nil),
		(*Job_PysparkJob)(nil),
		(*Job_HiveJob)(nil),
	}
}

type MapreduceJob struct {
	// Optional arguments to the driver.
	Args []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	// URIs of file to run.
	JarFileUris []string `protobuf:"bytes,2,rep,name=jar_file_uris,json=jarFileUris,proto3" json:"jar_file_uris,omitempty"`
	// URIs of files to be copied to the working directory of Data Proc drivers and distributed tasks.
	FileUris []string `protobuf:"bytes,3,rep,name=file_uris,json=fileUris,proto3" json:"file_uris,omitempty"`
	// URIs of archives to be extracted in the working directory of Data Proc drivers and tasks.
	ArchiveUris []string `protobuf:"bytes,4,rep,name=archive_uris,json=archiveUris,proto3" json:"archive_uris,omitempty"`
	// A mapping of property names to values, used to configure Data Proc.
	Properties map[string]string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to Driver:
	//	*MapreduceJob_MainJarFileUri
	//	*MapreduceJob_MainClass
	Driver               isMapreduceJob_Driver `protobuf_oneof:"driver"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MapreduceJob) Reset()         { *m = MapreduceJob{} }
func (m *MapreduceJob) String() string { return proto.CompactTextString(m) }
func (*MapreduceJob) ProtoMessage()    {}
func (*MapreduceJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_21bdbee720f1717c, []int{1}
}

func (m *MapreduceJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapreduceJob.Unmarshal(m, b)
}
func (m *MapreduceJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapreduceJob.Marshal(b, m, deterministic)
}
func (m *MapreduceJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapreduceJob.Merge(m, src)
}
func (m *MapreduceJob) XXX_Size() int {
	return xxx_messageInfo_MapreduceJob.Size(m)
}
func (m *MapreduceJob) XXX_DiscardUnknown() {
	xxx_messageInfo_MapreduceJob.DiscardUnknown(m)
}

var xxx_messageInfo_MapreduceJob proto.InternalMessageInfo

func (m *MapreduceJob) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *MapreduceJob) GetJarFileUris() []string {
	if m != nil {
		return m.JarFileUris
	}
	return nil
}

func (m *MapreduceJob) GetFileUris() []string {
	if m != nil {
		return m.FileUris
	}
	return nil
}

func (m *MapreduceJob) GetArchiveUris() []string {
	if m != nil {
		return m.ArchiveUris
	}
	return nil
}

func (m *MapreduceJob) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type isMapreduceJob_Driver interface {
	isMapreduceJob_Driver()
}

type MapreduceJob_MainJarFileUri struct {
	MainJarFileUri string `protobuf:"bytes,6,opt,name=main_jar_file_uri,json=mainJarFileUri,proto3,oneof"`
}

type MapreduceJob_MainClass struct {
	MainClass string `protobuf:"bytes,7,opt,name=main_class,json=mainClass,proto3,oneof"`
}

func (*MapreduceJob_MainJarFileUri) isMapreduceJob_Driver() {}

func (*MapreduceJob_MainClass) isMapreduceJob_Driver() {}

func (m *MapreduceJob) GetDriver() isMapreduceJob_Driver {
	if m != nil {
		return m.Driver
	}
	return nil
}

func (m *MapreduceJob) GetMainJarFileUri() string {
	if x, ok := m.GetDriver().(*MapreduceJob_MainJarFileUri); ok {
		return x.MainJarFileUri
	}
	return ""
}

func (m *MapreduceJob) GetMainClass() string {
	if x, ok := m.GetDriver().(*MapreduceJob_MainClass); ok {
		return x.MainClass
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MapreduceJob) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MapreduceJob_MainJarFileUri)(nil),
		(*MapreduceJob_MainClass)(nil),
	}
}

type SparkJob struct {
	// Optional arguments to the driver.
	Args []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	// Jar file URIs to add to the CLASSPATHs of the Data Proc driver and tasks.
	JarFileUris []string `protobuf:"bytes,2,rep,name=jar_file_uris,json=jarFileUris,proto3" json:"jar_file_uris,omitempty"`
	// URIs of files to be copied to the working directory of Data Proc drivers and distributed tasks.
	FileUris []string `protobuf:"bytes,3,rep,name=file_uris,json=fileUris,proto3" json:"file_uris,omitempty"`
	// URIs of archives to be extracted in the working directory of Data Proc drivers and tasks.
	ArchiveUris []string `protobuf:"bytes,4,rep,name=archive_uris,json=archiveUris,proto3" json:"archive_uris,omitempty"`
	// A mapping of property names to values, used to configure Data Proc.
	Properties map[string]string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The HCFS URI of the jar file containing the main class.
	MainJarFileUri string `protobuf:"bytes,6,opt,name=main_jar_file_uri,json=mainJarFileUri,proto3" json:"main_jar_file_uri,omitempty"`
	// The name of the driver's main class.
	MainClass            string   `protobuf:"bytes,7,opt,name=main_class,json=mainClass,proto3" json:"main_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SparkJob) Reset()         { *m = SparkJob{} }
func (m *SparkJob) String() string { return proto.CompactTextString(m) }
func (*SparkJob) ProtoMessage()    {}
func (*SparkJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_21bdbee720f1717c, []int{2}
}

func (m *SparkJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SparkJob.Unmarshal(m, b)
}
func (m *SparkJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SparkJob.Marshal(b, m, deterministic)
}
func (m *SparkJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SparkJob.Merge(m, src)
}
func (m *SparkJob) XXX_Size() int {
	return xxx_messageInfo_SparkJob.Size(m)
}
func (m *SparkJob) XXX_DiscardUnknown() {
	xxx_messageInfo_SparkJob.DiscardUnknown(m)
}

var xxx_messageInfo_SparkJob proto.InternalMessageInfo

func (m *SparkJob) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *SparkJob) GetJarFileUris() []string {
	if m != nil {
		return m.JarFileUris
	}
	return nil
}

func (m *SparkJob) GetFileUris() []string {
	if m != nil {
		return m.FileUris
	}
	return nil
}

func (m *SparkJob) GetArchiveUris() []string {
	if m != nil {
		return m.ArchiveUris
	}
	return nil
}

func (m *SparkJob) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *SparkJob) GetMainJarFileUri() string {
	if m != nil {
		return m.MainJarFileUri
	}
	return ""
}

func (m *SparkJob) GetMainClass() string {
	if m != nil {
		return m.MainClass
	}
	return ""
}

type PysparkJob struct {
	// Optional arguments to the driver.
	Args []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	// Jar file URIs to add to the CLASSPATHs of the Data Proc driver and tasks.
	JarFileUris []string `protobuf:"bytes,2,rep,name=jar_file_uris,json=jarFileUris,proto3" json:"jar_file_uris,omitempty"`
	// URIs of files to be copied to the working directory of Data Proc drivers and distributed tasks.
	FileUris []string `protobuf:"bytes,3,rep,name=file_uris,json=fileUris,proto3" json:"file_uris,omitempty"`
	// URIs of archives to be extracted in the working directory of Data Proc drivers and tasks.
	ArchiveUris []string `protobuf:"bytes,4,rep,name=archive_uris,json=archiveUris,proto3" json:"archive_uris,omitempty"`
	// A mapping of property names to values, used to configure Data Proc.
	Properties map[string]string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// URI of the main Python file to use as the driver. Must be a .py file.
	MainPythonFileUri string `protobuf:"bytes,6,opt,name=main_python_file_uri,json=mainPythonFileUri,proto3" json:"main_python_file_uri,omitempty"`
	// URIs of Python files to pass to the PySpark framework.
	PythonFileUris       []string `protobuf:"bytes,7,rep,name=python_file_uris,json=pythonFileUris,proto3" json:"python_file_uris,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PysparkJob) Reset()         { *m = PysparkJob{} }
func (m *PysparkJob) String() string { return proto.CompactTextString(m) }
func (*PysparkJob) ProtoMessage()    {}
func (*PysparkJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_21bdbee720f1717c, []int{3}
}

func (m *PysparkJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PysparkJob.Unmarshal(m, b)
}
func (m *PysparkJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PysparkJob.Marshal(b, m, deterministic)
}
func (m *PysparkJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PysparkJob.Merge(m, src)
}
func (m *PysparkJob) XXX_Size() int {
	return xxx_messageInfo_PysparkJob.Size(m)
}
func (m *PysparkJob) XXX_DiscardUnknown() {
	xxx_messageInfo_PysparkJob.DiscardUnknown(m)
}

var xxx_messageInfo_PysparkJob proto.InternalMessageInfo

func (m *PysparkJob) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *PysparkJob) GetJarFileUris() []string {
	if m != nil {
		return m.JarFileUris
	}
	return nil
}

func (m *PysparkJob) GetFileUris() []string {
	if m != nil {
		return m.FileUris
	}
	return nil
}

func (m *PysparkJob) GetArchiveUris() []string {
	if m != nil {
		return m.ArchiveUris
	}
	return nil
}

func (m *PysparkJob) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *PysparkJob) GetMainPythonFileUri() string {
	if m != nil {
		return m.MainPythonFileUri
	}
	return ""
}

func (m *PysparkJob) GetPythonFileUris() []string {
	if m != nil {
		return m.PythonFileUris
	}
	return nil
}

type QueryList struct {
	Queries              []string `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryList) Reset()         { *m = QueryList{} }
func (m *QueryList) String() string { return proto.CompactTextString(m) }
func (*QueryList) ProtoMessage()    {}
func (*QueryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_21bdbee720f1717c, []int{4}
}

func (m *QueryList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryList.Unmarshal(m, b)
}
func (m *QueryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryList.Marshal(b, m, deterministic)
}
func (m *QueryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryList.Merge(m, src)
}
func (m *QueryList) XXX_Size() int {
	return xxx_messageInfo_QueryList.Size(m)
}
func (m *QueryList) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryList.DiscardUnknown(m)
}

var xxx_messageInfo_QueryList proto.InternalMessageInfo

func (m *QueryList) GetQueries() []string {
	if m != nil {
		return m.Queries
	}
	return nil
}

type HiveJob struct {
	// A mapping of property names to values, used to configure Hive.
	Properties map[string]string `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether to continue executing queries if a query fails.
	ContinueOnFailure bool `protobuf:"varint,2,opt,name=continue_on_failure,json=continueOnFailure,proto3" json:"continue_on_failure,omitempty"`
	// Mapping of query variable names to values.
	ScriptVariables map[string]string `protobuf:"bytes,3,rep,name=script_variables,json=scriptVariables,proto3" json:"script_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Jar file URIs to add to the CLASSPATHs of the Hive driver and tasks.
	JarFileUris []string `protobuf:"bytes,4,rep,name=jar_file_uris,json=jarFileUris,proto3" json:"jar_file_uris,omitempty"`
	// Types that are valid to be assigned to QueryType:
	//	*HiveJob_QueryFileUri
	//	*HiveJob_QueryList
	QueryType            isHiveJob_QueryType `protobuf_oneof:"query_type"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HiveJob) Reset()         { *m = HiveJob{} }
func (m *HiveJob) String() string { return proto.CompactTextString(m) }
func (*HiveJob) ProtoMessage()    {}
func (*HiveJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_21bdbee720f1717c, []int{5}
}

func (m *HiveJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HiveJob.Unmarshal(m, b)
}
func (m *HiveJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HiveJob.Marshal(b, m, deterministic)
}
func (m *HiveJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HiveJob.Merge(m, src)
}
func (m *HiveJob) XXX_Size() int {
	return xxx_messageInfo_HiveJob.Size(m)
}
func (m *HiveJob) XXX_DiscardUnknown() {
	xxx_messageInfo_HiveJob.DiscardUnknown(m)
}

var xxx_messageInfo_HiveJob proto.InternalMessageInfo

func (m *HiveJob) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *HiveJob) GetContinueOnFailure() bool {
	if m != nil {
		return m.ContinueOnFailure
	}
	return false
}

func (m *HiveJob) GetScriptVariables() map[string]string {
	if m != nil {
		return m.ScriptVariables
	}
	return nil
}

func (m *HiveJob) GetJarFileUris() []string {
	if m != nil {
		return m.JarFileUris
	}
	return nil
}

type isHiveJob_QueryType interface {
	isHiveJob_QueryType()
}

type HiveJob_QueryFileUri struct {
	QueryFileUri string `protobuf:"bytes,5,opt,name=query_file_uri,json=queryFileUri,proto3,oneof"`
}

type HiveJob_QueryList struct {
	QueryList *QueryList `protobuf:"bytes,6,opt,name=query_list,json=queryList,proto3,oneof"`
}

func (*HiveJob_QueryFileUri) isHiveJob_QueryType() {}

func (*HiveJob_QueryList) isHiveJob_QueryType() {}

func (m *HiveJob) GetQueryType() isHiveJob_QueryType {
	if m != nil {
		return m.QueryType
	}
	return nil
}

func (m *HiveJob) GetQueryFileUri() string {
	if x, ok := m.GetQueryType().(*HiveJob_QueryFileUri); ok {
		return x.QueryFileUri
	}
	return ""
}

func (m *HiveJob) GetQueryList() *QueryList {
	if x, ok := m.GetQueryType().(*HiveJob_QueryList); ok {
		return x.QueryList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HiveJob) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HiveJob_QueryFileUri)(nil),
		(*HiveJob_QueryList)(nil),
	}
}

func init() {
	proto.RegisterEnum("yandex.cloud.dataproc.manager.v1.Job_Status", Job_Status_name, Job_Status_value)
	proto.RegisterType((*Job)(nil), "yandex.cloud.dataproc.manager.v1.Job")
	proto.RegisterType((*MapreduceJob)(nil), "yandex.cloud.dataproc.manager.v1.MapreduceJob")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.dataproc.manager.v1.MapreduceJob.PropertiesEntry")
	proto.RegisterType((*SparkJob)(nil), "yandex.cloud.dataproc.manager.v1.SparkJob")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.dataproc.manager.v1.SparkJob.PropertiesEntry")
	proto.RegisterType((*PysparkJob)(nil), "yandex.cloud.dataproc.manager.v1.PysparkJob")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.dataproc.manager.v1.PysparkJob.PropertiesEntry")
	proto.RegisterType((*QueryList)(nil), "yandex.cloud.dataproc.manager.v1.QueryList")
	proto.RegisterType((*HiveJob)(nil), "yandex.cloud.dataproc.manager.v1.HiveJob")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.dataproc.manager.v1.HiveJob.PropertiesEntry")
	proto.RegisterMapType((map[string]string)(nil), "yandex.cloud.dataproc.manager.v1.HiveJob.ScriptVariablesEntry")
}

func init() {
	proto.RegisterFile("yandex/cloud/dataproc/manager/v1/job.proto", fileDescriptor_21bdbee720f1717c)
}

var fileDescriptor_21bdbee720f1717c = []byte{
	// 949 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0x8e, 0x5f, 0x63, 0x9f, 0x5d, 0xd7, 0xe5, 0x82, 0x41, 0xc8, 0x50, 0xd4, 0x33, 0xb6, 0xc1,
	0x6d, 0x57, 0x09, 0xcd, 0xbe, 0xac, 0xed, 0x36, 0x20, 0x6e, 0x9c, 0xc5, 0x41, 0x67, 0x7b, 0x72,
	0x5c, 0x60, 0xc5, 0x30, 0x81, 0x92, 0x18, 0x9b, 0xae, 0x2c, 0xa9, 0x24, 0x65, 0x4c, 0x1f, 0xf6,
	0x07, 0xf6, 0x53, 0xf6, 0xc7, 0xf6, 0x27, 0x36, 0x60, 0x10, 0x29, 0xc5, 0xce, 0xcb, 0xe2, 0x04,
	0x2d, 0xd0, 0x6f, 0xbc, 0xbb, 0xe7, 0x1e, 0xf2, 0x1e, 0x1e, 0x0f, 0x84, 0x47, 0x31, 0xf6, 0x5d,
	0xf2, 0xbb, 0xe1, 0x78, 0x41, 0xe4, 0x1a, 0x2e, 0x16, 0x38, 0x64, 0x81, 0x63, 0x2c, 0xb0, 0x8f,
	0xa7, 0x84, 0x19, 0xcb, 0xa7, 0xc6, 0x3c, 0xb0, 0xf5, 0x90, 0x05, 0x22, 0x40, 0x2d, 0x85, 0xd5,
	0x25, 0x56, 0xcf, 0xb0, 0x7a, 0x8a, 0xd5, 0x97, 0x4f, 0x77, 0x1f, 0x4c, 0x83, 0x60, 0xea, 0x11,
	0x43, 0xe2, 0xed, 0xe8, 0xd4, 0x10, 0x74, 0x41, 0xb8, 0xc0, 0x8b, 0x50, 0x51, 0xb4, 0xff, 0x2c,
	0x43, 0xe1, 0x38, 0xb0, 0x51, 0x03, 0xf2, 0xd4, 0xd5, 0x72, 0xad, 0x5c, 0xa7, 0x6a, 0xe6, 0xa9,
	0x8b, 0xee, 0x03, 0x38, 0x5e, 0xc4, 0x05, 0x61, 0x16, 0x75, 0xb5, 0xbc, 0xf4, 0x57, 0x53, 0x4f,
	0xdf, 0x45, 0xcf, 0x00, 0x1c, 0x46, 0xb0, 0x20, 0xae, 0x85, 0x85, 0x56, 0x68, 0xe5, 0x3a, 0xb5,
	0xbd, 0x5d, 0x5d, 0x6d, 0xa6, 0x67, 0x9b, 0xe9, 0x27, 0xd9, 0x66, 0x66, 0x35, 0x45, 0xef, 0x8b,
	0x24, 0x95, 0x0b, 0xcc, 0xd2, 0xd4, 0xe2, 0xe6, 0xd4, 0x14, 0xbd, 0x2f, 0xd0, 0x0b, 0xa8, 0x9d,
	0x52, 0x9f, 0xf2, 0x99, 0xca, 0x2d, 0x6d, 0xcc, 0x85, 0x0c, 0xbe, 0x2f, 0x10, 0x82, 0xa2, 0x8f,
	0x17, 0x44, 0x2b, 0xcb, 0x5a, 0xe4, 0x5a, 0x56, 0x99, 0x96, 0x61, 0xc7, 0x5a, 0x3d, 0xad, 0x52,
	0x79, 0xba, 0x31, 0x3a, 0x80, 0x32, 0x17, 0x58, 0x44, 0x5c, 0xdb, 0x6e, 0xe5, 0x3a, 0x8d, 0xbd,
	0xaf, 0xf5, 0x4d, 0x82, 0xeb, 0xc7, 0x81, 0xad, 0x8f, 0x65, 0x8e, 0x99, 0xe6, 0xa2, 0x09, 0xdc,
	0x59, 0xe0, 0x90, 0x11, 0x37, 0x72, 0x88, 0x35, 0x0f, 0x6c, 0xad, 0x22, 0xcf, 0xad, 0x6f, 0x26,
	0xfb, 0x29, 0x4b, 0x3b, 0x0e, 0xec, 0xa3, 0x2d, 0xb3, 0xbe, 0x58, 0xb3, 0x51, 0x1f, 0xaa, 0x3c,
	0xc4, 0xec, 0xad, 0xa4, 0xac, 0x4a, 0xca, 0x47, 0x9b, 0x29, 0xc7, 0x49, 0x8a, 0xa2, 0xab, 0xf0,
	0x74, 0x8d, 0x86, 0x50, 0x0b, 0xe3, 0x15, 0x19, 0x48, 0xb2, 0x1b, 0x14, 0x3b, 0x8a, 0xf9, 0x8a,
	0x0e, 0xc2, 0x33, 0x0b, 0x1d, 0x42, 0x65, 0x46, 0x97, 0xaa, 0xda, 0x9a, 0x64, 0x7b, 0xb8, 0x99,
	0xed, 0x88, 0x2e, 0xd3, 0x42, 0xb7, 0x67, 0x6a, 0xd9, 0xc6, 0x50, 0x56, 0x62, 0xa2, 0x4f, 0x01,
	0x8d, 0x4f, 0xf6, 0x4f, 0x26, 0x63, 0x6b, 0x32, 0x18, 0x8f, 0x7a, 0x2f, 0xfb, 0x87, 0xfd, 0xde,
	0x41, 0x73, 0x0b, 0x35, 0xa1, 0x3e, 0x32, 0x87, 0xaf, 0xfb, 0xe3, 0xfe, 0x70, 0xd0, 0x1f, 0xfc,
	0xd8, 0xcc, 0xa1, 0x1a, 0x6c, 0x8f, 0x7a, 0x83, 0x83, 0xc4, 0xc8, 0x27, 0x86, 0x39, 0x19, 0xc8,
	0x48, 0x01, 0x55, 0xa1, 0xd4, 0x33, 0xcd, 0xa1, 0xd9, 0x2c, 0xa2, 0x0a, 0x14, 0x0f, 0x86, 0x83,
	0x5e, 0xb3, 0xd4, 0x05, 0xa8, 0xcc, 0x03, 0xdb, 0xe2, 0x21, 0x71, 0xda, 0xff, 0xe6, 0xa1, 0xbe,
	0xae, 0x79, 0xd2, 0x33, 0x98, 0x4d, 0xb9, 0x96, 0x6b, 0x15, 0x92, 0x9e, 0x49, 0xd6, 0xa8, 0x0d,
	0x77, 0xe6, 0x98, 0x59, 0xa7, 0xd4, 0x23, 0x56, 0xc4, 0x28, 0xd7, 0xf2, 0x32, 0x58, 0x9b, 0x63,
	0x76, 0x48, 0x3d, 0x32, 0x61, 0x94, 0xa3, 0xcf, 0xa0, 0xba, 0x8a, 0x17, 0x64, 0xbc, 0x72, 0x9a,
	0x05, 0x3f, 0x87, 0x3a, 0x66, 0x8e, 0xd4, 0x47, 0xc6, 0x8b, 0x2a, 0x3f, 0xf5, 0x49, 0xc8, 0x6f,
	0x00, 0x21, 0x0b, 0x42, 0xc2, 0x04, 0x25, 0x5c, 0x2b, 0xb5, 0x0a, 0x9d, 0xda, 0xde, 0x0f, 0xb7,
	0xeb, 0x17, 0x7d, 0x74, 0x46, 0xd0, 0xf3, 0x05, 0x8b, 0xcd, 0x35, 0x46, 0xf4, 0x18, 0xee, 0x2d,
	0x30, 0xf5, 0xad, 0xf5, 0x42, 0xd4, 0xc3, 0x38, 0xda, 0x32, 0x1b, 0x49, 0xe8, 0xf8, 0xac, 0x1a,
	0xf4, 0x00, 0x40, 0x82, 0x1d, 0x0f, 0x73, 0xf5, 0x12, 0x12, 0x54, 0x35, 0xf1, 0xbd, 0x4c, 0x5c,
	0xbb, 0xdf, 0xc3, 0xdd, 0x0b, 0x9b, 0xa1, 0x26, 0x14, 0xde, 0x92, 0x38, 0x9d, 0x27, 0xc9, 0x12,
	0xed, 0x40, 0x69, 0x89, 0xbd, 0x88, 0xa4, 0xb3, 0x44, 0x19, 0xcf, 0xf3, 0xdf, 0xe6, 0xba, 0x15,
	0x28, 0xbb, 0x8c, 0x2e, 0x09, 0x6b, 0xff, 0x9d, 0x87, 0x4a, 0xd6, 0xa0, 0x1f, 0x4d, 0xfb, 0x37,
	0x57, 0x68, 0xff, 0xfc, 0xe6, 0x0f, 0xeb, 0x5a, 0xdd, 0x1f, 0xfe, 0xaf, 0xee, 0x97, 0x54, 0xbf,
	0x7f, 0x59, 0xf5, 0x0f, 0xa7, 0x79, 0xfb, 0x9f, 0x3c, 0xc0, 0xea, 0xf5, 0x7e, 0x34, 0xad, 0x7f,
	0xbd, 0x42, 0xeb, 0xef, 0x6e, 0x33, 0x77, 0xae, 0x55, 0xdb, 0x80, 0x1d, 0x29, 0x61, 0x18, 0x8b,
	0x59, 0xe0, 0x5f, 0x14, 0x5c, 0xde, 0xc4, 0x48, 0x86, 0x32, 0xcd, 0x3b, 0xd0, 0xbc, 0x80, 0x4d,
	0x94, 0x4f, 0x4e, 0xdd, 0x08, 0xd7, 0x81, 0xef, 0x2d, 0xff, 0x97, 0x50, 0xfd, 0x39, 0x22, 0x2c,
	0x7e, 0x45, 0xb9, 0x40, 0x1a, 0x6c, 0xbf, 0x8b, 0x08, 0x4b, 0x14, 0x50, 0xfa, 0x67, 0x66, 0xfb,
	0xaf, 0x22, 0x6c, 0xa7, 0x53, 0x11, 0xfd, 0x72, 0x4e, 0xaa, 0x9c, 0x94, 0xea, 0xd9, 0x8d, 0x87,
	0xea, 0xb5, 0x3a, 0xe9, 0xf0, 0x89, 0x13, 0xf8, 0x82, 0xfa, 0x11, 0xb1, 0x92, 0xda, 0x31, 0xf5,
	0x22, 0xa6, 0x4e, 0x5d, 0x31, 0xef, 0x65, 0xa1, 0xa1, 0x7f, 0xa8, 0x02, 0x88, 0x42, 0x93, 0x3b,
	0x8c, 0x86, 0xc2, 0x5a, 0x62, 0x46, 0xb1, 0xed, 0x11, 0x75, 0xf9, 0x37, 0x9a, 0x51, 0xd9, 0x81,
	0xc6, 0x92, 0xe1, 0x75, 0x46, 0xa0, 0x4e, 0x75, 0x97, 0x9f, 0xf7, 0x5e, 0x6e, 0xc2, 0xe2, 0xe5,
	0x26, 0xfc, 0x0a, 0x1a, 0x89, 0x60, 0xf1, 0xea, 0x82, 0x4b, 0xe9, 0x8c, 0xaa, 0x4b, 0x7f, 0x76,
	0xbb, 0xaf, 0x00, 0x14, 0xce, 0xa3, 0x5c, 0xc8, 0x26, 0xa8, 0xed, 0x3d, 0xde, 0x7c, 0xe0, 0xb3,
	0x8b, 0x4a, 0x86, 0xde, 0xbb, 0xcc, 0x78, 0xcf, 0x0e, 0xd8, 0xed, 0xc2, 0xce, 0x55, 0x0a, 0xdc,
	0x6a, 0x70, 0xd6, 0xb3, 0x82, 0x44, 0x1c, 0x92, 0xee, 0x1f, 0xf0, 0xc5, 0xb9, 0x5a, 0x70, 0x48,
	0xaf, 0xaa, 0xe7, 0xcd, 0x64, 0x4a, 0xc5, 0x2c, 0xb2, 0x75, 0x27, 0x58, 0x18, 0x2a, 0xe1, 0x89,
	0xfa, 0x6b, 0x4e, 0x83, 0x27, 0x53, 0xe2, 0xcb, 0x5f, 0x94, 0xb1, 0xe9, 0x13, 0xfa, 0x22, 0xf3,
	0x59, 0xa9, 0xcf, 0x2e, 0xcb, 0xc4, 0x6f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xed, 0xc0, 0xd4,
	0x78, 0xc0, 0x0a, 0x00, 0x00,
}
